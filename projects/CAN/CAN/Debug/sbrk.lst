* RX FAMILY ASSEMBLER V.1.02.00.000 *  SOURCE LIST  Sun Nov 10 22:46:20 2013

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V.1.02.00.000)  10-Nov-2013 22:46:1
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-CPU=RX600
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=C:\Users\Sandesh\AppData\Local\Temp\krb2199\sbrk.src
                                 ;-nologo
                                 ;-cpu=rx600
                                 ;-lang=c99
                                 ;-include=C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\..\src
                                 ;-define=NOT_USE_CAN_POLL=1,NOT_DEBUG=1
                                 ;-debug
                                 ;-show=source
                                 ;C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\sbrk.c
                                 
                                 ;C LABEL    INSTRUCTION OPERAND    COMMENT
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                             .SECTION    P,CODE
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\sbrk.c",59
                                 ;       1 /***********************************************************************/
                                 ;       2 /*                                                                     */
                                 ;       3 /*  FILE        :sbrk.c                                                */
                                 ;       4 /*  DATE        :Thu, Jul 08, 2010                                     */
                                 ;       5 /*  DESCRIPTION :Program of sbrk                                       */
                                 ;       6 /*  CPU TYPE    :                                                      */
                                 ;       7 /*                                                                     */
                                 ;       8 /*  This file is generated by Renesas Project Generator (Ver.4.50).    */
                                 ;       9 /*  NOTE:THIS IS A TYPICAL EXAMPLE.                                    */
                                 ;      10 /*                                                                     */
                                 ;      11 /***********************************************************************/
                                 ;      12                   
                                 ;      13 
                                 ;      14 
                                 ;      15 /*********************************************************************
                                 ;      16 *
                                 ;      17 * Device     : RX
                                 ;      18 *
                                 ;      19 * File Name  : sbrk.c
                                 ;      20 *
                                 ;      21 * Abstract   : Program of sbrk.
                                 ;      22 *
                                 ;      23 * History    : 1.00  (2009-08-07)
                                 ;      24 *
                                 ;      25 * NOTE       : THIS IS A TYPICAL EXAMPLE.
                                 ;      26 *
                                 ;      27 * Copyright(c) 2009 Renesas Technology Corp.
                                 ;      28 *               And Renesas Solutions Corp.,All Rights Reserved. 
                                 ;      29 *
                                 ;      30 *********************************************************************/
                                 ;      31 
                                 ;      32 #include <stddef.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /* stddef.h standard header */
                                 ;       8 #ifndef _STDDEF
                                 ;       9 #define _STDDEF
                                 ;      10 #include <macro.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 #ifndef _MACRO
                                 ;       8 #define _MACRO
                                 ;       9 
                                 ;      10 #ifdef __RX
                                 ;      11 
                                 ;      12 #ifndef _NO_MT
                                 ;      13 #define _NO_MT
                                 ;      14 #endif /* !_NO_MT */
                                 ;      15 
                                 ;      16 #ifdef __STDC_VERSION__
                                 ;      17 #if 199901L <= __STDC_VERSION__
                                 ;      18 #define _C99
                                 ;      19 #endif /* 199901L <= __STDC_VERSION__ */
                                 ;      20 #endif /* __STDC_VERSION__ */
                                 ;      21 
                                 ;      22 #ifndef _HAS_TR1
                                 ;      23 #define _HAS_TR1 0
                                 ;      24 #endif /* !_HAS_TR1 */
                                 ;      25 
                                 ;      26 #ifndef __STDC_WANT_LIB_EXT1__
                                 ;      27 #define __STDC_WANT_LIB_EXT1__ 0
                                 ;      28 #endif /* !__STDC_WANT_LIB_EXT1 */
                                 ;      29 
                                 ;      30 #ifndef _ADDED_C_LIB
                                 ;      31 #define _ADDED_C_LIB 0
                                 ;      32 #endif /* !_ADDED_C_LIB */
                                 ;      33 
                                 ;      34 #ifndef __STDC_WANT_SAFER_LIB__
                                 ;      35 #define __STDC_WANT_SAFER_LIB__ 0
                                 ;      36 #endif /* !__STDC_WANT_SAFER_LIB__ */
                                 ;      37 
                                 ;      38 #ifndef _ALT_NS
                                 ;      39 #define _ALT_NS 0
                                 ;      40 #endif /* !_ALT_NS */
                                 ;      41 
                                 ;      42 #ifdef __cplusplus
                                 ;      43 
                                 ;      44 #ifndef _C99
                                 ;      45 #define _C99
                                 ;      46 #endif /* !_C99*/ 
                                 ;      47 
                                 ;      48 #endif /* __cplusplus */
                                 ;      49 
                                 ;      50 #ifdef __embedded_cplusplus
                                 ;      51 
                                 ;      52 #ifndef _NO_NS
                                 ;      53 #define _NO_NS
                                 ;      54 #endif /* !_NO_NS */
                                 ;      55 
                                 ;      56 #ifndef _ECPP
                                 ;      57 #define _ECPP
                                 ;      58 #endif /* !_ECPP */
                                 ;      59 
                                 ;      60 #endif /* __embedded_cplusplus */
                                 ;      61 
                                 ;      62 #ifdef _REENTRANT
                                 ;      63 
                                 ;      64 #ifndef _R_REENT
                                 ;      65 #define _R_REENT
                                 ;      66 #endif /* !_R_REENT */
                                 ;      67 
                                 ;      68 #endif /* _REENTRANT */
                                 ;      69 
                                 ;      70 #endif /* __RX */
                                 ;      71 
                                 ;      72 #endif /* _MACRO */
                                 ;      11 
                                 ;      12 #ifndef _YVALS
                                 ;      13 #include <sys/yvals.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 /* yvals.h values header for conforming compilers on various systems */
                                 ;       7 #include <macro.h>
                                 ;       8 
                                 ;       9 #ifndef _YVALS
                                 ;      10 #define _YVALS
                                 ;      11 
                                 ;      12 #define _CPPLIB_VER	503
                                 ;      13 
                                 ;      14 /* You can predefine (on the compile command line, for example):
                                 ;      15 
                                 ;      16 _ADDED_C_LIB=0 -- to omit declarations for C extensions
                                 ;      17 _ALT_NS=1 -- to use namespace _Dinkum_std for C++
                                 ;      18 _ALT_NS=2 -- to use namespace _Dinkum_std for C++ and C
                                 ;      19 _ALT_NS=3 -- to use namespace _Dinkum_std for C++ and _Dinkum_std_c for C
                                 ;      20 _C_AS_CPP -- to compile C library as C++
                                 ;      21 _C_IN_NS -- to define C names in std/_Dinkum_std instead of global namespace
                                 ;      22 _C99 -- to turn ON C99 library support
                                 ;      23 _ABRCPP -- to turn ON Abridged C++ dialect (implies _ECPP)
                                 ;      24 _ECPP -- to turn ON Embedded C++ dialect
                                 ;      25 _HAS_FIXED_POINT=0 -- to turn OFF fixed-point extensions (if present)
                                 ;      26 _HAS_IMMUTABLE_SETS=1 -- to permit alterable set elements
                                 ;      27 _HAS_STRICT_CONFORMANCE=1 -- to to disable nonconforming extensions
                                 ;      28 _HAS_TRADITIONAL_IOSTREAMS=0 -- to omit old iostreams functions
                                 ;      29 _HAS_TRADITIONAL_ITERATORS=1 -- for vector/string pointer iterators
                                 ;      30 _HAS_TRADITIONAL_POS_TYPE=1 -- for streampos same as streamoff
                                 ;      31 _HAS_TRADITIONAL_STL=0 -- to turn OFF old STL functions
                                 ;      32 _HAS_TR1=0 -- to turn OFF TR1 extensions (if present)
                                 ;      33 _NO_EX -- to turn OFF use of try/throw
                                 ;      34 _NO_MT -- to turn OFF thread synchronization
                                 ;      35 _NO_NS -- to turn OFF use of namespace declarations
                                 ;      36 _STL_DB (or _STLP_DEBUG) -- to turn ON iterator/range debugging
                                 ;      37 _USE_EXISTING_SYSTEM_NAMES=0 -- to disable mappings (_Open to open)
                                 ;      38 __NO_LONG_LONG -- to define _Longlong as long, not long long
                                 ;      39 
                                 ;      40 You can change (in this header AND ALL ITS COPIES):
                                 ;      41 
                                 ;      42 _COMPILER_TLS -- from 0 to 1 if _TLS_QUAL is not nil
                                 ;      43 _EXFAIL -- from 1 to any nonzero value for EXIT_FAILURE
                                 ;      44 _FILE_OP_LOCKS -- from 0 to 1 for file atomic locks
                                 ;      45 _GLOBAL_LOCALE -- from 0 to 1 for shared locales instead of per-thread
                                 ;      46 _IOSTREAM_OP_LOCKS -- from 0 to 1 for iostream atomic locks
                                 ;      47 _TLS_QUAL -- from nil to compiler TLS qualifier, such as __declspec(thread)
                                 ;      48 __STDC_WANT_LIB_EXT1__ -- from 1 to 0 to disable C library extension 1
                                 ;      49 
                                 ;      50 Include directories needed to compile with Dinkum C:
                                 ;      51 
                                 ;      52 C -- include/c
                                 ;      53 C99 -- include/c (define _C99)
                                 ;      54 Embedded C++ -- include/c include/embedded (define _ECPP)
                                 ;      55 Abridged C++ -- include/c include/embedded include (define _ABRCPP)
                                 ;      56 Standard C++ -- include/c include
                                 ;      57 Standard C++ with export -- include/c include/export include
                                 ;      58 	(--export --template_dir=lib/export)
                                 ;      59 
                                 ;      60 Include directories needed to compile with native C:
                                 ;      61 
                                 ;      62 C -- none
                                 ;      63 C99 -- N/A
                                 ;      64 Embedded C++ -- include/embedded (define _ECPP)
                                 ;      65 Abridged C++ -- include/embedded include (define _ABRCPP)
                                 ;      66 Standard C++ -- include
                                 ;      67 Standard C++ with export -- include/export include
                                 ;      68 	(--export --template_dir=lib/export)
                                 ;      69  */
                                 ;      70 
                                 ;      71  #ifndef __STDC_HOSTED__
                                 ;      72   #define __STDC_HOSTED__	1
                                 ;      73  #endif /* __STDC_HOSTED__ */
                                 ;      74 
                                 ;      75  #ifndef __STDC_IEC_559__
                                 ;      76   #define __STDC_IEC_559__	1
                                 ;      77  #endif /* __STDC_IEC_559__ */
                                 ;      78 
                                 ;      79  #ifndef __STDC_IEC_559_COMPLEX__
                                 ;      80   #define __STDC_IEC_559_COMPLEX__	1
                                 ;      81  #endif /* __STDC_IEC_559_COMPLEX__ */
                                 ;      82 
                                 ;      83  #ifndef __STDC_ISO_10646__
                                 ;      84   #define __STDC_ISO_10646__	200009L	/* match glibc */
                                 ;      85  #endif /* __STDC_ISO_10646__ */
                                 ;      86 
                                 ;      87  #ifndef __STDC_LIB_EXT1__
                                 ;      88   #define __STDC_LIB_EXT1__	200509L
                                 ;      89  #endif /* __STDC_LIB_EXT1__ */
                                 ;      90 
                                 ;      91  #ifndef __STDC_WANT_LIB_EXT1__
                                 ;      92   #define __STDC_WANT_LIB_EXT1__	1
                                 ;      93  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;      94 
                                 ;      95 		/* DETERMINE MACHINE TYPE */
                                 ;      96 
                                 ;      98  #if defined(i386) || defined(__i386) \
                                 ;      98 	|| defined(__i386__) || defined(_M_IX86)	/* Pentium */
                                 ;      99   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     100 
                                 ;     101   #if defined(_M_IX86)
                                 ;     102    #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     103    #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     104    #define _LOFF	4	/* 64 long double bits */
                                 ;     105 
                                 ;     106   #else /* unknown compilation environment, guess 80-bit long double */
                                 ;     107    #define _DLONG	1	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     108    #define _LBIAS	0x3ffe	/* 80/128 long double bits */
                                 ;     109    #define _LOFF	15	/* 80/128 long double bits */
                                 ;     110   #endif /* defined(_M_IX86) */
                                 ;     111 
                                 ;     112   #define _FPP_TYPE	_FPP_X86	/* Pentium FPP */
                                 ;     113 
                                 ;     114  #elif defined(sparc) || defined(__sparc)	/* SPARC */
                                 ;     115 
                                 ;     116   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     117   #define _DLONG	2	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     118   #define _LBIAS	0x3ffe	/* 80/128 long double bits */
                                 ;     119   #define _LOFF		15	/* 80/128 long double bits */
                                 ;     120   #define _FPP_TYPE	_FPP_SPARC	/* SPARC FPP */
                                 ;     121 
                                 ;     123  #elif defined(_MIPS) || defined(_MIPS_) \
                                 ;     123 	|| defined(__mips) || defined(_M_MRX000)		/* MIPS */
                                 ;     124 
                                 ;     125   #if defined(__LITTLE_ENDIAN__) || defined(__MIPSEL)
                                 ;     126    #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     127 
                                 ;     128   #else /* __LITTLE_ENDIAN__ etc. */
                                 ;     129    #define _D0		0
                                 ;     130   #endif /* __LITTLE_ENDIAN__ etc. */
                                 ;     131 
                                 ;     132   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     133   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     134   #define _LOFF		4	/* 64 long double bits */
                                 ;     135   #define _FPP_TYPE	_FPP_MIPS	/* MIPS FPP */
                                 ;     136 
                                 ;     137  #if !defined(_MACH_PDT)
                                 ;     138   #define _MACH_PDT	long
                                 ;     139   #define _MACH_SZT	unsigned long
                                 ;     140  #endif /* defined(_MACH_PDT) */
                                 ;     141 
                                 ;     142  #elif defined(__s390__)	/* IBM S/390 */
                                 ;     143   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     144   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     145   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     146   #define _LOFF		4	/* 64 long double bits */
                                 ;     147   #define _FPP_TYPE	_FPP_S390	/* S/390 FPP */
                                 ;     148 
                                 ;     149   #define _MACH_PDT	long
                                 ;     150   #define _MACH_SZT	unsigned long
                                 ;     151 
                                 ;     152  #elif defined(__ppc__) || defined(_POWER) || defined(_M_PPC)	/* PowerPC */
                                 ;     153   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     154   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     155   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     156   #define _LOFF		4	/* 64 long double bits */
                                 ;     157   #define _FPP_TYPE	_FPP_PPC	/* PowerPC FPP */
                                 ;     158 
                                 ;     159  #elif defined(__hppa)	/* HP PA-RISC */
                                 ;     160   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     161   #define _DLONG	2	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     162   #define _LBIAS	0x3ffe	/* 80/128 long double bits */
                                 ;     163   #define _LOFF		15	/* 80/128 long double bits */
                                 ;     164   #define _FPP_TYPE	_FPP_HPPA	/* Hewlett-Packard PA-RISC FPP */
                                 ;     165 
                                 ;     166  #elif defined(_M_ALPHA)	/* Alpha */
                                 ;     167   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     168   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     169   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     170   #define _LOFF		4	/* 64 long double bits */
                                 ;     171   #define _FPP_TYPE	_FPP_ALPHA	/* Compaq Alpha */
                                 ;     172 
                                 ;     173  #elif defined(_ARM_) || defined(__arm)	/* ARM */
                                 ;     174 
                                 ;     175   #if defined(__BIG_ENDIAN__) || defined(__ARMEB__)
                                 ;     176    #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     177 
                                 ;     178   #else /* __BIG_ENDIAN__ etc. */
                                 ;     179    #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     180   #endif /* __BIG_ENDIAN__ etc. */
                                 ;     181 
                                 ;     182   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     183   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     184   #define _LOFF		4	/* 64 long double bits */
                                 ;     185   #define _FPP_TYPE	_FPP_ARM	/* ARM ARM FPP */
                                 ;     186 
                                 ;     187  #elif defined(_M68K)	/* Motorola 68K */
                                 ;     188   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     189   #define _DLONG	1	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     190   #define _LBIAS	0x3ffe	/* 80/128 long double bits */
                                 ;     191   #define _LOFF		15	/* 80/128 long double bits */
                                 ;     192   #define _FPP_TYPE	_FPP_M68K	/* Motorola 68xxx FPP */
                                 ;     193 
                                 ;     194  #elif defined(_SH4_) || defined(__sh) || defined(__sh__)	/* SH4 */
                                 ;     195 
                                 ;     196   #if defined(__BIG_ENDIAN__) || defined(_SH4)
                                 ;     197    #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     198 
                                 ;     199   #else /* __BIG_ENDIAN__ etc. */
                                 ;     200    #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     201   #endif /* __BIG_ENDIAN__ etc. */
                                 ;     202 
                                 ;     203   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     204   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     205   #define _LOFF		4	/* 64 long double bits */
                                 ;     206   #define _FPP_TYPE	_FPP_SH4	/* Renesas SH4 FPP */
                                 ;     207 
                                 ;     208  #elif defined(_M_IA64)	/* IA64 */
                                 ;     209   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     210   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     211   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     212   #define _LOFF		4	/* 64 long double bits */
                                 ;     213   #define _FPP_TYPE	_FPP_IA64	/* Intel IA64 FPP */
                                 ;     214 
                                 ;     215  #elif defined(__x86_64) /* 64-Bit GCC */
                                 ;     216   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     217   #define _DLONG	1	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     218   #define _LBIAS	0x3ffe	/* 80/128 long double bits */	
                                 ;     219   #define _LOFF		15	/* 80/128 long double bits */
                                 ;     220   #define _FPP_TYPE	_FPP_X86	/* Pentium FPP */
                                 ;     221 
                                 ;     222  #elif defined(_M_X64) /* 64-Bit x86 VC++ */
                                 ;     223   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     224   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     225   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     226   #define _LOFF		4	/* 64 long double bits */
                                 ;     227   #define _FPP_TYPE	_FPP_WIN	/* Pentium FPP under Windows */
                                 ;     228 
                                 ;     229  #else /* unknown compilation environment, guess big-endian */
                                 ;     230    #if defined(__RX)
                                 ;     231      #define _MACH_PDT	long
                                 ;     232      #define _MACH_SZT	unsigned long
                                 ;     233     #if defined(__LIT)
                                 ;     234      #define _D0		3	/* little endian floating-point */
                                 ;     235     #else
                                 ;     236      #define _D0		0	/* big endian floating-point */
                                 ;     237     #endif
                                 ;     238 	#define _FPP_TYPE	_FPP_RX
                                 ;     239    #elif defined(_R_SHC)
                                 ;     240      #define _MACH_PDT	int
                                 ;     241      #define _MACH_SZT	unsigned long
                                 ;     242     #if defined(_LIT)
                                 ;     243      #define _D0		3	/* little endian */
                                 ;     244     #else
                                 ;     245      #define _D0		0	/* big endian */
                                 ;     246     #endif
                                 ;     247     #if defined(_SH2E) || defined(_SH2AFPU) || defined(_SH4) || defined(_SH4A)
                                 ;     248      #define _FPP_TYPE	_FPP_SH4
                                 ;     249     #endif
                                 ;     250    #elif defined(__H8__)
                                 ;     251     #if __DATA_ADDRESS_SIZE__ == 4
                                 ;     252      #define _MACH_PDT	long
                                 ;     253      #define _MACH_SZT	unsigned long
                                 ;     254     #else /* __DATA_ADDRESS_SIZE__ == 4 */
                                 ;     255      #define _MACH_PDT	int
                                 ;     256      #define _MACH_SZT	unsigned int
                                 ;     257     #endif /* __DATA_ADDRESS_SIZE__ == 4 */
                                 ;     258      #define _D0		0	/* big endian */
                                 ;     259    #elif defined(_R_M16C)
                                 ;     260     #if defined(__PTRDIFFT_16__)
                                 ;     261      #define _MACH_PDT	signed int
                                 ;     262     #else
                                 ;     263      #define _MACH_PDT	signed long
                                 ;     264     #endif
                                 ;     265     #if defined(__SIZET_16__)
                                 ;     266      #define _MACH_SZT	unsigned int
                                 ;     267     #else
                                 ;     268      #define _MACH_SZT	unsigned long
                                 ;     269     #endif
                                 ;     270      #define _D0	3	/* little endian */
                                 ;     271    #else /* __RX */
                                 ;     272     #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     273    #endif /* __RX */
                                 ;     274   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     275 
                                 ;     276   #if defined(__RX) && defined(__DBL4)
                                 ;     277     #define _LBIAS	0x7e	/* 32 long double bits */
                                 ;     278     #define _LOFF	    7	/* 32 long double bits */
                                 ;     279   #else /* defined(__RX) && defined(__DBL4) */
                                 ;     280     #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     281     #define _LOFF		4	/* 64 long double bits */
                                 ;     282   #endif /* defined(__RX) && defined(__DBL4) */
                                 ;     283 
                                 ;     284  #endif /* system detector */
                                 ;     285 
                                 ;     286 		/* DETERMINE _Ptrdifft AND _Sizet FROM MACHINE TYPE */
                                 ;     287 
                                 ;     288  #if defined(_MACH_I32)
                                 ;     289 typedef _MACH_I32 _Int32t;
                                 ;     290 typedef unsigned _MACH_I32 _Uint32t;
                                 ;     291 
                                 ;     292  #else /* defined(_MACH_I32) */
                                 ;     293 typedef long _Int32t;
                                 ;     294 typedef unsigned long _Uint32t;
                                 ;     295  #endif /* defined(_MACH_I32) */
                                 ;     296 
                                 ;     297  #if defined(_LP64) || defined(__x86_64)
                                 ;     298 typedef long _Ptrdifft;
                                 ;     299 
                                 ;     300  #elif defined(_M_X64)
                                 ;     301 typedef __int64 _Ptrdifft;
                                 ;     302 
                                 ;     303  #elif defined(_MACH_PDT)
                                 ;     304 typedef _MACH_PDT _Ptrdifft;
                                 ;     305 
                                 ;     306  #else /* defined(_MACH_PDT) */
                                 ;     307 typedef int _Ptrdifft;
                                 ;     308  #endif /* defined(_LP64) */
                                 ;     309 
                                 ;     310  #if defined(_LP64) || defined(__x86_64)
                                 ;     311 typedef unsigned long _Sizet;
                                 ;     312 
                                 ;     313  #elif defined(_MACH_SZT)
                                 ;     314 typedef _MACH_SZT _Sizet;
                                 ;     315 
                                 ;     316  #else /* defined(_MACH_SZT) */
                                 ;     317 typedef unsigned int _Sizet;
                                 ;     318  #endif /* defined(_LP64) */
                                 ;     319 
                                 ;     320  #if defined(__x86_64)
                                 ;     321   #define _LLONG	1	/* 64-bit longs */
                                 ;     322   #define _RSIZE_MAX	((unsigned int)(-1) >> 1)
                                 ;     323 
                                 ;     324  #else /* defined(__x86_64) */
                                 ;     325   #define _LLONG	0	/* 32-bit longs */
                                 ;     326   #define _RSIZE_MAX	((_Sizet)(-1) >> 1)	/* or sizeof largest object */
                                 ;     327  #endif /* defined(__x86_64) */
                                 ;     328 
                                 ;     329  #if defined(__linux) || defined(__linux__)
                                 ;     330   #define _LINUX_C_LIB	1	/* Linux-specific conventions */
                                 ;     331  #endif /* defined(__linux) etc. */
                                 ;     332 
                                 ;     333   #define _HAS_POSIX_C_LIB	1	/* use common Unix/Linux conventions */
                                 ;     334 
                                 ;     335  #if !defined(_HAS_C9X) && defined(_C99)
                                 ;     336   #define _HAS_C9X	1
                                 ;     337  #else
                                 ;     338   #define _HAS_C9X	0
                                 ;     339  #endif /* !defined(_HAS_C9X) etc. */
                                 ;     340 
                                 ;     341  #if !defined(_ECPP) && defined(_ABRCPP)
                                 ;     342   #define _ECPP
                                 ;     343  #endif /* !defined(_ECPP) && defined(_ABRCPP) */
                                 ;     344 
                                 ;     345  #if _HAS_C9X && __EDG__ && !defined(__cplusplus)
                                 ;     346   #define _HAS_C9X_IMAGINARY_TYPE	1
                                 ;     347 
                                 ;     348  #else /* _HAS_C9X etc. */
                                 ;     349   #define _HAS_C9X_IMAGINARY_TYPE	0
                                 ;     350  #endif /* _HAS_C9X etc. */
                                 ;     351 
                                 ;     352  #if !defined(_IS_EMBEDDED) && defined(_ECPP)
                                 ;     353   #define _IS_EMBEDDED	1	/* 1 for Embedded C++ */
                                 ;     354  #else
                                 ;     355   #define _IS_EMBEDDED	0	/* 0 for Embedded C++ */
                                 ;     356  #endif /* _IS_EMBEDDED etc. */
                                 ;     357 
                                 ;     358  #ifndef __STDC_VERSION__
                                 ;     359 
                                 ;     360   #if _HAS_C9X
                                 ;     361    #define __STDC_VERSION__	199901L
                                 ;     362 
                                 ;     363   #else /* _HAS_C9X */
                                 ;     364     #define __STDC_VERSION__	199409L
                                 ;     365   #endif /* _HAS_C9X */
                                 ;     366 
                                 ;     367  #endif /* __STDC_VERSION__ */
                                 ;     368 
                                 ;     369 		/* EXCEPTION CONTROL */
                                 ;     370  #ifndef _HAS_EXCEPTIONS
                                 ;     371   #ifndef _NO_EX	/* don't simplify */
                                 ;     372    #define _HAS_EXCEPTIONS	1	/* 1 for try/throw logic */
                                 ;     373 
                                 ;     374   #else	/* _NO_EX */
                                 ;     375    #define _HAS_EXCEPTIONS	0
                                 ;     376   #endif /* _NO_EX */
                                 ;     377 
                                 ;     378  #endif /* _HAS_EXCEPTIONS */
                                 ;     379 
                                 ;     380 		/* NAMING PROPERTIES */
                                 ;     381 /* #define _STD_LINKAGE	define C names as extern "C++" */
                                 ;     382 /* #define _STD_USING	define C names in one of three namespaces */
                                 ;     383 
                                 ;     384  #ifndef _HAS_NAMESPACE
                                 ;     385   #ifndef _NO_NS	/* don't simplify */
                                 ;     386    #define _HAS_NAMESPACE	1	/* 1 for C++ names in std */
                                 ;     387 
                                 ;     388   #else	/* _NO_NS */
                                 ;     389    #define _HAS_NAMESPACE	0
                                 ;     390   #endif /* _NO_NS */
                                 ;     391 
                                 ;     392  #endif /* _HAS_NAMESPACE */
                                 ;     393 
                                 ;     395  #if !defined(_STD_USING) && defined(__cplusplus) \
                                 ;     395 	&& (defined(_C_IN_NS) || 1 < _ALT_NS)
                                 ;     396   #define _STD_USING	/* *.h headers export C names to global */
                                 ;     397 
                                 ;     398  #elif defined(_STD_USING) && !defined(__cplusplus)
                                 ;     399   #undef _STD_USING	/* define only for C++ */
                                 ;     400  #endif /* !defined(_STD_USING) */
                                 ;     401 
                                 ;     403  #if !defined(_HAS_STRICT_LINKAGE) \
                                 ;     403 	&& (__EDG__)
                                 ;     404 #ifdef __RX
                                 ;     405   #define _HAS_STRICT_LINKAGE	0	/* extern "C" in function type */
                                 ;     406 #else /* __RX */
                                 ;     407   #define _HAS_STRICT_LINKAGE	1	/* extern "C" in function type */
                                 ;     408 #endif /* __RX */
                                 ;     409  #endif /* !defined(_HAS_STRICT_LINKAGE) */
                                 ;     410 
                                 ;     411 		/* THREAD AND LOCALE CONTROL */
                                 ;     412  #ifndef _MULTI_THREAD
                                 ;     413 
                                 ;     414    #ifndef _NO_MT
                                 ;     415     #define _MULTI_THREAD	1	/* 0 for no thread locks */
                                 ;     416 
                                 ;     417    #else
                                 ;     418     #define _MULTI_THREAD	0
                                 ;     419    #endif	/* _NO_MT */
                                 ;     420 
                                 ;     421  #endif /* _MULTI_THREAD */
                                 ;     422 
                                 ;     423 #define _GLOBAL_LOCALE	0	/* 0 for per-thread locales, 1 for shared */
                                 ;     424 #define _FILE_OP_LOCKS	0	/* 0 for no FILE locks, 1 for atomic */
                                 ;     425 #define _IOSTREAM_OP_LOCKS	0	/* 0 for no iostream locks, 1 for atomic */
                                 ;     426 
                                 ;     427 		/* THREAD-LOCAL STORAGE */
                                 ;     428 #define _COMPILER_TLS	0	/* 1 if compiler supports TLS directly */
                                 ;     429 #define _TLS_QUAL	/* TLS qualifier, such as __declspec(thread), if any */
                                 ;     430 
                                 ;     431  #if !defined(_ADDED_C_LIB)
                                 ;     432   #define _ADDED_C_LIB	1	/* include declarations for C extensions */
                                 ;     433  #endif /* !defined(_ADDED_C_LIB) */
                                 ;     434 
                                 ;     435  #if !defined(_HAS_FIXED_POINT)
                                 ;     436   #define _HAS_FIXED_POINT	1	/* enable fixed-point extensions */
                                 ;     437  #endif /* !defined(_HAS_FIXED_POINT) */
                                 ;     438 
                                 ;     439  #if !defined(_HAS_IMMUTABLE_SETS)
                                 ;     440   #define _HAS_IMMUTABLE_SETS	1	/* disallow alterable set elements */
                                 ;     441  #endif /* !defined(_HAS_IMMUTABLE_SETS) */
                                 ;     442 
                                 ;     444  #if !defined(_HAS_ITERATOR_DEBUGGING) \
                                 ;     444 	&& (defined(_STL_DB) || defined(_STLP_DEBUG))
                                 ;     445   #define _HAS_ITERATOR_DEBUGGING	1	/* enable range checks, etc. */
                                 ;     446  #endif /* define _HAS_ITERATOR_DEBUGGING */
                                 ;     447 
                                 ;     448  #if !defined(_HAS_STRICT_CONFORMANCE)
                                 ;     449   #define _HAS_STRICT_CONFORMANCE	0	/* enable nonconforming extensions */
                                 ;     450  #endif /* !defined(_HAS_STRICT_CONFORMANCE) */
                                 ;     451 
                                 ;     452  #if !defined(_HAS_TRADITIONAL_IOSTREAMS)
                                 ;     453   #define _HAS_TRADITIONAL_IOSTREAMS	1	/* enable old iostreams stuff */
                                 ;     454  #endif /* !defined(_HAS_TRADITIONAL_IOSTREAMS) */
                                 ;     455 
                                 ;     456  #if !defined(_HAS_TRADITIONAL_ITERATORS)
                                 ;     457   #define _HAS_TRADITIONAL_ITERATORS	0	/* don't use pointer iterators */
                                 ;     458  #endif /* !defined(_HAS_TRADITIONAL_ITERATORS) */
                                 ;     459 
                                 ;     460  #if !defined(_HAS_TRADITIONAL_POS_TYPE)
                                 ;     461   #define _HAS_TRADITIONAL_POS_TYPE	0	/* make streampos same as streamoff */
                                 ;     462  #endif /* !defined(_HAS_TRADITIONAL_POS_TYPE) */
                                 ;     463 
                                 ;     464  #if !defined(_HAS_TRADITIONAL_STL)
                                 ;     465   #define _HAS_TRADITIONAL_STL	1	/* enable older STL extensions */
                                 ;     466  #endif /* !defined(_HAS_TRADITIONAL_STL) */
                                 ;     467 
                                 ;     468  #if !defined(_HAS_TR1)
                                 ;     469   #define _HAS_TR1	(!_IS_EMBEDDED)	/* enable TR1 extensions */
                                 ;     470  #endif /* !defined(_HAS_TR1) */
                                 ;     471 
                                 ;     472 #define _HAS_TR1_DECLARATIONS	_HAS_TR1
                                 ;     473 
                                 ;     474  #if !defined(_USE_EXISTING_SYSTEM_NAMES)
                                 ;     475   #define _USE_EXISTING_SYSTEM_NAMES	1	/* _Open => open, etc.  */
                                 ;     476  #endif /* !defined(_USE_EXISTING_SYSTEM_NAMES) */
                                 ;     477 
                                 ;     478  #if __STDC_WANT_SAFER_LIB__
                                 ;     479   #define __STDC_SAFER_LIB__	200510L
                                 ;     480  #endif /* __STDC_WANT_SAFER_LIB__ */
                                 ;     481 
                                 ;     482 
                                 ;     483 		/* NAMESPACE CONTROL */
                                 ;     484 
                                 ;     485  #if defined(__cplusplus)
                                 ;     486 
                                 ;     487  #if _HAS_NAMESPACE
                                 ;     488 namespace std {}
                                 ;     489 
                                 ;     490  #if defined(_C_AS_CPP)
                                 ;     491   #define _NO_CPP_INLINES	/* just for compiling C library as C++ */
                                 ;     492  #endif /* _C_AS_CPP */
                                 ;     493 
                                 ;     494  #if 0 < _ALT_NS
                                 ;     495 
                                 ;     496   #if defined(_C_AS_CPP)	/* define library in _Dinkum_std */
                                 ;     497    #define _STD_BEGIN	namespace _Dinkum_std {_C_LIB_DECL
                                 ;     498    #define _STD_END		_END_C_LIB_DECL }
                                 ;     499 
                                 ;     500   #else /* _C_AS_CPP */
                                 ;     501    #define _STD_BEGIN	namespace _Dinkum_std {
                                 ;     502    #define _STD_END		}
                                 ;     503   #endif /* _C_AS_CPP */
                                 ;     504 
                                 ;     505   #if _ALT_NS == 1	/* define C library in global namespace */
                                 ;     506     #define _C_STD_BEGIN
                                 ;     507     #define _C_STD_END
                                 ;     508     #define _CSTD		::
                                 ;     509     #define _STD			::_Dinkum_std::
                                 ;     510 
                                 ;     511   #elif _ALT_NS == 2	/* define both C and C++ in namespace _Dinkum_std */
                                 ;     512     #define _C_STD_BEGIN	namespace _Dinkum_std {
                                 ;     513     #define _C_STD_END	}
                                 ;     514     #define _CSTD		::_Dinkum_std::
                                 ;     515     #define _STD			::_Dinkum_std::
                                 ;     516 
                                 ;     517   #else	/* define C in namespace _Dinkum_std_c and C++ in _Dinkum_std */
                                 ;     518     #define _C_STD_BEGIN	namespace _Dinkum_std_c {
                                 ;     519     #define _C_STD_END	}
                                 ;     520     #define _CSTD		::_Dinkum_std_c::
                                 ;     521     #define _STD			::_Dinkum_std::
                                 ;     522   #endif /* _ALT_NS */
                                 ;     523 
                                 ;     524 namespace _Dinkum_std {}
                                 ;     525 namespace _Dinkum_std_c {}
                                 ;     526 namespace std {
                                 ;     527 	using namespace _Dinkum_std;
                                 ;     528 	using namespace _Dinkum_std_c;
                                 ;     529 	}
                                 ;     530 
                                 ;     531  #elif defined(_STD_USING)
                                 ;     532 
                                 ;     533   #if defined(_C_AS_CPP)	/* define library in std */
                                 ;     534    #define _STD_BEGIN	namespace std {_C_LIB_DECL
                                 ;     535    #define _STD_END		_END_C_LIB_DECL }
                                 ;     536 
                                 ;     537   #else /* _C_AS_CPP */
                                 ;     538    #define _STD_BEGIN	namespace std {
                                 ;     539    #define _STD_END		}
                                 ;     540   #endif /* _C_AS_CPP */
                                 ;     541 
                                 ;     542    #define _C_STD_BEGIN	namespace std {
                                 ;     543    #define _C_STD_END	}
                                 ;     544    #define _CSTD		::std::
                                 ;     545    #define _STD			::std::
                                 ;     546 
                                 ;     547  #else /* _ALT_NS == 0 && !defined(_STD_USING) */
                                 ;     548 
                                 ;     549   #if defined(_C_AS_CPP)	/* define C++ library in std, C in global */
                                 ;     550    #define _STD_BEGIN	_C_LIB_DECL
                                 ;     551    #define _STD_END		_END_C_LIB_DECL
                                 ;     552 
                                 ;     553   #else /* _C_AS_CPP */
                                 ;     554    #define _STD_BEGIN	namespace std {
                                 ;     555    #define _STD_END		}
                                 ;     556   #endif /* _C_AS_CPP */
                                 ;     557 
                                 ;     558    #define _C_STD_BEGIN
                                 ;     559    #define _C_STD_END
                                 ;     560    #define _CSTD		::
                                 ;     561    #define _STD			::std::
                                 ;     562  #endif /* _ALT_NS etc */
                                 ;     563 
                                 ;     564   #define _X_STD_BEGIN	namespace std {
                                 ;     565   #define _X_STD_END	}
                                 ;     566   #define _XSTD			::std::
                                 ;     567 
                                 ;     568   #if defined(_STD_USING) && _ALT_NS < 3
                                 ;     569    #undef _GLOBAL_USING		/* C names in std namespace */
                                 ;     570 
                                 ;     571   #else
                                 ;     572    #define _GLOBAL_USING	1	/* c* headers import C names to std */
                                 ;     573   #endif /* defined(_STD_USING) */
                                 ;     574 
                                 ;     575   #if defined(_STD_LINKAGE)
                                 ;     576    #define _C_LIB_DECL		extern "C++" {	/* C has extern "C++" linkage */
                                 ;     577 
                                 ;     578   #else /* defined(_STD_LINKAGE) */
                                 ;     579    #define _C_LIB_DECL		extern "C" {	/* C has extern "C" linkage */
                                 ;     580   #endif /* defined(_STD_LINKAGE) */
                                 ;     581 
                                 ;     582   #define _END_C_LIB_DECL	}
                                 ;     583   #define _EXTERN_C			extern "C" {
                                 ;     584   #define _END_EXTERN_C		}
                                 ;     585 
                                 ;     586  #else /* _HAS_NAMESPACE */
                                 ;     587   #define _STD_BEGIN
                                 ;     588   #define _STD_END
                                 ;     589   #define _STD	::
                                 ;     590 
                                 ;     591   #define _X_STD_BEGIN
                                 ;     592   #define _X_STD_END
                                 ;     593   #define _XSTD	::
                                 ;     594 
                                 ;     595   #define _C_STD_BEGIN
                                 ;     596   #define _C_STD_END
                                 ;     597   #define _CSTD	::
                                 ;     598 
                                 ;     599   #define _C_LIB_DECL		extern "C" {
                                 ;     600   #define _END_C_LIB_DECL	}
                                 ;     601   #define _EXTERN_C			extern "C" {
                                 ;     602   #define _END_EXTERN_C		}
                                 ;     603  #endif /* _HAS_NAMESPACE */
                                 ;     604 
                                 ;     605  #else /* __cplusplus */
                                 ;     606   #define _STD_BEGIN
                                 ;     607   #define _STD_END
                                 ;     608   #define _STD
                                 ;     609 
                                 ;     610   #define _X_STD_BEGIN
                                 ;     611   #define _X_STD_END
                                 ;     612   #define _XSTD
                                 ;     613 
                                 ;     614   #define _C_STD_BEGIN
                                 ;     615   #define _C_STD_END
                                 ;     616   #define _CSTD
                                 ;     617 
                                 ;     618   #define _C_LIB_DECL
                                 ;     619   #define _END_C_LIB_DECL
                                 ;     620   #define _EXTERN_C
                                 ;     621   #define _END_EXTERN_C
                                 ;     622  #endif /* __cplusplus */
                                 ;     623 
                                 ;     624  #if 199901L <= __STDC_VERSION__
                                 ;     625 
                                 ;     626  #if defined(__cplusplus)
                                 ;     627   #define _Restrict
                                 ;     628 
                                 ;     629  #else /* defined(__cplusplus) */
                                 ;     630   #define _Restrict restrict
                                 ;     631  #endif /* defined(__cplusplus) */
                                 ;     632 
                                 ;     633  #else /* 199901L <= __STDC_VERSION__ */
                                 ;     634  #define _Restrict
                                 ;     635  #endif /* 199901L <= __STDC_VERSION__ */
                                 ;     636 
                                 ;     637  #ifdef __cplusplus
                                 ;     638 _STD_BEGIN
                                 ;     639 typedef bool _Bool;
                                 ;     640 _STD_END
                                 ;     641  #endif /* __cplusplus */
                                 ;     642 
                                 ;     643 #include <stdarg.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /*****************************************************************/
                                 ;       8 /* SPEC ;                                                        */
                                 ;       9 /*   NAME = stdarg :                                             */
                                 ;      10 /*   FUNC = this module do the following finctions ;             */
                                 ;      11 /*                                                               */
                                 ;      12 /*         (1) initialize parameter pointer                      */
                                 ;      13 /*         (2) set parameter pointer to next parameter           */
                                 ;      14 /*                                                               */
                                 ;      15 /*                                                               */
                                 ;      16 /*   END ;                                                       */
                                 ;      17 /*****************************************************************/
                                 ;      18 
                                 ;      19 #ifndef _STDARG_H
                                 ;      20 #define _STDARG_H
                                 ;      21 #include <macro.h>
                                 ;      22 
                                 ;      23 #if defined(__H8__)
                                 ;      24 
                                 ;      25 typedef char *va_list ;
                                 ;      26 
                                 ;      27 #define va_start(AP,LASTARG) ((void)(AP = ((va_list)&LASTARG + ((sizeof(LASTARG)+1)&~1))))
                                 ;      28 
                                 ;      30 #define va_arg(AP,TYPE) \
                                 ;      30   (AP += ((sizeof(TYPE)+1)&~1), *((TYPE *)(AP - ((sizeof(TYPE)+1)&~1))))
                                 ;      31 
                                 ;      32 #define va_end(ap)
                                 ;      33 
                                 ;      34 #endif /* __H8__ */
                                 ;      35 
                                 ;      36 #if defined(_R_SHC) || defined(__RX)
                                 ;      37 
                                 ;      38 typedef char *va_list ;
                                 ;      39 
                                 ;      40 #if defined(__RX)
                                 ;      41 #define va_start(AP,LASTARG) ((void)(AP = (va_list)((((unsigned long)(&LASTARG+1))+3)&~3)))
                                 ;      42 #else /* __RX */
                                 ;      43 #define va_start(AP,LASTARG) ((void)(AP = ((va_list)&LASTARG + ((sizeof(LASTARG)+3)&~3))))
                                 ;      44 #endif /* __RX */
                                 ;      45 
                                 ;      47 #define va_arg(AP,TYPE) \
                                 ;      47   (AP += ((sizeof(TYPE)+3)&~3), *((TYPE *)(AP - ((sizeof(TYPE)+3)&~3))))
                                 ;      48 
                                 ;      49 #define va_end(ap)
                                 ;      50 
                                 ;      51 #endif /* _R_SHC || __RX */
                                 ;      52 
                                 ;      53 #if defined(_R_M16C)
                                 ;      54 
                                 ;      55 #ifndef _VA_LIST_DEF
                                 ;      56 typedef char *va_list;
                                 ;      57 #define _VA_LIST_DEF
                                 ;      58 #endif
                                 ;      59 
                                 ;      60 #define va_arg(AP,TYPE) (AP += sizeof(TYPE), *((TYPE *)(AP - sizeof(TYPE))))
                                 ;      61 #define va_end(AP) (AP = (va_list)0)
                                 ;      62 #define va_start(AP,LASTARG) (AP = ((va_list)&LASTARG + sizeof(LASTARG)))
                                 ;      63 
                                 ;      64 #endif /* _R_M16C */
                                 ;      65 
                                 ;      66 #endif /* _STDARG_H */
                                 ;     644 
                                 ;     645 		/* VC++ COMPILER PARAMETERS */
                                 ;     646  #define _CRTIMP
                                 ;     647  #define _CDECL
                                 ;     648 
                                 ;     649  #ifdef __NO_LONG_LONG
                                 ;     650 
                                 ;     651  #else /* defined(__NO_LONG_LONG) */
                                 ;     652   #define _LONGLONG	long long
                                 ;     653   #define _ULONGLONG	unsigned long long
                                 ;     654   #define _LLONG_MAX	0x7fffffffffffffffLL
                                 ;     655   #define _ULLONG_MAX	0xffffffffffffffffULL
                                 ;     656  #endif /* __NO_LONG_LONG */
                                 ;     657 
                                 ;     658 		/* FLOATING-POINT PROPERTIES */
                                 ;     659 #if defined(__RX) && defined(__DBL4)
                                 ;     660   #define _DBIAS	0x7e	/* IEEE format double and float */
                                 ;     661   #define _DOFF	7
                                 ;     662 #else /* defined(__RX) && defined(__DBL4) */
                                 ;     663   #define _DBIAS	0x3fe	/* IEEE format double and float */
                                 ;     664   #define _DOFF	4
                                 ;     665 #endif /* defined(__RX) && defined(__DBL4) */
                                 ;     666 
                                 ;     667 #define _FBIAS	0x7e
                                 ;     668 #define _FOFF	7
                                 ;     669 
                                 ;     670 		/* INTEGER PROPERTIES */
                                 ;     671 #define _BITS_BYTE	8
                                 ;     672 #define _C2			1	/* 0 if not 2's complement */
                                 ;     673 #define _MBMAX		8	/* MB_LEN_MAX */
                                 ;     674 
                                 ;     675   #if defined(__H8__) || defined(_R_M16C)
                                 ;     676     #define _ILONG		0	/* 16-bit int */
                                 ;     677   #elif defined(_R_SHC) || defined(__RX)
                                 ;     678     #define _ILONG		1	/* 32-bit int */
                                 ;     679   #else
                                 ;     680     #define _ILONG		1	/* 0 if 16-bit int */
                                 ;     681   #endif
                                 ;     682 
                                 ;     685  #if defined(__s390__) || defined(__CHAR_UNSIGNED__)  \
                                 ;     685 	|| defined(_CHAR_UNSIGNED) \
                                 ;     685 	|| (defined(__RX) && defined(__UCHAR))
                                 ;     686   #define _CSIGN	0	/* 0 if char is not signed */
                                 ;     687 
                                 ;     688  #else /* defined(__s390__) etc */
                                 ;     689   #define _CSIGN	1
                                 ;     690  #endif /* defined(__s390__) etc */
                                 ;     691 
                                 ;     692 #define _MAX_EXP_DIG	8	/* for parsing numerics */
                                 ;     693 #define _MAX_INT_DIG	32
                                 ;     694 #define _MAX_SIG_DIG	48
                                 ;     695 
                                 ;     696  #if defined(_LONGLONG)
                                 ;     697 typedef _LONGLONG _Longlong;
                                 ;     698 typedef _ULONGLONG _ULonglong;
                                 ;     699 
                                 ;     700  #else /* defined(_LONGLONG) */
                                 ;     701 typedef long _Longlong;
                                 ;     702 typedef unsigned long _ULonglong;
                                 ;     703  #define _LLONG_MAX		0x7fffffffL
                                 ;     704  #define _ULLONG_MAX	0xffffffffUL
                                 ;     705  #endif /* defined(_LONGLONG) */
                                 ;     706 
                                 ;     707 		/* wchar_t AND wint_t PROPERTIES */
                                 ;     708 
                                 ;     710  #if defined(_WCHAR_T) || defined(_WCHAR_T_DEFINED) \
                                 ;     710 	|| defined (_MSL_WCHAR_T_TYPE)
                                 ;     711   #define _WCHART
                                 ;     712  #endif /* defined(_WCHAR_T) || defined(_WCHAR_T_DEFINED) */
                                 ;     713 
                                 ;     714  #if defined(_WINT_T)
                                 ;     715   #define _WINTT
                                 ;     716  #endif /* _WINT_T */
                                 ;     717 
                                 ;     718 #if defined(__RX) && defined(_R_NO_WIDECHAR)
                                 ;     719  /* Dummy */
                                 ;     720 #else /* defined(__RX) && defined(_R_NO_WIDECHAR) */
                                 ;     721  #ifdef __cplusplus
                                 ;     722   #define _WCHART
                                 ;     723 typedef wchar_t _Wchart;
                                 ;     724 typedef wchar_t _Wintt;
                                 ;     725  #endif /* __cplusplus */
                                 ;     726 #endif /* defined(__RX) && defined(_R_NO_WIDECHAR) */
                                 ;     727 
                                 ;     728  #if defined(_MSL_WCHAR_T_TYPE)
                                 ;     729   #define _WCMIN	0
                                 ;     730   #define _WCMAX	0xffff
                                 ;     731 
                                 ;     732   #ifndef __cplusplus
                                 ;     733 typedef wchar_t _Wchart;
                                 ;     734 typedef wint_t _Wintt;
                                 ;     735   #endif /* __cplusplus */
                                 ;     736 
                                 ;     737   #define mbstate_t	_DNK_mbstate_t
                                 ;     738   #define wctype_t	_DNK_wctype_t
                                 ;     739   #define wint_t	_DNK_wint_t
                                 ;     740   #define _MSC_VER	1
                                 ;     741 
                                 ;     742  #elif defined(__WCHAR_TYPE__)
                                 ;     743   #define _WCMIN	(-_WCMAX - _C2)
                                 ;     744   #define _WCMAX	0x7fffffff	/* assume signed 32-bit wchar_t */
                                 ;     745 
                                 ;     746   #ifndef __cplusplus
                                 ;     747 typedef __WCHAR_TYPE__ _Wchart;
                                 ;     748 typedef __WCHAR_TYPE__ _Wintt;
                                 ;     749   #endif /* __cplusplus */
                                 ;     750 
                                 ;     751  #else /* default wchar_t/wint_t */
                                 ;     752 #ifdef __RX
                                 ;     753   #define _WCMIN	0
                                 ;     754   #define _WCMAX	0xffff
                                 ;     755 #else
                                 ;     756   #define _WCMIN	(-_WCMAX - _C2)
                                 ;     757   #define _WCMAX	0x7fffffff
                                 ;     758 #endif
                                 ;     759 
                                 ;     760 #if defined(__RX) && defined(_R_NO_WIDECHAR)
                                 ;     761 typedef unsigned short _Wchart;
                                 ;     762 typedef unsigned long _Wintt;
                                 ;     763 #else /* defined(__RX) && defined(_R_NO_WIDECHAR) */
                                 ;     764   #ifndef __cplusplus
                                 ;     765 	#ifdef __RX
                                 ;     766 typedef unsigned short _Wchart;
                                 ;     767 typedef unsigned long _Wintt;
                                 ;     768 	#else /* __RX */
                                 ;     769 typedef long _Wchart;
                                 ;     770 typedef long _Wintt;
                                 ;     771 	#endif /* __RX */
                                 ;     772   #endif /* __cplusplus */
                                 ;     773 #endif /* defined(__RX) && defined(_R_NO_WIDECHAR) */
                                 ;     774 
                                 ;     775  #endif /* compiler/library type */
                                 ;     776 
                                 ;     777 		/* POINTER PROPERTIES */
                                 ;     778 #define _NULL		0	/* 0L if pointer same as long */
                                 ;     779 
                                 ;     780 		/* signal PROPERTIES */
                                 ;     781 
                                 ;     782 #define _SIGABRT	6
                                 ;     783 #define _SIGMAX		44
                                 ;     784 
                                 ;     785 		/* stdarg PROPERTIES */
                                 ;     786 typedef va_list _Va_list;
                                 ;     787 
                                 ;     788  #if _HAS_C9X
                                 ;     789 
                                 ;     790  #if __EDG__ && !defined(__x86_64)
                                 ;     791   #undef va_copy
                                 ;     792  #endif /* __EDG__ */
                                 ;     793 
                                 ;     794  #ifndef va_copy
                                 ;     795 _EXTERN_C
                                 ;     796 void _Vacopy(va_list *, va_list);
                                 ;     797 _END_EXTERN_C
                                 ;     798   #define va_copy(apd, aps)	_Vacopy(&(apd), aps)
                                 ;     799  #endif /* va_copy */
                                 ;     800 
                                 ;     801  #endif /* _IS_C9X */
                                 ;     802 
                                 ;     803 _C_STD_BEGIN
                                 ;     804 		/* stdlib PROPERTIES */
                                 ;     805 #define _EXFAIL	1	/* EXIT_FAILURE */
                                 ;     806 
                                 ;     807 _EXTERN_C
                                 ;     808 void _Atexit(void (*)(void));
                                 ;     809 _END_EXTERN_C
                                 ;     810 
                                 ;     811 		/* stdio PROPERTIES */
                                 ;     812 #define _FNAMAX	260
                                 ;     813 #define _FOPMAX	20
                                 ;     814 #define _TNAMAX	16
                                 ;     815 
                                 ;     816  #define _FD_TYPE	signed char
                                 ;     817   #define _FD_NO(str) ((str)->_Handle)
                                 ;     818  #define _FD_VALID(fd)	(0 <= (fd))	/* fd is signed integer */
                                 ;     819  #define _FD_INVALID	(-1)
                                 ;     820  #define _SYSCH(x)	x
                                 ;     821 typedef char _Sysch_t;
                                 ;     822 
                                 ;     823 		/* STORAGE ALIGNMENT PROPERTIES */
                                 ;     824 
                                 ;     825  #if defined(_LP64) || defined(__x86_64)	/* compiler test */
                                 ;     826   #define _MEMBND	4U /* 16-byte boundaries (2^^4) */
                                 ;     827 
                                 ;     828  #else /* defined(_LP64) etc. */
                                 ;     829   #define _MEMBND	3U /* eight-byte boundaries (2^^3) */
                                 ;     830  #endif /* defined(_LP64) etc. */
                                 ;     831 
                                 ;     832 		/* time PROPERTIES */
                                 ;     833  #define _CPS	1
                                 ;     834 
                                 ;     835 #define _TBIAS	((70 * 365LU + 17) * 86400)
                                 ;     836 _C_STD_END
                                 ;     837 
                                 ;     838 		/* MULTITHREAD PROPERTIES */
                                 ;     839 
                                 ;     840  #if _MULTI_THREAD
                                 ;     841 _EXTERN_C
                                 ;     842 void _Locksyslock(int);
                                 ;     843 void _Unlocksyslock(int);
                                 ;     844 _END_EXTERN_C
                                 ;     845 
                                 ;     846  #else /* _MULTI_THREAD */
                                 ;     847   #define _Locksyslock(x)	(void)0
                                 ;     848   #define _Unlocksyslock(x)	(void)0
                                 ;     849  #endif /* _MULTI_THREAD */
                                 ;     850 
                                 ;     851 		/* LOCK MACROS */
                                 ;     852  #define _LOCK_LOCALE	0
                                 ;     853  #define _LOCK_MALLOC	1
                                 ;     854  #define _LOCK_STREAM	2
                                 ;     855  #define _LOCK_DEBUG	3
                                 ;     856  #define _MAX_LOCK		4	/* one more than highest lock number */
                                 ;     857 
                                 ;     858  #if _IOSTREAM_OP_LOCKS
                                 ;     859   #define _MAYBE_LOCK
                                 ;     860 
                                 ;     861  #else /* _IOSTREAM_OP_LOCKS */
                                 ;     863   #define _MAYBE_LOCK	\
                                 ;     863 	if (_Locktype == _LOCK_MALLOC || _Locktype == _LOCK_DEBUG)
                                 ;     864  #endif /* _IOSTREAM_OP_LOCKS */
                                 ;     865 
                                 ;     866  #ifdef __cplusplus
                                 ;     867 _STD_BEGIN
                                 ;     868 extern "C++" {	// in case of _C_AS_CPP
                                 ;     869 		// CLASS _Lockit
                                 ;     870 class _Lockit
                                 ;     871 	{	// lock while object in existence -- MUST NEST
                                 ;     872 public:
                                 ;     873 
                                 ;     874   #if !_MULTI_THREAD
                                 ;     875 	_Lockit()
                                 ;     876 		{	// do nothing
                                 ;     877 		}
                                 ;     878 
                                 ;     879 	explicit _Lockit(int)
                                 ;     880 		{	// do nothing
                                 ;     881 		}
                                 ;     882 
                                 ;     883 	~_Lockit()
                                 ;     884 		{	// do nothing
                                 ;     885 		}
                                 ;     886 
                                 ;     887   #else /* !_MULTI_THREAD */
                                 ;     888 	_Lockit()
                                 ;     889 		: _Locktype(_LOCK_MALLOC)
                                 ;     890 		{	// set default lock
                                 ;     891 		_MAYBE_LOCK
                                 ;     892 			_Locksyslock(_Locktype);
                                 ;     893 		}
                                 ;     894 
                                 ;     895 	explicit _Lockit(int _Type)
                                 ;     896 		: _Locktype(_Type)
                                 ;     897 		{	// set the lock
                                 ;     898 		_MAYBE_LOCK
                                 ;     899 			_Locksyslock(_Locktype);
                                 ;     900 		}
                                 ;     901 
                                 ;     902 	~_Lockit()
                                 ;     903 		{	// clear the lock
                                 ;     904 		_MAYBE_LOCK
                                 ;     905 			_Unlocksyslock(_Locktype);
                                 ;     906 		}
                                 ;     907   #endif /* _MULTI_THREAD */
                                 ;     908 
                                 ;     909 //private:
                                 ;     910 	_Lockit(const _Lockit&);			// not defined
                                 ;     911 	_Lockit& operator=(const _Lockit&);	// not defined
                                 ;     912 
                                 ;     913 private:
                                 ;     914 	int _Locktype;
                                 ;     915 	};
                                 ;     916 
                                 ;     917   #if !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS
                                 ;     918 class _Mutex
                                 ;     919 	{	// lock under program control
                                 ;     920 public:
                                 ;     921 	void _Lock()
                                 ;     922 		{	// do nothing
                                 ;     923 		}
                                 ;     924 
                                 ;     925 	void _Unlock()
                                 ;     926 		{	// do nothing
                                 ;     927 	}
                                 ;     928 	};
                                 ;     929 
                                 ;     930   #else /* !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS */
                                 ;     931 class _Mutex
                                 ;     932 	{	// lock under program control
                                 ;     933 public:
                                 ;     934 	_Mutex();
                                 ;     935 	~_Mutex();
                                 ;     936 	void _Lock();
                                 ;     937 	void _Unlock();
                                 ;     938 
                                 ;     939 private:
                                 ;     940 	_Mutex(const _Mutex&);				// not defined
                                 ;     941 	_Mutex& operator=(const _Mutex&);	// not defined
                                 ;     942 	void *_Mtx;
                                 ;     943 	};
                                 ;     944   #endif /* !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS */
                                 ;     945 
                                 ;     946 }	// extern "C++"
                                 ;     947 _STD_END
                                 ;     948  #endif /* __cplusplus */
                                 ;     949 
                                 ;     950 		/* MISCELLANEOUS MACROS */
                                 ;     951 #define _ATEXIT_T	void
                                 ;     952 
                                 ;     953 #ifndef _TEMPLATE_STAT
                                 ;     954  #define _TEMPLATE_STAT
                                 ;     955 #endif /* */
                                 ;     956 
                                 ;     957   #define _NO_RETURN(fun)	void fun
                                 ;     958 
                                 ;     959 #endif /* _YVALS */
                                 ;     960 
                                 ;     961 
                                 ;     962 /*
                                 ;     963  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     964 V5.03:0216 */
                                 ;      14 #endif /* _YVALS */
                                 ;      15 
                                 ;      16 #include <errno.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /* errno.h standard header */
                                 ;       8 #ifndef _ERRNO
                                 ;       9 #define _ERRNO
                                 ;      10 #include <macro.h>
                                 ;      11 #ifndef _YVALS
                                 ;      12 #include <sys/yvals.h>
                                 ;      13 #endif /* _YVALS */
                                 ;      14 
                                 ;      15 _C_STD_BEGIN
                                 ;      16 
                                 ;      17 		/* ERROR CODES */
                                 ;      18 #define EDOM           0x0021
                                 ;      19 #define EFAULT         0x000E
                                 ;      20 #define EFBIG          0x001B
                                 ;      21 #define EFPOS          0x0098
                                 ;      22 #define EMLINK         0x001F
                                 ;      23 #define ENFILE         0x0017
                                 ;      24 #define ENOENT         0x0002
                                 ;      25 #define ENOSPC         0x001C
                                 ;      26 #define ENOTTY         0x0019
                                 ;      27 #define EPIPE          0x0020
                                 ;      28 #define ERANGE         0x0022
                                 ;      29 #define EROFS          0x001E
                                 ;      30 #define ESPIPE         0x001D
                                 ;      31 
                                 ;      32   #define E2BIG         0x0007
                                 ;      33   #define EACCES        0x000D
                                 ;      34   #define EAGAIN        0x000B
                                 ;      35   #define EBADF         0x0009
                                 ;      36   #define EBUSY         0x0010
                                 ;      37   #define ECHILD        0x000A
                                 ;      38   #define EEXIST        0x0011
                                 ;      39   #define EINTR         0x0004
                                 ;      40   #define EINVAL        0x0016
                                 ;      41   #define EIO           0x0005
                                 ;      42   #define EISDIR        0x0015
                                 ;      43   #define EMFILE        0x0018
                                 ;      44   #define ENODEV        0x0013
                                 ;      45   #define ENOEXEC       0x0008
                                 ;      46   #define ENOMEM        0x000C
                                 ;      47   #define ENOTDIR       0x0014
                                 ;      48   #define ENXIO         0x0006
                                 ;      49   #define EPERM         0x0001
                                 ;      50   #define ESRCH         0x0003
                                 ;      51   #define EXDEV         0x0012
                                 ;      52 
                                 ;      53  #if defined(_MSL_WCHAR_T_TYPE)
                                 ;      54   #define EBADMSG       0x004A
                                 ;      55   #define ECANCELED     0x007D
                                 ;      56   #define EDEADLK       0x0023
                                 ;      57   #define EILSEQ        0x0058
                                 ;      58   #define EINPROGRESS   0x0073
                                 ;      59   #define EMSGSIZE      0x005A
                                 ;      60   #define ENAMETOOLONG  0x0024
                                 ;      61   #define ENOLCK        0x004D
                                 ;      62   #define ENOSYS        0x0026
                                 ;      63   #define ENOTEMPTY     0x0027
                                 ;      64   #define ENOTSUP       0x005F
                                 ;      65   #define ETIMEDOUT     0x006E
                                 ;      66 
                                 ;      67  #elif defined(_LINUX_C_LIB)
                                 ;      68   #define EBADMSG       0x004A
                                 ;      69   #define ECANCELED     0x007D
                                 ;      70   #define EDEADLK       0x0023
                                 ;      71   #define EILSEQ        0x0054
                                 ;      72   #define EINPROGRESS   0x0073
                                 ;      73   #define EMSGSIZE      0x005A
                                 ;      74   #define ENAMETOOLONG  0x0024
                                 ;      75   #define ENOLCK        0x0025
                                 ;      76   #define ENOSYS        0x0026
                                 ;      77   #define ENOTEMPTY     0x0027
                                 ;      78   #define ENOTSUP       0x005F
                                 ;      79   #define ETIMEDOUT     0x006E
                                 ;      80 
                                 ;      81   #define EWOULDBLOCK	EAGAIN
                                 ;      82   #define EAFNOSUPPORT	0x0061
                                 ;      83 
                                 ;      84  #else /* library type */
                                 ;      85   #define EBADMSG       0x004D
                                 ;      86   #define ECANCELED     0x002F
                                 ;      87   #define EDEADLK       0x002D
                                 ;      88   #define EILSEQ        0x0058
                                 ;      89   #define EINPROGRESS   0x0096
                                 ;      90   #define EMSGSIZE      0x0061
                                 ;      91   #define ENAMETOOLONG  0x004E
                                 ;      92   #define ENOLCK        0x002E
                                 ;      93   #define ENOSYS        0x0059
                                 ;      94   #define ENOTEMPTY     0x005D
                                 ;      95   #define ENOTSUP       0x0030
                                 ;      96   #define ETIMEDOUT     0x0091
                                 ;      97  #endif /* library type */
                                 ;      98 
                                 ;      99 #ifdef __RX
                                 ;     100 	#define ESTRN   0x0450		/* 1104 */
                                 ;     101 	#define ECBASE  0x04B0		/* 1200 */
                                 ;     102 	#define ETLN    0x04B2		/* 1202 */
                                 ;     103 	#define EEXP    0x04B4		/* 1204 */
                                 ;     104 	#define EEXPN   0x04B6		/* 1206 */
                                 ;     105 	#define EFLOATO 0x04BA		/* 1210 */
                                 ;     106 	#define EFLOATU 0x04C4		/* 1220 */
                                 ;     107 	#define EDBLO   0x04E2		/* 1250 */
                                 ;     108 	#define EDBLU   0x04EC		/* 1260 */
                                 ;     109 	#define ELDBLO  0x04F6		/* 1270 */
                                 ;     110 	#define ELDBLU  0x0500		/* 1280 */
                                 ;     111 #endif /* __RX */
                                 ;     112 
                                 ;     113 		/* DECLARATIONS */
                                 ;     114 _C_LIB_DECL
                                 ;     115 
                                 ;     116 
                                 ;     117 #ifdef __RX
                                 ;     118 
                                 ;     119 	#ifndef _R_REENT
                                 ;     120 		extern volatile long _errno;
                                 ;     121 	#else
                                 ;     122 		#define _errno (*errno_addr())
                                 ;     123 		long  *errno_addr(void);
                                 ;     124 	#endif
                                 ;     125 
                                 ;     126 	#ifndef  errno
                                 ;     127 		#define  errno          _errno
                                 ;     128 	#endif
                                 ;     129 
                                 ;     130 #else /* __RX */
                                 ;     131 
                                 ;     132  #if !_MULTI_THREAD || _COMPILER_TLS && !_GLOBAL_LOCALE
                                 ;     133 extern int _TLS_QUAL _Errno;
                                 ;     134 
                                 ;     135   #define errno	(_CSTD _Errno)
                                 ;     136 
                                 ;     137  #else /* !_MULTI_THREAD || _COMPILER_TLS && !_GLOBAL_LOCALE */
                                 ;     138 int *_Geterrno(void);
                                 ;     139 
                                 ;     140   #define errno	(*_CSTD _Geterrno())
                                 ;     141  #endif /* !_MULTI_THREAD || _COMPILER_TLS && !_GLOBAL_LOCALE */
                                 ;     142 
                                 ;     143 #endif /* __RX */
                                 ;     144 
                                 ;     145 _END_C_LIB_DECL
                                 ;     146 
                                 ;     147  #if __STDC_WANT_LIB_EXT1__
                                 ;     148 _C_LIB_DECL
                                 ;     149 
                                 ;     150   #if !defined(_ERRNO_T_DEFINED)
                                 ;     151    #define _ERRNO_T_DEFINED
                                 ;     152 typedef int errno_t;
                                 ;     153   #endif /* _ERRNO_T_DEFINED */
                                 ;     154 
                                 ;     155 _END_C_LIB_DECL
                                 ;     156  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;     157 
                                 ;     158 _C_STD_END
                                 ;     159 #endif /* _ERRNO */
                                 ;     160 
                                 ;     161  #if defined(_STD_USING)
                                 ;     162 
                                 ;     163  #if __STDC_WANT_LIB_EXT1__
                                 ;     164 using _CSTD errno_t;
                                 ;     165  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;     166 
                                 ;     167  #endif /* defined(_STD_USING) */
                                 ;     168 
                                 ;     169 /*
                                 ;     170  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     171 V5.03:0216 */
                                 ;      17 
                                 ;      18 _C_STD_BEGIN
                                 ;      19 
                                 ;      20 		/* macros */
                                 ;      21 #ifndef NULL
                                 ;      22  #define NULL	_NULL
                                 ;      23 #endif /* NULL */
                                 ;      24 
                                 ;      25 #ifndef offsetof
                                 ;      26 
                                 ;      27  #if __EDG__
                                 ;      28   #ifdef __RX
                                 ;      29     #ifdef __cplusplus
                                 ;      30       #define offsetof(t, memb) ((size_t)(&(((t *)0)->memb)))
                                 ;      31     #else
                                 ;      33       #define offsetof(type,id) ((char *)(&(((type *)NULL)->id))  -    \
                                 ;      33                                  (char *)((type *)NULL))
                                 ;      34     #endif
                                 ;      35   #else /* __RX */
                                 ;      36   #define offsetof(T, member) ((_Sizet)__INTADDR__(&(((T *)0)->member)))
                                 ;      37   #endif /* __RX */
                                 ;      38 
                                 ;      39  #else /* __EDG__ */
                                 ;      40   #define offsetof(T, member)	((_CSTD size_t)&(((T *)0)->member))
                                 ;      41  #endif /* __EDG__ */
                                 ;      42 
                                 ;      43 #endif /* offsetof */
                                 ;      44 
                                 ;      45 		/* type definitions */
                                 ;      46 
                                 ;      48  #if !defined(_PTRDIFF_T) && !defined(_PTRDIFFT) \
                                 ;      48 	&& !defined(_PTRDIFF_T_DEFINED)
                                 ;      49   #define _PTRDIFF_T
                                 ;      50   #define _PTRDIFFT
                                 ;      51   #define _PTRDIFF_T_DEFINED
                                 ;      52   #define _STD_USING_PTRDIFF_T
                                 ;      53 typedef _Ptrdifft ptrdiff_t;
                                 ;      54  #endif /* !defined(_PTRDIFF_T) etc. */
                                 ;      55 
                                 ;      57  #if !defined(_SIZE_T) && !defined(_SIZET) && !defined(_SIZE_T_DEFINED) \
                                 ;      57 	&& !defined(_BSD_SIZE_T_DEFINED_)
                                 ;      58   #define _SIZE_T
                                 ;      59   #define _SIZET
                                 ;      60   #define _BSD_SIZE_T_DEFINED_
                                 ;      61   #define _SIZE_T_DEFINED
                                 ;      62   #define _STD_USING_SIZE_T
                                 ;      63 typedef _Sizet size_t;
                                 ;      64  #endif /* !defined(_SIZE_T) etc. */
                                 ;      65 
                                 ;      66  #if !defined(_WCHART) && !defined(_WCHAR_T_DEFINED)
                                 ;      67   #define _WCHART
                                 ;      68   #define _WCHAR_T_DEFINED
                                 ;      69 typedef _Wchart wchar_t;
                                 ;      70  #endif /* _WCHART etc. */
                                 ;      71 
                                 ;      72  #if __STDC_WANT_LIB_EXT1__
                                 ;      73 
                                 ;      74   #if !defined(_RSIZE_T_DEFINED)
                                 ;      75    #define _RSIZE_T_DEFINED
                                 ;      76 typedef size_t rsize_t;
                                 ;      77   #endif /* _RSIZE_T_DEFINED */
                                 ;      78 
                                 ;      79  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;      80 _C_STD_END
                                 ;      81 #endif /* _STDDEF */
                                 ;      82 
                                 ;      83  #if defined(_STD_USING)
                                 ;      84 
                                 ;      85   #ifdef _STD_USING_PTRDIFF_T
                                 ;      86 using _CSTD ptrdiff_t;
                                 ;      87   #endif /* _STD_USING_PTRDIFF_T */
                                 ;      88 
                                 ;      89   #ifdef _STD_USING_SIZE_T
                                 ;      90 using _CSTD size_t;
                                 ;      91   #endif /* _STD_USING_SIZE_T */
                                 ;      92 
                                 ;      93  #if __STDC_WANT_LIB_EXT1__
                                 ;      94 using _CSTD rsize_t;
                                 ;      95  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;      96 
                                 ;      97  #endif /* defined(_STD_USING) */
                                 ;      98 
                                 ;      99 /*
                                 ;     100  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     101 V5.03:0216 */
                                 ;      33 #include <stdio.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /* stdio.h standard header */
                                 ;       8 #ifndef _STDIO
                                 ;       9 #define _STDIO
                                 ;      10 #include <macro.h>
                                 ;      11 #ifndef _YVALS
                                 ;      12 #include <sys/yvals.h>
                                 ;      13 #endif /* _YVALS */
                                 ;      14 
                                 ;      15 #include <errno.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /* errno.h standard header */
                                 ;       8 #ifndef _ERRNO
                                 ;       9 #define _ERRNO
                                 ;      10 #include <macro.h>
                                 ;      11 #ifndef _YVALS
                                 ;      12 #include <sys/yvals.h>
                                 ;      13 #endif /* _YVALS */
                                 ;      14 
                                 ;      15 _C_STD_BEGIN
                                 ;      16 
                                 ;      17 		/* ERROR CODES */
                                 ;      18 #define EDOM           0x0021
                                 ;      19 #define EFAULT         0x000E
                                 ;      20 #define EFBIG          0x001B
                                 ;      21 #define EFPOS          0x0098
                                 ;      22 #define EMLINK         0x001F
                                 ;      23 #define ENFILE         0x0017
                                 ;      24 #define ENOENT         0x0002
                                 ;      25 #define ENOSPC         0x001C
                                 ;      26 #define ENOTTY         0x0019
                                 ;      27 #define EPIPE          0x0020
                                 ;      28 #define ERANGE         0x0022
                                 ;      29 #define EROFS          0x001E
                                 ;      30 #define ESPIPE         0x001D
                                 ;      31 
                                 ;      32   #define E2BIG         0x0007
                                 ;      33   #define EACCES        0x000D
                                 ;      34   #define EAGAIN        0x000B
                                 ;      35   #define EBADF         0x0009
                                 ;      36   #define EBUSY         0x0010
                                 ;      37   #define ECHILD        0x000A
                                 ;      38   #define EEXIST        0x0011
                                 ;      39   #define EINTR         0x0004
                                 ;      40   #define EINVAL        0x0016
                                 ;      41   #define EIO           0x0005
                                 ;      42   #define EISDIR        0x0015
                                 ;      43   #define EMFILE        0x0018
                                 ;      44   #define ENODEV        0x0013
                                 ;      45   #define ENOEXEC       0x0008
                                 ;      46   #define ENOMEM        0x000C
                                 ;      47   #define ENOTDIR       0x0014
                                 ;      48   #define ENXIO         0x0006
                                 ;      49   #define EPERM         0x0001
                                 ;      50   #define ESRCH         0x0003
                                 ;      51   #define EXDEV         0x0012
                                 ;      52 
                                 ;      53  #if defined(_MSL_WCHAR_T_TYPE)
                                 ;      54   #define EBADMSG       0x004A
                                 ;      55   #define ECANCELED     0x007D
                                 ;      56   #define EDEADLK       0x0023
                                 ;      57   #define EILSEQ        0x0058
                                 ;      58   #define EINPROGRESS   0x0073
                                 ;      59   #define EMSGSIZE      0x005A
                                 ;      60   #define ENAMETOOLONG  0x0024
                                 ;      61   #define ENOLCK        0x004D
                                 ;      62   #define ENOSYS        0x0026
                                 ;      63   #define ENOTEMPTY     0x0027
                                 ;      64   #define ENOTSUP       0x005F
                                 ;      65   #define ETIMEDOUT     0x006E
                                 ;      66 
                                 ;      67  #elif defined(_LINUX_C_LIB)
                                 ;      68   #define EBADMSG       0x004A
                                 ;      69   #define ECANCELED     0x007D
                                 ;      70   #define EDEADLK       0x0023
                                 ;      71   #define EILSEQ        0x0054
                                 ;      72   #define EINPROGRESS   0x0073
                                 ;      73   #define EMSGSIZE      0x005A
                                 ;      74   #define ENAMETOOLONG  0x0024
                                 ;      75   #define ENOLCK        0x0025
                                 ;      76   #define ENOSYS        0x0026
                                 ;      77   #define ENOTEMPTY     0x0027
                                 ;      78   #define ENOTSUP       0x005F
                                 ;      79   #define ETIMEDOUT     0x006E
                                 ;      80 
                                 ;      81   #define EWOULDBLOCK	EAGAIN
                                 ;      82   #define EAFNOSUPPORT	0x0061
                                 ;      83 
                                 ;      84  #else /* library type */
                                 ;      85   #define EBADMSG       0x004D
                                 ;      86   #define ECANCELED     0x002F
                                 ;      87   #define EDEADLK       0x002D
                                 ;      88   #define EILSEQ        0x0058
                                 ;      89   #define EINPROGRESS   0x0096
                                 ;      90   #define EMSGSIZE      0x0061
                                 ;      91   #define ENAMETOOLONG  0x004E
                                 ;      92   #define ENOLCK        0x002E
                                 ;      93   #define ENOSYS        0x0059
                                 ;      94   #define ENOTEMPTY     0x005D
                                 ;      95   #define ENOTSUP       0x0030
                                 ;      96   #define ETIMEDOUT     0x0091
                                 ;      97  #endif /* library type */
                                 ;      98 
                                 ;      99 #ifdef __RX
                                 ;     100 	#define ESTRN   0x0450		/* 1104 */
                                 ;     101 	#define ECBASE  0x04B0		/* 1200 */
                                 ;     102 	#define ETLN    0x04B2		/* 1202 */
                                 ;     103 	#define EEXP    0x04B4		/* 1204 */
                                 ;     104 	#define EEXPN   0x04B6		/* 1206 */
                                 ;     105 	#define EFLOATO 0x04BA		/* 1210 */
                                 ;     106 	#define EFLOATU 0x04C4		/* 1220 */
                                 ;     107 	#define EDBLO   0x04E2		/* 1250 */
                                 ;     108 	#define EDBLU   0x04EC		/* 1260 */
                                 ;     109 	#define ELDBLO  0x04F6		/* 1270 */
                                 ;     110 	#define ELDBLU  0x0500		/* 1280 */
                                 ;     111 #endif /* __RX */
                                 ;     112 
                                 ;     113 		/* DECLARATIONS */
                                 ;     114 _C_LIB_DECL
                                 ;     115 
                                 ;     116 
                                 ;     117 #ifdef __RX
                                 ;     118 
                                 ;     119 	#ifndef _R_REENT
                                 ;     120 		extern volatile long _errno;
                                 ;     121 	#else
                                 ;     122 		#define _errno (*errno_addr())
                                 ;     123 		long  *errno_addr(void);
                                 ;     124 	#endif
                                 ;     125 
                                 ;     126 	#ifndef  errno
                                 ;     127 		#define  errno          _errno
                                 ;     128 	#endif
                                 ;     129 
                                 ;     130 #else /* __RX */
                                 ;     131 
                                 ;     132  #if !_MULTI_THREAD || _COMPILER_TLS && !_GLOBAL_LOCALE
                                 ;     133 extern int _TLS_QUAL _Errno;
                                 ;     134 
                                 ;     135   #define errno	(_CSTD _Errno)
                                 ;     136 
                                 ;     137  #else /* !_MULTI_THREAD || _COMPILER_TLS && !_GLOBAL_LOCALE */
                                 ;     138 int *_Geterrno(void);
                                 ;     139 
                                 ;     140   #define errno	(*_CSTD _Geterrno())
                                 ;     141  #endif /* !_MULTI_THREAD || _COMPILER_TLS && !_GLOBAL_LOCALE */
                                 ;     142 
                                 ;     143 #endif /* __RX */
                                 ;     144 
                                 ;     145 _END_C_LIB_DECL
                                 ;     146 
                                 ;     147  #if __STDC_WANT_LIB_EXT1__
                                 ;     148 _C_LIB_DECL
                                 ;     149 
                                 ;     150   #if !defined(_ERRNO_T_DEFINED)
                                 ;     151    #define _ERRNO_T_DEFINED
                                 ;     152 typedef int errno_t;
                                 ;     153   #endif /* _ERRNO_T_DEFINED */
                                 ;     154 
                                 ;     155 _END_C_LIB_DECL
                                 ;     156  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;     157 
                                 ;     158 _C_STD_END
                                 ;     159 #endif /* _ERRNO */
                                 ;     160 
                                 ;     161  #if defined(_STD_USING)
                                 ;     162 
                                 ;     163  #if __STDC_WANT_LIB_EXT1__
                                 ;     164 using _CSTD errno_t;
                                 ;     165  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;     166 
                                 ;     167  #endif /* defined(_STD_USING) */
                                 ;     168 
                                 ;     169 /*
                                 ;     170  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     171 V5.03:0216 */
                                 ;      16 
                                 ;      17 _C_STD_BEGIN
                                 ;      18 
                                 ;      19  #ifndef _HAS_DINKUM_CLIB
                                 ;      20   #define _HAS_DINKUM_CLIB	1
                                 ;      21  #endif /* _HAS_DINKUM_CLIB */
                                 ;      22 
                                 ;      23  #if defined(__MWERKS__)	/* compiler test */
                                 ;      24  #define fclose	_DNK_fclose
                                 ;      25  #define fopen	_DNK_fopen
                                 ;      26  #endif /* defined(__MWERKS__) */
                                 ;      27 
                                 ;      28 		/* MACROS */
                                 ;      29 #ifndef NULL
                                 ;      30  #define NULL	 	_NULL
                                 ;      31 #endif /* NULL */
                                 ;      32 
                                 ;      33 #define _IOFBF		0
                                 ;      34 #define _IOLBF		1
                                 ;      35 #define _IONBF		2
                                 ;      36 
                                 ;      37 #define BUFSIZ		512
                                 ;      38 #define EOF			(-1)
                                 ;      39 #define FILENAME_MAX	_FNAMAX
                                 ;      40 #ifdef __RX
                                 ;      41 #define FOPEN_MAX		_nfiles
                                 ;      42 #ifdef __PID
                                 ;      43 extern long _nfiles;
                                 ;      44 #else /* __PID	*/
                                 ;      45 extern const long _nfiles;
                                 ;      46 #endif /* __PID	*/
                                 ;      47 #else /* __RX */
                                 ;      48 #define FOPEN_MAX		_FOPMAX
                                 ;      49 #endif /* __RX */
                                 ;      50 #define L_tmpnam		_TNAMAX
                                 ;      51 #define TMP_MAX			32
                                 ;      52 
                                 ;      53 #define SEEK_SET	0
                                 ;      54 #define SEEK_CUR	1
                                 ;      55 #define SEEK_END	2
                                 ;      56 
                                 ;      57 #define stdin		(&_CSTD _Stdin)
                                 ;      58 #define stdout		(&_CSTD _Stdout)
                                 ;      59 #define stderr		(&_CSTD _Stderr)
                                 ;      60 
                                 ;      61  #if _MULTI_THREAD
                                 ;      62   #define _Lockfile(str)	_Lockfilelock(str)
                                 ;      63   #define _Unlockfile(str)	_Unlockfilelock(str)
                                 ;      64 
                                 ;      65  #else /* _MULTI_THREAD */
                                 ;      66   #define _Lockfile(x)		(void)0
                                 ;      67   #define _Unlockfile(x)	(void)0
                                 ;      68  #endif /* _MULTI_THREAD */
                                 ;      69 
                                 ;      70 		/* TYPE DEFINITIONS */
                                 ;      71  #ifndef _MBSTATET
                                 ;      72   #define _MBSTATET
                                 ;      73 typedef struct _Mbstatet
                                 ;      74 	{	/* state of a multibyte translation */
                                 ;      75 	unsigned long _Wchar;
                                 ;      76 	unsigned short _Byte, _State;
                                 ;      77 	} _Mbstatet;
                                 ;      78  #endif /* _MBSTATET */
                                 ;      79 
                                 ;      81  #if !defined(_SIZE_T) && !defined(_SIZET) && !defined(_SIZE_T_DEFINED) \
                                 ;      81 	&& !defined(_BSD_SIZE_T_DEFINED_)
                                 ;      82   #define _SIZE_T
                                 ;      83   #define _SIZET
                                 ;      84   #define _BSD_SIZE_T_DEFINED_
                                 ;      85   #define _SIZE_T_DEFINED
                                 ;      86   #define _STD_USING_SIZE_T
                                 ;      87 typedef _Sizet size_t;
                                 ;      88  #endif /* !defined(_SIZE_T) etc. */
                                 ;      89 
                                 ;      90 typedef struct fpos_t
                                 ;      91 	{	/* file position */
                                 ;      92 	_Longlong _Off;	/* can be system dependent */
                                 ;      93 	_Mbstatet _Wstate;
                                 ;      94 	} fpos_t;
                                 ;      95 
                                 ;      96  #define _FPOSOFF(fp)	((fp)._Off)
                                 ;      97 
                                 ;      98 #ifdef __RX
                                 ;      99 #pragma unpack
                                 ;     100 #endif /* __RX */
                                 ;     101 struct _Dnk_filet
                                 ;     102 	{	/* file control information */
                                 ;     103 	unsigned short _Mode;
                                 ;     104 	unsigned char _Idx;
                                 ;     105 	_FD_TYPE _Handle;
                                 ;     106 
                                 ;     107 	unsigned char *_Buf, *_Bend, *_Next;
                                 ;     108 	unsigned char *_Rend, *_Wend, *_Rback;
                                 ;     109 
                                 ;     110 	_Wchart *_WRback, _WBack[2];
                                 ;     111 	unsigned char *_Rsave, *_WRend, *_WWend;
                                 ;     112 
                                 ;     113 	_Mbstatet _Wstate;
                                 ;     114 	char *_Tmpnam;
                                 ;     115 	unsigned char _Back[_MBMAX], _Cbuf;
                                 ;     116 	};
                                 ;     117 #ifdef __RX
                                 ;     118 #pragma packoption
                                 ;     119 #endif /* __RX */
                                 ;     120 
                                 ;     121  #ifndef _FILET
                                 ;     122   #define _FILET
                                 ;     123 typedef struct _Dnk_filet _Filet;
                                 ;     124  #endif /* _FILET */
                                 ;     125 
                                 ;     126 typedef _Filet FILE;
                                 ;     127 
                                 ;     128 		/* declarations */
                                 ;     129 _C_LIB_DECL
                                 ;     130 extern FILE _Stdin, _Stdout, _Stderr;
                                 ;     131 
                                 ;     132 void clearerr(FILE *);
                                 ;     133 long fclose(FILE *);
                                 ;     134 long feof(FILE *);
                                 ;     135 long ferror(FILE *);
                                 ;     136 long fflush(FILE *);
                                 ;     137 long fgetc(FILE *);
                                 ;     138 long fgetpos(FILE *_Restrict, fpos_t *_Restrict);
                                 ;     139 char *fgets(char *_Restrict, long, FILE *_Restrict);
                                 ;     140 FILE *fopen(const char *_Restrict, const char *_Restrict);
                                 ;     141 
                                 ;     142 #ifndef __RX
                                 ;     143  #if __EDG__	/* compiler test */
                                 ;     144   #pragma __printf_args
                                 ;     145  #endif /* __EDG__ */
                                 ;     146 #endif /* !__RX */
                                 ;     147 
                                 ;     148 long fprintf(FILE *_Restrict, const char *_Restrict, ...);
                                 ;     149 long fputc(long, FILE *);
                                 ;     150 long fputs(const char *_Restrict, FILE *_Restrict);
                                 ;     151 size_t fread(void *_Restrict, size_t, size_t, FILE *_Restrict);
                                 ;     152 FILE *freopen(const char *_Restrict, const char *_Restrict,
                                 ;     153 	FILE *_Restrict);
                                 ;     154 
                                 ;     155 #ifndef __RX
                                 ;     156  #if __EDG__	/* compiler test */
                                 ;     157   #pragma __scanf_args
                                 ;     158  #endif /* __EDG__ */
                                 ;     159 #endif /* !__RX */
                                 ;     160 
                                 ;     161 long fscanf(FILE *_Restrict , const char *_Restrict, ...);
                                 ;     162 long fseek(FILE *, long, long);
                                 ;     163 long fsetpos(FILE *, const fpos_t *);
                                 ;     164 long ftell(FILE *);
                                 ;     165 size_t fwrite(const void *_Restrict, size_t, size_t,
                                 ;     166 	FILE *_Restrict);
                                 ;     167 char *gets(char *);
                                 ;     168 void perror(const char *);
                                 ;     169 
                                 ;     170 #ifndef __RX
                                 ;     171  #if __EDG__	/* compiler test */
                                 ;     172   #pragma __printf_args
                                 ;     173  #endif /* __EDG__ */
                                 ;     174 #endif /* !__RX */
                                 ;     175 
                                 ;     176 long printf(const char *_Restrict, ...);
                                 ;     177 long puts(const char *);
                                 ;     178 long remove(const char *);
                                 ;     179 long rename(const char *, const char *);
                                 ;     180 void rewind(FILE *);
                                 ;     181 
                                 ;     182 #ifndef __RX
                                 ;     183  #if __EDG__	/* compiler test */
                                 ;     184   #pragma __scanf_args
                                 ;     185  #endif /* __EDG__ */
                                 ;     186 #endif /* !__RX */
                                 ;     187 
                                 ;     188 long scanf(const char *_Restrict, ...);
                                 ;     189 void setbuf(FILE *_Restrict , char *_Restrict);
                                 ;     190 long setvbuf(FILE *_Restrict , char *_Restrict, long, size_t);
                                 ;     191 
                                 ;     192 #ifndef __RX
                                 ;     193  #if __EDG__	/* compiler test */
                                 ;     194   #pragma __printf_args
                                 ;     195  #endif /* __EDG__ */
                                 ;     196 #endif /* !__RX */
                                 ;     197 
                                 ;     198 long sprintf(char *_Restrict, const char *_Restrict, ...);
                                 ;     199 
                                 ;     200 #ifndef __RX
                                 ;     201  #if __EDG__	/* compiler test */
                                 ;     202   #pragma __scanf_args
                                 ;     203  #endif /* __EDG__ */
                                 ;     204 #endif /* !__RX */
                                 ;     205 
                                 ;     206 long sscanf(const char *_Restrict, const char *_Restrict, ...);
                                 ;     207 FILE *tmpfile(void);
                                 ;     208 char *tmpnam(char *);
                                 ;     209 long ungetc(long, FILE *);
                                 ;     210 long vfprintf(FILE *_Restrict, const char *_Restrict, _Va_list);
                                 ;     211 long vprintf(const char *_Restrict, _Va_list);
                                 ;     212 long vsprintf(char *_Restrict, const char *_Restrict, _Va_list);
                                 ;     213 
                                 ;     214  #if _ADDED_C_LIB
                                 ;     215 FILE *fdopen(_FD_TYPE, const char *);
                                 ;     216 int fileno(FILE *);
                                 ;     217 int getw(FILE *);
                                 ;     218 int putw(int, FILE *);
                                 ;     219  #endif /* _ADDED_C_LIB */
                                 ;     220 
                                 ;     221 long _Fgpos(FILE *, fpos_t *);
                                 ;     222 long _Flocale(FILE *, const char *, long);
                                 ;     223 void _Fsetlocale(FILE *, long);
                                 ;     224 long _Fspos(FILE *, const fpos_t *, long, long);
                                 ;     225 
                                 ;     226  #if _MULTI_THREAD
                                 ;     227 void _Lockfilelock(_Filet *);
                                 ;     228 void _Unlockfilelock(_Filet *);
                                 ;     229  #endif /* _MULTI_THREAD */
                                 ;     230 
                                 ;     231 #ifdef __RX
                                 ;     232 extern FILE *_Files[];
                                 ;     233 #else /* __RX */
                                 ;     234 extern FILE *_Files[FOPEN_MAX];
                                 ;     235 #endif /* __RX */
                                 ;     236 
                                 ;     237  #if _HAS_C9X
                                 ;     238 
                                 ;     239 #ifndef __RX
                                 ;     240  #if __EDG__	/* compiler test */
                                 ;     241   #pragma __printf_args
                                 ;     242  #endif /* __EDG__ */
                                 ;     243 #endif /* !__RX */
                                 ;     244 
                                 ;     245 long snprintf(char *_Restrict, size_t,
                                 ;     246 	const char *_Restrict, ...);
                                 ;     247 long vsnprintf(char *_Restrict, size_t,
                                 ;     248 	const char *_Restrict, _Va_list);
                                 ;     249 long vfscanf(FILE *_Restrict,
                                 ;     250 	const char *_Restrict, _Va_list);
                                 ;     251 long vscanf(const char *_Restrict, _Va_list);
                                 ;     252 long vsscanf(const char *_Restrict,
                                 ;     253 	const char *_Restrict, _Va_list);
                                 ;     254 
                                 ;     255  #else /* _IS_C9X */
                                 ;     256 
                                 ;     257  #if _ADDED_C_LIB
                                 ;     258 
                                 ;     259 #ifndef __RX
                                 ;     260   #if __EDG__	/* compiler test */
                                 ;     261    #pragma __printf_args
                                 ;     262   #endif /* __EDG__ */
                                 ;     263 #endif /* !__RX */
                                 ;     264 
                                 ;     265 int snprintf(char *_Restrict, size_t,
                                 ;     266 	const char *_Restrict, ...);
                                 ;     267 int vsnprintf(char *_Restrict, size_t,
                                 ;     268 	const char *_Restrict, _Va_list);
                                 ;     269  #endif /* _ADDED_C_LIB */
                                 ;     270 
                                 ;     271  #endif /* _IS_C9X */
                                 ;     272 _END_C_LIB_DECL
                                 ;     273 
                                 ;     274  #if _MULTI_THREAD && _FILE_OP_LOCKS
                                 ;     275 		/* declarations only */
                                 ;     276 _C_LIB_DECL
                                 ;     277 int getc(FILE *);
                                 ;     278 int getchar(void);
                                 ;     279 int putc(int, FILE *);
                                 ;     280 int putchar(int);
                                 ;     281 _END_C_LIB_DECL
                                 ;     282 
                                 ;     283  #else /* _MULTI_THREAD && _FILE_OP_LOCKS */
                                 ;     284 
                                 ;     285   #if defined(__cplusplus) && !defined(_NO_CPP_INLINES)
                                 ;     286 		// INLINES, for C++
                                 ;     287 
                                 ;     288 _C_LIB_DECL
                                 ;     289 
                                 ;     290 inline int getc(FILE *_Str)
                                 ;     291 	{	// get a character
                                 ;     292 	return ((_Str->_Next < _Str->_Rend
                                 ;     293 		? *_Str->_Next++ : fgetc(_Str)));
                                 ;     294 	}
                                 ;     295 
                                 ;     296 inline int getchar()
                                 ;     297 	{	// get a character from stdin
                                 ;     298 #ifdef __RX
                                 ;     299 	return ((stdin->_Next < stdin->_Rend
                                 ;     300 	? *stdin->_Next++ : fgetc(stdin)));
                                 ;     301 #else /* __RX */
                                 ;     302 	return ((_Files[0]->_Next < _Files[0]->_Rend
                                 ;     303 	? *_Files[0]->_Next++ : fgetc(_Files[0])));
                                 ;     304 #endif /* __RX */
                                 ;     305 	}
                                 ;     306 
                                 ;     307 inline int putc(int _Ch, FILE *_Str)
                                 ;     308 	{	// put a character
                                 ;     309 	return ((_Str->_Next < _Str->_Wend
                                 ;     310 		? (*_Str->_Next++ = (char)_Ch) : fputc(_Ch, _Str)));
                                 ;     311 	}
                                 ;     312 
                                 ;     313 inline int putchar(int _Ch)
                                 ;     314 	{	// put a character to stdout
                                 ;     315 #ifdef __RX
                                 ;     316 	return ((stdout->_Next < stdout->_Wend
                                 ;     317 	? (*stdout->_Next++ = (char)_Ch) : fputc(_Ch, stdout)));
                                 ;     318 #else /* __RX */
                                 ;     319 	return ((_Files[1]->_Next < _Files[1]->_Wend
                                 ;     320 	? (*_Files[1]->_Next++ = (char)_Ch) : fputc(_Ch, _Files[1])));
                                 ;     321 #endif /* __RX */
                                 ;     322 	}
                                 ;     323 
                                 ;     324 _END_C_LIB_DECL
                                 ;     325 
                                 ;     326   #else /* defined(__cplusplus) && !defined(_NO_CPP_INLINES) */
                                 ;     327 		/* declarations and macro overrides, for C */
                                 ;     328 _C_LIB_DECL
                                 ;     329 long getc(FILE *);
                                 ;     330 long getchar(void);
                                 ;     331 long putc(long, FILE *);
                                 ;     332 long putchar(long);
                                 ;     333 _END_C_LIB_DECL
                                 ;     334 
                                 ;     336  #define getc(str)	((str)->_Next < (str)->_Rend \
                                 ;     336 	? *(str)->_Next++ : (fgetc)(str))
                                 ;     337 
                                 ;     338 #ifdef __RX
                                 ;     340  #define getchar()	(stdin->_Next < stdin->_Rend \
                                 ;     340 	? *stdin->_Next++ : (fgetc)(stdin))
                                 ;     341 #else /* __RX */
                                 ;     343  #define getchar()	(_Files[0]->_Next < _Files[0]->_Rend \
                                 ;     343 	? *_Files[0]->_Next++ : (fgetc)(_Files[0]))
                                 ;     344 #endif /* __RX */
                                 ;     345 
                                 ;     347  #define putc(ch, str)	((str)->_Next < (str)->_Wend \
                                 ;     347 	? (*(str)->_Next++ = ch) : (fputc)(ch, str))
                                 ;     348 
                                 ;     349 #ifdef __RX
                                 ;     351  #define putchar(ch)	(stdout->_Next < stdout->_Wend \
                                 ;     351 	? (*stdout->_Next++ = ch) : (fputc)(ch, stdout))
                                 ;     352 #else /* __RX */
                                 ;     354  #define putchar(ch)	(_Files[1]->_Next < _Files[1]->_Wend \
                                 ;     354 	? (*_Files[1]->_Next++ = ch) : (fputc)(ch, _Files[1]))
                                 ;     355 #endif /* __RX */
                                 ;     356   #endif /* defined(__cplusplus) && !defined(_NO_CPP_INLINES) */
                                 ;     357 
                                 ;     358  #endif /* _MULTI_THREAD && _FILE_OP_LOCKS */
                                 ;     359 
                                 ;     360  #if __STDC_WANT_LIB_EXT1__
                                 ;     361   #define L_tmpnam_s	L_tmpnam
                                 ;     362   #define TMP_MAX_S		TMP_MAX
                                 ;     363 
                                 ;     364   #if TMP_MAX_S < 25
                                 ;     365    #error TMP_MAX_S too small
                                 ;     366   #endif /* TMP_MAX_S < 25 */
                                 ;     367 
                                 ;     368 _C_LIB_DECL
                                 ;     369 
                                 ;     370   #if !defined(_ERRNO_T_DEFINED)
                                 ;     371    #define _ERRNO_T_DEFINED
                                 ;     372 typedef int errno_t;
                                 ;     373   #endif /* _ERRNO_T_DEFINED */
                                 ;     374 
                                 ;     375   #if !defined(_RSIZE_T_DEFINED)
                                 ;     376    #define _RSIZE_T_DEFINED
                                 ;     377 typedef size_t rsize_t;
                                 ;     378   #endif /* _RSIZE_T_DEFINED */
                                 ;     379 
                                 ;     380 errno_t tmpfile_s(FILE *_Restrict *_Restrict);
                                 ;     381 errno_t tmpnam_s(char *, rsize_t);
                                 ;     382 
                                 ;     383 errno_t fopen_s(FILE *_Restrict *_Restrict,
                                 ;     384 	const char *_Restrict, const char *_Restrict);
                                 ;     385 errno_t freopen_s(FILE *_Restrict *_Restrict,
                                 ;     386 	const char *_Restrict, const char *_Restrict, FILE *_Restrict);
                                 ;     387 
                                 ;     388 int fprintf_s(FILE *_Restrict, const char *_Restrict, ...);
                                 ;     389 int fscanf_s(FILE *_Restrict, const char *_Restrict, ...);
                                 ;     390 int printf_s(const char *_Restrict, ...);
                                 ;     391 int scanf_s(const char *_Restrict, ...);
                                 ;     392 int snprintf_s(char *_Restrict, rsize_t,
                                 ;     393 	const char *_Restrict, ...);
                                 ;     394 int sscanf_s(const char *_Restrict,
                                 ;     395 	const char *_Restrict, ...);
                                 ;     396 int sprintf_s(char *_Restrict, rsize_t,
                                 ;     397 	const char *_Restrict, ...);
                                 ;     398 int vfprintf_s(FILE *_Restrict,
                                 ;     399 	const char *_Restrict,
                                 ;     400 	_Va_list);
                                 ;     401 int vfscanf_s(FILE *_Restrict,
                                 ;     402 	const char *_Restrict,
                                 ;     403 	_Va_list);
                                 ;     404 int vprintf_s(const char *_Restrict,
                                 ;     405 	_Va_list);
                                 ;     406 int vscanf_s(const char *_Restrict,
                                 ;     407 	_Va_list);
                                 ;     408 int vsnprintf_s(char *_Restrict, rsize_t,
                                 ;     409 	const char *_Restrict,
                                 ;     410 	_Va_list);
                                 ;     411 int vsprintf_s(char *_Restrict, rsize_t,
                                 ;     412 	const char *_Restrict,
                                 ;     413 	_Va_list);
                                 ;     414 int vsscanf_s(const char *_Restrict,
                                 ;     415 	const char *_Restrict,
                                 ;     416 	_Va_list);
                                 ;     417 
                                 ;     418 char *gets_s(char *, rsize_t);
                                 ;     419 _END_C_LIB_DECL
                                 ;     420  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;     421 
                                 ;     422 _C_STD_END
                                 ;     423 #endif /* _STDIO */
                                 ;     424 
                                 ;     425  #if defined(_STD_USING)
                                 ;     426 using _CSTD _Filet; using _CSTD _Mbstatet;
                                 ;     427 
                                 ;     428   #ifdef _STD_USING_SIZE_T
                                 ;     429 using _CSTD size_t;
                                 ;     430   #endif /* _STD_USING_SIZE_T */
                                 ;     431 
                                 ;     432 using _CSTD fpos_t; using _CSTD FILE;
                                 ;     433 using _CSTD clearerr; using _CSTD fclose; using _CSTD feof;
                                 ;     434 using _CSTD ferror; using _CSTD fflush; using _CSTD fgetc;
                                 ;     435 using _CSTD fgetpos; using _CSTD fgets; using _CSTD fopen;
                                 ;     436 using _CSTD fprintf; using _CSTD fputc; using _CSTD fputs;
                                 ;     437 using _CSTD fread; using _CSTD freopen; using _CSTD fscanf;
                                 ;     438 using _CSTD fseek; using _CSTD fsetpos; using _CSTD ftell;
                                 ;     439 using _CSTD fwrite; using _CSTD getc; using _CSTD getchar;
                                 ;     440 using _CSTD gets; using _CSTD perror;
                                 ;     441 using _CSTD putc; using _CSTD putchar;
                                 ;     442 using _CSTD printf; using _CSTD puts; using _CSTD remove;
                                 ;     443 using _CSTD rename; using _CSTD rewind; using _CSTD scanf;
                                 ;     444 using _CSTD setbuf; using _CSTD setvbuf; using _CSTD sprintf;
                                 ;     445 using _CSTD sscanf; using _CSTD tmpfile; using _CSTD tmpnam;
                                 ;     446 using _CSTD ungetc; using _CSTD vfprintf; using _CSTD vprintf;
                                 ;     447 using _CSTD vsprintf;
                                 ;     448 
                                 ;     449  #if _HAS_C9X
                                 ;     450 using _CSTD snprintf; using _CSTD vsnprintf;
                                 ;     451 using _CSTD vfscanf; using _CSTD vscanf; using _CSTD vsscanf;
                                 ;     452 
                                 ;     453  #else /* _IS_C9X */
                                 ;     454 
                                 ;     455  #if _ADDED_C_LIB
                                 ;     456 using _CSTD snprintf; using _CSTD vsnprintf;
                                 ;     457  #endif /* _ADDED_C_LIB */
                                 ;     458 
                                 ;     459  #endif /* _IS_C9X */
                                 ;     460 
                                 ;     461  #if _ADDED_C_LIB
                                 ;     462 using _CSTD fdopen; using _CSTD fileno; using _CSTD getw; using _CSTD putw;
                                 ;     463  #endif /* _ADDED_C_LIB */
                                 ;     464 
                                 ;     465 
                                 ;     466  #if __STDC_WANT_LIB_EXT1__
                                 ;     467 using _CSTD errno_t;
                                 ;     468 using _CSTD rsize_t;
                                 ;     469 
                                 ;     470 using _CSTD tmpfile_s;
                                 ;     471 using _CSTD tmpnam_s;
                                 ;     472 using _CSTD fopen_s;
                                 ;     473 using _CSTD freopen_s;
                                 ;     474 using _CSTD fprintf_s;
                                 ;     475 using _CSTD fscanf_s;
                                 ;     476 using _CSTD printf_s;
                                 ;     477 using _CSTD scanf_s;
                                 ;     478 using _CSTD snprintf_s;
                                 ;     479 using _CSTD sscanf_s;
                                 ;     480 using _CSTD sprintf_s;
                                 ;     481 using _CSTD vfprintf_s;
                                 ;     482 using _CSTD vfscanf_s;
                                 ;     483 using _CSTD vprintf_s;
                                 ;     484 using _CSTD vscanf_s;
                                 ;     485 using _CSTD vsnprintf_s;
                                 ;     486 using _CSTD vsprintf_s;
                                 ;     487 using _CSTD vsscanf_s;
                                 ;     488 using _CSTD gets_s;
                                 ;     489  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;     490 
                                 ;     491  #endif /* defined(_STD_USING) */
                                 ;     492 
                                 ;     493 /*
                                 ;     494  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     495 V5.03:0216 */
                                 ;      34 #include "typedefine.h"
                                 ;       1 /***********************************************************************/
                                 ;       2 /*                                                                     */
                                 ;       3 /*  FILE        :typedefine.h                                          */
                                 ;       4 /*  DATE        :Wed, Aug 27, 2008                                     */
                                 ;       5 /*  DESCRIPTION :define scalar types.                                  */
                                 ;       6 /*  CPU GROUP   :118                                                   */
                                 ;       7 /*                                                                     */
                                 ;       8 /*  This file is generated by Renesas Project Generator (Ver.4.8).     */
                                 ;       9 /*                                                                     */
                                 ;      10 /***********************************************************************/
                                 ;      11 
                                 ;      12 /*********************************************************
                                 ;      13  *  Copyright(c) 2005 Renesas Electronics Corp.
                                 ;      14  *  And Renesas Solutions Corp.,All Rights Reserved. 
                                 ;      15  * 
                                 ;      16  *  typedefine.h
                                 ;      17  *  Function: typedef for startup
                                 ;      18  *
                                 ;      19  *  $Date: 2006/02/13 02:57:05 $
                                 ;      20  *  $Revision: 1.1.1.1 $
                                 ;      21  *
                                 ;      22  *******************************************/
                                 ;      23 #ifndef __TYPEDEF__
                                 ;      24 typedef signed char        _SBYTE;
                                 ;      25 typedef unsigned char      _UBYTE;
                                 ;      26 typedef signed short       _SWORD;
                                 ;      27 typedef unsigned short     _UWORD;
                                 ;      28 typedef signed int         _SINT;
                                 ;      29 typedef unsigned int       _UINT;
                                 ;      30 typedef signed long        _SDWORD;
                                 ;      31 typedef unsigned long      _UDWORD;
                                 ;      32 typedef signed long long   _SQDWORD;
                                 ;      33 typedef unsigned long long _UQDWORD;
                                 ;      34 #endif
                                 ;      35 #define __TYPEDEF__
                                 ;      36 
                                 ;      35 #include "sbrk.h"
                                 ;       1 /***********************************************************************/
                                 ;       2 /*                                                                     */
                                 ;       3 /*  FILE        :sbrk.h                                                */
                                 ;       4 /*  DATE        :Thu, Jul 08, 2010                                     */
                                 ;       5 /*  DESCRIPTION :Header file of sbrk file                              */
                                 ;       6 /*  CPU TYPE    :                                                      */
                                 ;       7 /*                                                                     */
                                 ;       8 /*  This file is generated by Renesas Project Generator (Ver.4.50).    */
                                 ;       9 /*  NOTE:THIS IS A TYPICAL EXAMPLE.                                    */
                                 ;      10 /*                                                                     */
                                 ;      11 /***********************************************************************/
                                 ;      12 /* size of area managed by sbrk */
                                 ;      13 #define HEAPSIZE 0x400
                                 ;      36 
                                 ;      37 _SBYTE  *sbrk(size_t size);
                                 ;      38 
                                 ;      39 //const size_t _sbrk_size=		/* Specifies the minimum unit of	*/
                                 ;      40 					/* the defined heap area		*/
                                 ;      41 
                                 ;      42 extern _SBYTE *_s1ptr;
                                 ;      43 
                                 ;      44 union HEAP_TYPE {
                                 ;      45     _SDWORD  dummy ;		/* Dummy for 4-byte boundary			*/
                                 ;      46     _SBYTE heap[HEAPSIZE];	/* Declaration of the area managed by sbrk	*/
                                 ;      47 };
                                 ;      48 
                                 ;      49 static union HEAP_TYPE heap_area ;
                                 ;      50 
                                 ;      51 /* End address allocated by sbrk	*/
                                 ;      52 static _SBYTE *brk=(_SBYTE *)&heap_area;
                                 ;      53 
                                 ;      54 /**************************************************************************/
                                 ;      55 /*     sbrk:Memory area allocation                                        */
                                 ;      56 /*          Return value:Start address of allocated area (Pass)           */
                                 ;      57 /*                       -1                              (Failure)        */
                                 ;      58 /**************************************************************************/
                                 ;      59 _SBYTE  *sbrk(size_t size)                      /* Assigned area size   */
                                             .glb        _sbrk
00000000                         _sbrk:                             ; function: sbrk
                                             .STACK      _sbrk=4
00000000                         L10:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\sbrk.c",63
                                 ;      60 {
                                 ;      61     _SBYTE  *p;
                                 ;      62 
                                 ;      63     if(brk+size > heap_area.heap+HEAPSIZE){     /* Empty area size      */
00000000 FB22rrrrrrrr                        MOV.L       #__$brk,R2
00000006 EC23                                MOV.L       [R2],R3
00000008 FB52rrrrrrrr                        MOV.L       #__$heap_area+0400H,R5
0000000E FF2413                              ADD         R1,R3,R4
00000011 FB16FF                              MOV.L       #0FFFFFFFFH,R1
00000014 4754                                CMP         R5,R4
00000016 24rr                                BGTU        L12
00000018                         L11:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\sbrk.c",67
                                 ;      64         p = (_SBYTE *)-1;
                                 ;      65     }
                                 ;      66     else {
                                 ;      67         p = brk;                                /* Area assignment      */
00000018 EF31                                MOV.L       R3,R1
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\sbrk.c",68
                                 ;      68         brk += size;                            /* End address update   */
0000001A E324                                MOV.L       R4,[R2]
0000001C                         L12:
0000001C 02                                  RTS
                                 ;      69     }
                                 ;      70     return p;
                                 ;      71 }
                                 ;      72 
                                             .SECTION    D,ROMDATA,ALIGN=4
00000000                         __$brk:                            ; static: __$brk
00000000 rrrrrrrr                            .lword      __$heap_area
                                             .SECTION    B,DATA,ALIGN=4
00000000                         __$heap_area:                      ; static: __$heap_area
00000000(00000400H)                          .blkl       256
                                             .END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     02210   LINES

Section List

Attr         Size               Name
CODE     0000000029(0000001DH)  P
ROMDATA  0000000004(00000004H)  D
DATA     0000001024(00000400H)  B

Cpu Type

-CPU=RX600

Command Parameter

-output=C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\Debug\sbrk.obj
-nologo
-cpu=rx600
-debug
-listfile=C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\Debug\sbrk.lst
