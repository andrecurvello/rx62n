* RX FAMILY ASSEMBLER V.1.02.00.000 *  SOURCE LIST  Sun Nov 10 22:46:20 2013

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V.1.02.00.000)  10-Nov-2013 22:46:1
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-CPU=RX600
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=C:\Users\Sandesh\AppData\Local\Temp\ome2199\api_demo.src
                                 ;-nologo
                                 ;-cpu=rx600
                                 ;-lang=c99
                                 ;-include=C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\..\src
                                 ;-define=NOT_USE_CAN_POLL=1,NOT_DEBUG=1
                                 ;-debug
                                 ;-show=source
                                 ;C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c
                                 
                                 ;C LABEL    INSTRUCTION OPERAND    COMMENT
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                             .SECTION    P,CODE
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",168
                                 ;       1 /******************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 
                                 ;       4 * This software is supplied by Renesas Electronics Corp. and is only 
                                 ;       5 * intended for use with Renesas products. No other uses are authorized.
                                 ;       6 
                                 ;       7 
                                 ;       8 * This software is owned by Renesas Electronics Corp. and is protected under 
                                 ;       9 * all applicable laws, including copyright laws.
                                 ;      10 
                                 ;      11 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES 
                                 ;      12 * REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, 
                                 ;      13 * INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
                                 ;      14 * PARTICULAR PURPOSE AND NON-INFRINGEMENT.	ALL SUCH WARRANTIES ARE EXPRESSLY 
                                 ;      15 * DISCLAIMED.
                                 ;      16 
                                 ;      17 * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS 
                                 ;      18 * ELECTRONICS CORP. NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
                                 ;      19 * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES 
                                 ;      20 * FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS 
                                 ;      21 * AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      22 
                                 ;      23 * Renesas reserves the right, without notice, to make changes to this 
                                 ;      24 * software and to discontinue the availability of this software.	
                                 ;      25 * By using this software, you agree to the additional terms and 
                                 ;      26 * conditions found by accessing the following link:
                                 ;      27 * http://www.renesas.com/disclaimer
                                 ;      28 ******************************************************************************
                                 ;      29 * Copyright (C) 2010. Renesas Electronics Corp., All Rights Reserved.
                                 ;      30 ******************************************************************************
                                 ;      31 * File Name		API_DEMO.C
                                 ;      32 * Version		1.00
                                 ;      33 * Tool-Chain	RX Standard Toolchain 1.0.0.0
                                 ;      34 * Platform		YRDKRX62N.
                                 ;      35 * Description	Demo application program
                                 ;      36 
                                 ;      37 				CAN Buadrate: 500 kbps.
                                 ;      38 
                                 ;      39 				Demonstration of CAN receive and transmit using the CAN API.
                                 ;      40 				
                                 ;      41 				The demo can be run in three ways:
                                 ;      42 				1) Program two boards and connect them together over the CAN 
                                 ;      43 					bus.
                                 ;      44 				2) With CANPORT_TEST_1_INT_LOOPBACK used in the R_CAN_PortSet
                                 ;      45 					API you can communicate internally, no external bus needed!
                                 ;      46 				3) Use a CAN bus monitor, e.g. SysTec's low-cost monitor 
                                 ;      47 					3204000, to send and receive frames to/from the demo. 
                                 ;      48 					Remote frames can also be demonstrated if CAN interrupts 
                                 ;      49 					are enabled. See last paragraph below.
                                 ;      50 
                                 ;      51 				OPERATION:
                                 ;      52 				The demo transmits and receives frames with CAN-ID 1 by 
                                 ;      53 				default. The default demo CAN-ID value is set in api_demo.h by 
                                 ;      54 				TX_ID_DEFAULT.
                                 ;      55 				
                                 ;      56 				The software starts up by immediately sending ten test frames. 
                                 ;      57 				This has two purposes, to check the link and to demonstrate 
                                 ;      58 				how messages are sent back-to-back as quickly as possible.
                                 ;      59 				
                                 ;      60 				Press SW1 to send one CAN frame. The frame will be received 
                                 ;      61 				and displayed by the other RDK as long as that board's receive
                                 ;      62 				ID (RxID) matches the sending boards transmit ID (TxID).
                                 ;      63 				
                                 ;      64 				Press SW2 to display the current demo TxID on the LCD. To inc-
                                 ;      65 				rement the TxID hold SW2 down and press SW3. The actual send 
                                 ;      66 				command is invoked by the Sw1Func function.
                                 ;      67 
                                 ;      68 				Press SW3 to display current demo RxID on the LCD. To change 
                                 ;      69 				RxID hold SW3 down and press SW2.
                                 ;      70 
                                 ;      71 				By default, polled CAN is used. To use the CAN interrupts for 
                                 ;      72 				faster processing, uncomment USE_CAN_POLL in file 
                                 ;      73 				config_r_can_rapi.h.
                                 ;      74 
                                 ;      75 				REMOTE frames:
                                 ;      76 				Besides demonstrating Tx and Rx of Standard CAN frames, the 
                                 ;      77 				demo will also send remote frame responses for CAN-ID 50h 
                                 ;      78 				remote frame requests. Remote frames demo is only done in 
                                 ;      79 				interrupt mode; with USE_CAN_POLL commented in the CAN API 
                                 ;      80 				config file. Remote requests are not sent by this demo as it 
                                 ;      81 				is, and so must come from an outside source, e.g. the CAN 
                                 ;      82 				monitor mentioned above.
                                 ;      83 				
                                 ;      84 * Limitations	-
                                 ;      85 ******************************************************************************
                                 ;      86 * History
                                 ;      87 * Mar 22 '10	RTA-CSS		For RX62N with new CAN API on 62N Eval Board.
                                 ;      88 * Apr 15 '10	RTA-CSS		Improvements when using R_CAN_PortSet test modes.
                                 ;      89 * Jul 13 '10	RTA-CSS		For RDK.
                                 ;      90 *******************************************************************************/
                                 ;      91 //Set TAB = 4 spaces
                                 ;      92 
                                 ;      93 /******************************************************************************
                                 ;      94 Includes	<System Includes> , "Project Includes"
                                 ;      95 ******************************************************************************/
                                 ;      96 #include <machine.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 #ifndef _MACHINE
                                 ;       8 #define _MACHINE
                                 ;       9 #include <macro.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 #ifndef _MACRO
                                 ;       8 #define _MACRO
                                 ;       9 
                                 ;      10 #ifdef __RX
                                 ;      11 
                                 ;      12 #ifndef _NO_MT
                                 ;      13 #define _NO_MT
                                 ;      14 #endif /* !_NO_MT */
                                 ;      15 
                                 ;      16 #ifdef __STDC_VERSION__
                                 ;      17 #if 199901L <= __STDC_VERSION__
                                 ;      18 #define _C99
                                 ;      19 #endif /* 199901L <= __STDC_VERSION__ */
                                 ;      20 #endif /* __STDC_VERSION__ */
                                 ;      21 
                                 ;      22 #ifndef _HAS_TR1
                                 ;      23 #define _HAS_TR1 0
                                 ;      24 #endif /* !_HAS_TR1 */
                                 ;      25 
                                 ;      26 #ifndef __STDC_WANT_LIB_EXT1__
                                 ;      27 #define __STDC_WANT_LIB_EXT1__ 0
                                 ;      28 #endif /* !__STDC_WANT_LIB_EXT1 */
                                 ;      29 
                                 ;      30 #ifndef _ADDED_C_LIB
                                 ;      31 #define _ADDED_C_LIB 0
                                 ;      32 #endif /* !_ADDED_C_LIB */
                                 ;      33 
                                 ;      34 #ifndef __STDC_WANT_SAFER_LIB__
                                 ;      35 #define __STDC_WANT_SAFER_LIB__ 0
                                 ;      36 #endif /* !__STDC_WANT_SAFER_LIB__ */
                                 ;      37 
                                 ;      38 #ifndef _ALT_NS
                                 ;      39 #define _ALT_NS 0
                                 ;      40 #endif /* !_ALT_NS */
                                 ;      41 
                                 ;      42 #ifdef __cplusplus
                                 ;      43 
                                 ;      44 #ifndef _C99
                                 ;      45 #define _C99
                                 ;      46 #endif /* !_C99*/ 
                                 ;      47 
                                 ;      48 #endif /* __cplusplus */
                                 ;      49 
                                 ;      50 #ifdef __embedded_cplusplus
                                 ;      51 
                                 ;      52 #ifndef _NO_NS
                                 ;      53 #define _NO_NS
                                 ;      54 #endif /* !_NO_NS */
                                 ;      55 
                                 ;      56 #ifndef _ECPP
                                 ;      57 #define _ECPP
                                 ;      58 #endif /* !_ECPP */
                                 ;      59 
                                 ;      60 #endif /* __embedded_cplusplus */
                                 ;      61 
                                 ;      62 #ifdef _REENTRANT
                                 ;      63 
                                 ;      64 #ifndef _R_REENT
                                 ;      65 #define _R_REENT
                                 ;      66 #endif /* !_R_REENT */
                                 ;      67 
                                 ;      68 #endif /* _REENTRANT */
                                 ;      69 
                                 ;      70 #endif /* __RX */
                                 ;      71 
                                 ;      72 #endif /* _MACRO */
                                 ;      10 
                                 ;      11 #include <builtin.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 #ifndef _BUILTIN
                                 ;       8 #define _BUILTIN
                                 ;       9 #include <macro.h>
                                 ;      10 
                                 ;      11 #ifdef __cplusplus
                                 ;      12 extern "C" {
                                 ;      13 #endif
                                 ;      14 
                                 ;      15 /* follow machine.h */
                                 ;      16 extern signed long    _builtin_max(signed long, signed long);
                                 ;      17 extern signed long    _builtin_min(signed long, signed long);
                                 ;      18 extern unsigned long  _builtin_revl(unsigned long);
                                 ;      19 extern unsigned long  _builtin_revw(unsigned long);
                                 ;      20 extern void           _builtin_xchg(signed long *, signed long *);
                                 ;      21 extern long long      _builtin_rmpab(long long, unsigned long, signed char *, signed char *);
                                 ;      22 extern long long      _builtin_rmpaw(long long, unsigned long, short *, short *);
                                 ;      23 extern long long      _builtin_rmpal(long long, unsigned long, long *, long *);
                                 ;      24 extern unsigned long  _builtin_rolc(unsigned long);
                                 ;      25 extern unsigned long  _builtin_rorc(unsigned long);
                                 ;      26 extern unsigned long  _builtin_rotl(unsigned long, unsigned long);
                                 ;      27 extern unsigned long  _builtin_rotr(unsigned long, unsigned long);
                                 ;      28 extern void           _builtin_brk(void);
                                 ;      29 extern void           _builtin_int_exception(signed long);
                                 ;      30 extern void           _builtin_wait(void);
                                 ;      31 extern void           _builtin_nop(void);
                                 ;      32 extern void           _builtin_set_ipl(signed long);
                                 ;      33 extern unsigned char  _builtin_get_ipl(void);
                                 ;      34 extern void           _builtin_set_psw(unsigned long);
                                 ;      35 extern unsigned long  _builtin_get_psw(void);
                                 ;      36 extern void           _builtin_set_fpsw(unsigned long);
                                 ;      37 extern unsigned long  _builtin_get_fpsw(void);
                                 ;      38 extern void           _builtin_set_usp(void *);
                                 ;      39 extern void *         _builtin_get_usp(void);
                                 ;      40 extern void           _builtin_set_isp(void *);
                                 ;      41 extern void *         _builtin_get_isp(void);
                                 ;      42 extern void           _builtin_set_intb(void *);
                                 ;      43 extern void *         _builtin_get_intb(void);
                                 ;      44 extern void           _builtin_set_bpsw(unsigned long);
                                 ;      45 extern unsigned long  _builtin_get_bpsw(void);
                                 ;      46 extern void           _builtin_set_bpc(void *);
                                 ;      47 extern void *         _builtin_get_bpc(void);
                                 ;      48 extern void           _builtin_set_fintv(void *);
                                 ;      49 extern void *         _builtin_get_fintv(void);
                                 ;      50 extern signed long long   _builtin_emul(signed long, signed long);
                                 ;      51 extern unsigned long long _builtin_emulu(unsigned long, unsigned long);
                                 ;      52 extern short          _builtin_macw1(short *, short *, unsigned long);
                                 ;      53 extern short          _builtin_macw2(short *, short *, unsigned long);
                                 ;      54 extern long           _builtin_macl(short *, short *, unsigned long);
                                 ;      55 extern void           _builtin_chg_pmusr(void);
                                 ;      56 extern void             _builtin_set_acc(signed long long data);
                                 ;      57 extern signed long long _builtin_get_acc(void);
                                 ;      58 extern void           _builtin_setpsw_i(void);
                                 ;      59 extern void           _builtin_clrpsw_i(void);
                                 ;      60 
                                 ;      61 #ifdef __cplusplus
                                 ;      62 }
                                 ;      63 #endif /* #ifdef __cplusplus */
                                 ;      64 
                                 ;      65 #endif /* #ifndef _BUILTIN */
                                 ;      12 
                                 ;      13 #define max(data1, data2)                _builtin_max(data1, data2)
                                 ;      14 #define min(data1, data2)                _builtin_min(data1, data2)
                                 ;      15 #define revl(data)                       _builtin_revl(data)
                                 ;      16 #define revw(data)                       _builtin_revw(data)
                                 ;      17 #define xchg(data1, data2)               _builtin_xchg(data1, data2)
                                 ;      18 #define rmpab(init, count, addr1, addr2) _builtin_rmpab(init, count, addr1, addr2)
                                 ;      19 #define rmpaw(init, count, addr1, addr2) _builtin_rmpaw(init, count, addr1, addr2)
                                 ;      20 #define rmpal(init, count, addr1, addr2) _builtin_rmpal(init, count, addr1, addr2)
                                 ;      21 #define rolc(data)                       _builtin_rolc(data)
                                 ;      22 #define rorc(data)                       _builtin_rorc(data)
                                 ;      23 #define rotl(data, num)                  _builtin_rotl(data, num)
                                 ;      24 #define rotr(data, num)                  _builtin_rotr(data, num)
                                 ;      25 #define brk()                            _builtin_brk()
                                 ;      26 #define int_exception(num)               _builtin_int_exception(num)
                                 ;      27 #define wait()                           _builtin_wait()
                                 ;      28 #define nop()                            _builtin_nop()
                                 ;      29 #define set_ipl(level)                   _builtin_set_ipl(level)
                                 ;      30 #define get_ipl()                        _builtin_get_ipl()
                                 ;      31 #define set_psw(data)                    _builtin_set_psw(data)
                                 ;      32 #define get_psw()                        _builtin_get_psw()
                                 ;      33 #define set_fpsw(data)                   _builtin_set_fpsw(data)
                                 ;      34 #define get_fpsw()                       _builtin_get_fpsw()
                                 ;      35 #define set_usp(data)                    _builtin_set_usp(data)
                                 ;      36 #define get_usp()                        _builtin_get_usp()
                                 ;      37 #define set_isp(data)                    _builtin_set_isp(data)
                                 ;      38 #define get_isp()                        _builtin_get_isp()
                                 ;      39 #define set_intb(data)                   _builtin_set_intb(data)
                                 ;      40 #define get_intb()                       _builtin_get_intb()
                                 ;      41 #define set_bpsw(data)                   _builtin_set_bpsw(data)
                                 ;      42 #define get_bpsw()                       _builtin_get_bpsw()
                                 ;      43 #define set_bpc(data)                    _builtin_set_bpc(data)
                                 ;      44 #define get_bpc()                        _builtin_get_bpc()
                                 ;      45 #define set_fintv(data)                  _builtin_set_fintv(data)
                                 ;      46 #define get_fintv()                      _builtin_get_fintv()
                                 ;      47 #define emul(data1, data2)               _builtin_emul(data1, data2)
                                 ;      48 #define emulu(data1, data2)              _builtin_emulu(data1, data2)
                                 ;      49 #define macw1(data1, data2, count)       _builtin_macw1(data1, data2, count)
                                 ;      50 #define macw2(data1, data2, count)       _builtin_macw2(data1, data2, count)
                                 ;      51 #define macl(data1, data2, count)        _builtin_macl(data1, data2, count)
                                 ;      52 #define chg_pmusr()                      _builtin_chg_pmusr()
                                 ;      53 #define set_acc(data)                    _builtin_set_acc(data)
                                 ;      54 #define get_acc()                        _builtin_get_acc()
                                 ;      55 #define setpsw_i()                       _builtin_setpsw_i()
                                 ;      56 #define clrpsw_i()                       _builtin_clrpsw_i()
                                 ;      57 
                                 ;      58 #endif
                                 ;      97 #include "hwsetup.h"
                                 ;       1 #ifndef HWSETUP_H_INCLUDED
                                 ;       2 #define HWSETUP_H_INCLUDED
                                 ;       3 
                                 ;       4 /***********************************************************************************
                                 ;       5 FILE NAME  		HWSETUP.H
                                 ;       6 
                                 ;       7 DESCRIPTION		Hardware Setup
                                 ;       8 
                                 ;       9 Copyright   : 2010 Renesas Electronics Europe Ltd.
                                 ;      10 Copyright   : 2010 Renesas Electronics Corporation.
                                 ;      11 All Rights Reserved
                                 ;      12 ***********************************************************************************/
                                 ;      13 
                                 ;      14 /***********************************************************************************
                                 ;      15 Revision History
                                 ;      16 Date        OSO-UID     Description
                                 ;      17 Nov 1 '08   RTA-CSS     For CAN-D-Kit version 3.00.
                                 ;      18 ***********************************************************************************/
                                 ;      19 
                                 ;      20 /***********************************************************************************
                                 ;      21 Function Prototypes
                                 ;      22 ***********************************************************************************/
                                 ;      23 void _init(void);
                                 ;      24 void HardwareSetup(void);
                                 ;      25 
                                 ;      26 #endif /* HWSETUP_H_INCLUDED */
                                 ;      98 #include "api_demo.h"
                                 ;       1 /******************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * Please refer to http://www.renesas.com/disclaimer
                                 ;       4 ******************************************************************************
                                 ;       5   Copyright (C) 2010. Renesas Electronics Corp., All Rights Reserved.
                                 ;       6 *******************************************************************************
                                 ;       7 * File Name    : API_DEMO.H
                                 ;       8 * Version      : 1.00
                                 ;       9 * Description  : 
                                 ;      10 ******************************************************************************
                                 ;      11 * History
                                 ;      12 * Mar 22 '10  RTA-CSS  	For RX62N with new CAN API.
                                 ;      13 ******************************************************************************/
                                 ;      14 
                                 ;      15 #ifndef API_DEMO_H
                                 ;      16 #define API_DEMO_H
                                 ;      17 
                                 ;      18 /******************************************************************************
                                 ;      19 Includes   <System Includes> , "Project Includes"
                                 ;      20 ******************************************************************************/
                                 ;      21 #include "r_can_api.h"
                                 ;       1 /******************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * Please refer to http://www.renesas.com/disclaimer
                                 ;       4 ******************************************************************************
                                 ;       5   Copyright (C) 2010. Renesas Electronics Corp., All Rights Reserved.
                                 ;       6 *******************************************************************************
                                 ;       7 * File Name    : R_CAN_API.H
                                 ;       8 * Version      : 1.00
                                 ;       9 * Description  : 
                                 ;      10 ******************************************************************************
                                 ;      11 * History
                                 ;      12 * Mar 22 '10  REA	For RX62N with new CAN API.
                                 ;      13 * Apr 15 '10  REA	R_CAN_Control 'Enter Sleep' added.
                                 ;      14 					R_CAN_TxStopMsg added.
                                 ;      15 ******************************************************************************/
                                 ;      16 
                                 ;      17 #ifndef R_CAN_API_H
                                 ;      18 #define R_CAN_API_H
                                 ;      19 
                                 ;      20 /******************************************************************************
                                 ;      21 Includes   <System Includes> , "Project Includes"
                                 ;      22 ******************************************************************************/
                                 ;      23 #include "stdint.h"
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /* stdint.h standard header */
                                 ;       8 #ifndef _STDINT
                                 ;       9 #define _STDINT
                                 ;      10 #include <macro.h>
                                 ;      11 #ifndef _YVALS
                                 ;      12 #include <sys/yvals.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 /* yvals.h values header for conforming compilers on various systems */
                                 ;       7 #include <macro.h>
                                 ;       8 
                                 ;       9 #ifndef _YVALS
                                 ;      10 #define _YVALS
                                 ;      11 
                                 ;      12 #define _CPPLIB_VER	503
                                 ;      13 
                                 ;      14 /* You can predefine (on the compile command line, for example):
                                 ;      15 
                                 ;      16 _ADDED_C_LIB=0 -- to omit declarations for C extensions
                                 ;      17 _ALT_NS=1 -- to use namespace _Dinkum_std for C++
                                 ;      18 _ALT_NS=2 -- to use namespace _Dinkum_std for C++ and C
                                 ;      19 _ALT_NS=3 -- to use namespace _Dinkum_std for C++ and _Dinkum_std_c for C
                                 ;      20 _C_AS_CPP -- to compile C library as C++
                                 ;      21 _C_IN_NS -- to define C names in std/_Dinkum_std instead of global namespace
                                 ;      22 _C99 -- to turn ON C99 library support
                                 ;      23 _ABRCPP -- to turn ON Abridged C++ dialect (implies _ECPP)
                                 ;      24 _ECPP -- to turn ON Embedded C++ dialect
                                 ;      25 _HAS_FIXED_POINT=0 -- to turn OFF fixed-point extensions (if present)
                                 ;      26 _HAS_IMMUTABLE_SETS=1 -- to permit alterable set elements
                                 ;      27 _HAS_STRICT_CONFORMANCE=1 -- to to disable nonconforming extensions
                                 ;      28 _HAS_TRADITIONAL_IOSTREAMS=0 -- to omit old iostreams functions
                                 ;      29 _HAS_TRADITIONAL_ITERATORS=1 -- for vector/string pointer iterators
                                 ;      30 _HAS_TRADITIONAL_POS_TYPE=1 -- for streampos same as streamoff
                                 ;      31 _HAS_TRADITIONAL_STL=0 -- to turn OFF old STL functions
                                 ;      32 _HAS_TR1=0 -- to turn OFF TR1 extensions (if present)
                                 ;      33 _NO_EX -- to turn OFF use of try/throw
                                 ;      34 _NO_MT -- to turn OFF thread synchronization
                                 ;      35 _NO_NS -- to turn OFF use of namespace declarations
                                 ;      36 _STL_DB (or _STLP_DEBUG) -- to turn ON iterator/range debugging
                                 ;      37 _USE_EXISTING_SYSTEM_NAMES=0 -- to disable mappings (_Open to open)
                                 ;      38 __NO_LONG_LONG -- to define _Longlong as long, not long long
                                 ;      39 
                                 ;      40 You can change (in this header AND ALL ITS COPIES):
                                 ;      41 
                                 ;      42 _COMPILER_TLS -- from 0 to 1 if _TLS_QUAL is not nil
                                 ;      43 _EXFAIL -- from 1 to any nonzero value for EXIT_FAILURE
                                 ;      44 _FILE_OP_LOCKS -- from 0 to 1 for file atomic locks
                                 ;      45 _GLOBAL_LOCALE -- from 0 to 1 for shared locales instead of per-thread
                                 ;      46 _IOSTREAM_OP_LOCKS -- from 0 to 1 for iostream atomic locks
                                 ;      47 _TLS_QUAL -- from nil to compiler TLS qualifier, such as __declspec(thread)
                                 ;      48 __STDC_WANT_LIB_EXT1__ -- from 1 to 0 to disable C library extension 1
                                 ;      49 
                                 ;      50 Include directories needed to compile with Dinkum C:
                                 ;      51 
                                 ;      52 C -- include/c
                                 ;      53 C99 -- include/c (define _C99)
                                 ;      54 Embedded C++ -- include/c include/embedded (define _ECPP)
                                 ;      55 Abridged C++ -- include/c include/embedded include (define _ABRCPP)
                                 ;      56 Standard C++ -- include/c include
                                 ;      57 Standard C++ with export -- include/c include/export include
                                 ;      58 	(--export --template_dir=lib/export)
                                 ;      59 
                                 ;      60 Include directories needed to compile with native C:
                                 ;      61 
                                 ;      62 C -- none
                                 ;      63 C99 -- N/A
                                 ;      64 Embedded C++ -- include/embedded (define _ECPP)
                                 ;      65 Abridged C++ -- include/embedded include (define _ABRCPP)
                                 ;      66 Standard C++ -- include
                                 ;      67 Standard C++ with export -- include/export include
                                 ;      68 	(--export --template_dir=lib/export)
                                 ;      69  */
                                 ;      70 
                                 ;      71  #ifndef __STDC_HOSTED__
                                 ;      72   #define __STDC_HOSTED__	1
                                 ;      73  #endif /* __STDC_HOSTED__ */
                                 ;      74 
                                 ;      75  #ifndef __STDC_IEC_559__
                                 ;      76   #define __STDC_IEC_559__	1
                                 ;      77  #endif /* __STDC_IEC_559__ */
                                 ;      78 
                                 ;      79  #ifndef __STDC_IEC_559_COMPLEX__
                                 ;      80   #define __STDC_IEC_559_COMPLEX__	1
                                 ;      81  #endif /* __STDC_IEC_559_COMPLEX__ */
                                 ;      82 
                                 ;      83  #ifndef __STDC_ISO_10646__
                                 ;      84   #define __STDC_ISO_10646__	200009L	/* match glibc */
                                 ;      85  #endif /* __STDC_ISO_10646__ */
                                 ;      86 
                                 ;      87  #ifndef __STDC_LIB_EXT1__
                                 ;      88   #define __STDC_LIB_EXT1__	200509L
                                 ;      89  #endif /* __STDC_LIB_EXT1__ */
                                 ;      90 
                                 ;      91  #ifndef __STDC_WANT_LIB_EXT1__
                                 ;      92   #define __STDC_WANT_LIB_EXT1__	1
                                 ;      93  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;      94 
                                 ;      95 		/* DETERMINE MACHINE TYPE */
                                 ;      96 
                                 ;      98  #if defined(i386) || defined(__i386) \
                                 ;      98 	|| defined(__i386__) || defined(_M_IX86)	/* Pentium */
                                 ;      99   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     100 
                                 ;     101   #if defined(_M_IX86)
                                 ;     102    #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     103    #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     104    #define _LOFF	4	/* 64 long double bits */
                                 ;     105 
                                 ;     106   #else /* unknown compilation environment, guess 80-bit long double */
                                 ;     107    #define _DLONG	1	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     108    #define _LBIAS	0x3ffe	/* 80/128 long double bits */
                                 ;     109    #define _LOFF	15	/* 80/128 long double bits */
                                 ;     110   #endif /* defined(_M_IX86) */
                                 ;     111 
                                 ;     112   #define _FPP_TYPE	_FPP_X86	/* Pentium FPP */
                                 ;     113 
                                 ;     114  #elif defined(sparc) || defined(__sparc)	/* SPARC */
                                 ;     115 
                                 ;     116   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     117   #define _DLONG	2	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     118   #define _LBIAS	0x3ffe	/* 80/128 long double bits */
                                 ;     119   #define _LOFF		15	/* 80/128 long double bits */
                                 ;     120   #define _FPP_TYPE	_FPP_SPARC	/* SPARC FPP */
                                 ;     121 
                                 ;     123  #elif defined(_MIPS) || defined(_MIPS_) \
                                 ;     123 	|| defined(__mips) || defined(_M_MRX000)		/* MIPS */
                                 ;     124 
                                 ;     125   #if defined(__LITTLE_ENDIAN__) || defined(__MIPSEL)
                                 ;     126    #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     127 
                                 ;     128   #else /* __LITTLE_ENDIAN__ etc. */
                                 ;     129    #define _D0		0
                                 ;     130   #endif /* __LITTLE_ENDIAN__ etc. */
                                 ;     131 
                                 ;     132   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     133   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     134   #define _LOFF		4	/* 64 long double bits */
                                 ;     135   #define _FPP_TYPE	_FPP_MIPS	/* MIPS FPP */
                                 ;     136 
                                 ;     137  #if !defined(_MACH_PDT)
                                 ;     138   #define _MACH_PDT	long
                                 ;     139   #define _MACH_SZT	unsigned long
                                 ;     140  #endif /* defined(_MACH_PDT) */
                                 ;     141 
                                 ;     142  #elif defined(__s390__)	/* IBM S/390 */
                                 ;     143   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     144   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     145   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     146   #define _LOFF		4	/* 64 long double bits */
                                 ;     147   #define _FPP_TYPE	_FPP_S390	/* S/390 FPP */
                                 ;     148 
                                 ;     149   #define _MACH_PDT	long
                                 ;     150   #define _MACH_SZT	unsigned long
                                 ;     151 
                                 ;     152  #elif defined(__ppc__) || defined(_POWER) || defined(_M_PPC)	/* PowerPC */
                                 ;     153   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     154   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     155   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     156   #define _LOFF		4	/* 64 long double bits */
                                 ;     157   #define _FPP_TYPE	_FPP_PPC	/* PowerPC FPP */
                                 ;     158 
                                 ;     159  #elif defined(__hppa)	/* HP PA-RISC */
                                 ;     160   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     161   #define _DLONG	2	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     162   #define _LBIAS	0x3ffe	/* 80/128 long double bits */
                                 ;     163   #define _LOFF		15	/* 80/128 long double bits */
                                 ;     164   #define _FPP_TYPE	_FPP_HPPA	/* Hewlett-Packard PA-RISC FPP */
                                 ;     165 
                                 ;     166  #elif defined(_M_ALPHA)	/* Alpha */
                                 ;     167   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     168   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     169   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     170   #define _LOFF		4	/* 64 long double bits */
                                 ;     171   #define _FPP_TYPE	_FPP_ALPHA	/* Compaq Alpha */
                                 ;     172 
                                 ;     173  #elif defined(_ARM_) || defined(__arm)	/* ARM */
                                 ;     174 
                                 ;     175   #if defined(__BIG_ENDIAN__) || defined(__ARMEB__)
                                 ;     176    #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     177 
                                 ;     178   #else /* __BIG_ENDIAN__ etc. */
                                 ;     179    #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     180   #endif /* __BIG_ENDIAN__ etc. */
                                 ;     181 
                                 ;     182   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     183   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     184   #define _LOFF		4	/* 64 long double bits */
                                 ;     185   #define _FPP_TYPE	_FPP_ARM	/* ARM ARM FPP */
                                 ;     186 
                                 ;     187  #elif defined(_M68K)	/* Motorola 68K */
                                 ;     188   #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     189   #define _DLONG	1	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     190   #define _LBIAS	0x3ffe	/* 80/128 long double bits */
                                 ;     191   #define _LOFF		15	/* 80/128 long double bits */
                                 ;     192   #define _FPP_TYPE	_FPP_M68K	/* Motorola 68xxx FPP */
                                 ;     193 
                                 ;     194  #elif defined(_SH4_) || defined(__sh) || defined(__sh__)	/* SH4 */
                                 ;     195 
                                 ;     196   #if defined(__BIG_ENDIAN__) || defined(_SH4)
                                 ;     197    #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     198 
                                 ;     199   #else /* __BIG_ENDIAN__ etc. */
                                 ;     200    #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     201   #endif /* __BIG_ENDIAN__ etc. */
                                 ;     202 
                                 ;     203   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     204   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     205   #define _LOFF		4	/* 64 long double bits */
                                 ;     206   #define _FPP_TYPE	_FPP_SH4	/* Renesas SH4 FPP */
                                 ;     207 
                                 ;     208  #elif defined(_M_IA64)	/* IA64 */
                                 ;     209   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     210   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     211   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     212   #define _LOFF		4	/* 64 long double bits */
                                 ;     213   #define _FPP_TYPE	_FPP_IA64	/* Intel IA64 FPP */
                                 ;     214 
                                 ;     215  #elif defined(__x86_64) /* 64-Bit GCC */
                                 ;     216   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     217   #define _DLONG	1	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     218   #define _LBIAS	0x3ffe	/* 80/128 long double bits */	
                                 ;     219   #define _LOFF		15	/* 80/128 long double bits */
                                 ;     220   #define _FPP_TYPE	_FPP_X86	/* Pentium FPP */
                                 ;     221 
                                 ;     222  #elif defined(_M_X64) /* 64-Bit x86 VC++ */
                                 ;     223   #define _D0		3	/* 0: big endian, 3: little endian floating-point */
                                 ;     224   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     225   #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     226   #define _LOFF		4	/* 64 long double bits */
                                 ;     227   #define _FPP_TYPE	_FPP_WIN	/* Pentium FPP under Windows */
                                 ;     228 
                                 ;     229  #else /* unknown compilation environment, guess big-endian */
                                 ;     230    #if defined(__RX)
                                 ;     231      #define _MACH_PDT	long
                                 ;     232      #define _MACH_SZT	unsigned long
                                 ;     233     #if defined(__LIT)
                                 ;     234      #define _D0		3	/* little endian floating-point */
                                 ;     235     #else
                                 ;     236      #define _D0		0	/* big endian floating-point */
                                 ;     237     #endif
                                 ;     238 	#define _FPP_TYPE	_FPP_RX
                                 ;     239    #elif defined(_R_SHC)
                                 ;     240      #define _MACH_PDT	int
                                 ;     241      #define _MACH_SZT	unsigned long
                                 ;     242     #if defined(_LIT)
                                 ;     243      #define _D0		3	/* little endian */
                                 ;     244     #else
                                 ;     245      #define _D0		0	/* big endian */
                                 ;     246     #endif
                                 ;     247     #if defined(_SH2E) || defined(_SH2AFPU) || defined(_SH4) || defined(_SH4A)
                                 ;     248      #define _FPP_TYPE	_FPP_SH4
                                 ;     249     #endif
                                 ;     250    #elif defined(__H8__)
                                 ;     251     #if __DATA_ADDRESS_SIZE__ == 4
                                 ;     252      #define _MACH_PDT	long
                                 ;     253      #define _MACH_SZT	unsigned long
                                 ;     254     #else /* __DATA_ADDRESS_SIZE__ == 4 */
                                 ;     255      #define _MACH_PDT	int
                                 ;     256      #define _MACH_SZT	unsigned int
                                 ;     257     #endif /* __DATA_ADDRESS_SIZE__ == 4 */
                                 ;     258      #define _D0		0	/* big endian */
                                 ;     259    #elif defined(_R_M16C)
                                 ;     260     #if defined(__PTRDIFFT_16__)
                                 ;     261      #define _MACH_PDT	signed int
                                 ;     262     #else
                                 ;     263      #define _MACH_PDT	signed long
                                 ;     264     #endif
                                 ;     265     #if defined(__SIZET_16__)
                                 ;     266      #define _MACH_SZT	unsigned int
                                 ;     267     #else
                                 ;     268      #define _MACH_SZT	unsigned long
                                 ;     269     #endif
                                 ;     270      #define _D0	3	/* little endian */
                                 ;     271    #else /* __RX */
                                 ;     272     #define _D0		0	/* 0: big endian, 3: little endian floating-point */
                                 ;     273    #endif /* __RX */
                                 ;     274   #define _DLONG	0	/* 0: 64, 1: 80, 2: 128 long double bits */
                                 ;     275 
                                 ;     276   #if defined(__RX) && defined(__DBL4)
                                 ;     277     #define _LBIAS	0x7e	/* 32 long double bits */
                                 ;     278     #define _LOFF	    7	/* 32 long double bits */
                                 ;     279   #else /* defined(__RX) && defined(__DBL4) */
                                 ;     280     #define _LBIAS	0x3fe	/* 64 long double bits */
                                 ;     281     #define _LOFF		4	/* 64 long double bits */
                                 ;     282   #endif /* defined(__RX) && defined(__DBL4) */
                                 ;     283 
                                 ;     284  #endif /* system detector */
                                 ;     285 
                                 ;     286 		/* DETERMINE _Ptrdifft AND _Sizet FROM MACHINE TYPE */
                                 ;     287 
                                 ;     288  #if defined(_MACH_I32)
                                 ;     289 typedef _MACH_I32 _Int32t;
                                 ;     290 typedef unsigned _MACH_I32 _Uint32t;
                                 ;     291 
                                 ;     292  #else /* defined(_MACH_I32) */
                                 ;     293 typedef long _Int32t;
                                 ;     294 typedef unsigned long _Uint32t;
                                 ;     295  #endif /* defined(_MACH_I32) */
                                 ;     296 
                                 ;     297  #if defined(_LP64) || defined(__x86_64)
                                 ;     298 typedef long _Ptrdifft;
                                 ;     299 
                                 ;     300  #elif defined(_M_X64)
                                 ;     301 typedef __int64 _Ptrdifft;
                                 ;     302 
                                 ;     303  #elif defined(_MACH_PDT)
                                 ;     304 typedef _MACH_PDT _Ptrdifft;
                                 ;     305 
                                 ;     306  #else /* defined(_MACH_PDT) */
                                 ;     307 typedef int _Ptrdifft;
                                 ;     308  #endif /* defined(_LP64) */
                                 ;     309 
                                 ;     310  #if defined(_LP64) || defined(__x86_64)
                                 ;     311 typedef unsigned long _Sizet;
                                 ;     312 
                                 ;     313  #elif defined(_MACH_SZT)
                                 ;     314 typedef _MACH_SZT _Sizet;
                                 ;     315 
                                 ;     316  #else /* defined(_MACH_SZT) */
                                 ;     317 typedef unsigned int _Sizet;
                                 ;     318  #endif /* defined(_LP64) */
                                 ;     319 
                                 ;     320  #if defined(__x86_64)
                                 ;     321   #define _LLONG	1	/* 64-bit longs */
                                 ;     322   #define _RSIZE_MAX	((unsigned int)(-1) >> 1)
                                 ;     323 
                                 ;     324  #else /* defined(__x86_64) */
                                 ;     325   #define _LLONG	0	/* 32-bit longs */
                                 ;     326   #define _RSIZE_MAX	((_Sizet)(-1) >> 1)	/* or sizeof largest object */
                                 ;     327  #endif /* defined(__x86_64) */
                                 ;     328 
                                 ;     329  #if defined(__linux) || defined(__linux__)
                                 ;     330   #define _LINUX_C_LIB	1	/* Linux-specific conventions */
                                 ;     331  #endif /* defined(__linux) etc. */
                                 ;     332 
                                 ;     333   #define _HAS_POSIX_C_LIB	1	/* use common Unix/Linux conventions */
                                 ;     334 
                                 ;     335  #if !defined(_HAS_C9X) && defined(_C99)
                                 ;     336   #define _HAS_C9X	1
                                 ;     337  #else
                                 ;     338   #define _HAS_C9X	0
                                 ;     339  #endif /* !defined(_HAS_C9X) etc. */
                                 ;     340 
                                 ;     341  #if !defined(_ECPP) && defined(_ABRCPP)
                                 ;     342   #define _ECPP
                                 ;     343  #endif /* !defined(_ECPP) && defined(_ABRCPP) */
                                 ;     344 
                                 ;     345  #if _HAS_C9X && __EDG__ && !defined(__cplusplus)
                                 ;     346   #define _HAS_C9X_IMAGINARY_TYPE	1
                                 ;     347 
                                 ;     348  #else /* _HAS_C9X etc. */
                                 ;     349   #define _HAS_C9X_IMAGINARY_TYPE	0
                                 ;     350  #endif /* _HAS_C9X etc. */
                                 ;     351 
                                 ;     352  #if !defined(_IS_EMBEDDED) && defined(_ECPP)
                                 ;     353   #define _IS_EMBEDDED	1	/* 1 for Embedded C++ */
                                 ;     354  #else
                                 ;     355   #define _IS_EMBEDDED	0	/* 0 for Embedded C++ */
                                 ;     356  #endif /* _IS_EMBEDDED etc. */
                                 ;     357 
                                 ;     358  #ifndef __STDC_VERSION__
                                 ;     359 
                                 ;     360   #if _HAS_C9X
                                 ;     361    #define __STDC_VERSION__	199901L
                                 ;     362 
                                 ;     363   #else /* _HAS_C9X */
                                 ;     364     #define __STDC_VERSION__	199409L
                                 ;     365   #endif /* _HAS_C9X */
                                 ;     366 
                                 ;     367  #endif /* __STDC_VERSION__ */
                                 ;     368 
                                 ;     369 		/* EXCEPTION CONTROL */
                                 ;     370  #ifndef _HAS_EXCEPTIONS
                                 ;     371   #ifndef _NO_EX	/* don't simplify */
                                 ;     372    #define _HAS_EXCEPTIONS	1	/* 1 for try/throw logic */
                                 ;     373 
                                 ;     374   #else	/* _NO_EX */
                                 ;     375    #define _HAS_EXCEPTIONS	0
                                 ;     376   #endif /* _NO_EX */
                                 ;     377 
                                 ;     378  #endif /* _HAS_EXCEPTIONS */
                                 ;     379 
                                 ;     380 		/* NAMING PROPERTIES */
                                 ;     381 /* #define _STD_LINKAGE	define C names as extern "C++" */
                                 ;     382 /* #define _STD_USING	define C names in one of three namespaces */
                                 ;     383 
                                 ;     384  #ifndef _HAS_NAMESPACE
                                 ;     385   #ifndef _NO_NS	/* don't simplify */
                                 ;     386    #define _HAS_NAMESPACE	1	/* 1 for C++ names in std */
                                 ;     387 
                                 ;     388   #else	/* _NO_NS */
                                 ;     389    #define _HAS_NAMESPACE	0
                                 ;     390   #endif /* _NO_NS */
                                 ;     391 
                                 ;     392  #endif /* _HAS_NAMESPACE */
                                 ;     393 
                                 ;     395  #if !defined(_STD_USING) && defined(__cplusplus) \
                                 ;     395 	&& (defined(_C_IN_NS) || 1 < _ALT_NS)
                                 ;     396   #define _STD_USING	/* *.h headers export C names to global */
                                 ;     397 
                                 ;     398  #elif defined(_STD_USING) && !defined(__cplusplus)
                                 ;     399   #undef _STD_USING	/* define only for C++ */
                                 ;     400  #endif /* !defined(_STD_USING) */
                                 ;     401 
                                 ;     403  #if !defined(_HAS_STRICT_LINKAGE) \
                                 ;     403 	&& (__EDG__)
                                 ;     404 #ifdef __RX
                                 ;     405   #define _HAS_STRICT_LINKAGE	0	/* extern "C" in function type */
                                 ;     406 #else /* __RX */
                                 ;     407   #define _HAS_STRICT_LINKAGE	1	/* extern "C" in function type */
                                 ;     408 #endif /* __RX */
                                 ;     409  #endif /* !defined(_HAS_STRICT_LINKAGE) */
                                 ;     410 
                                 ;     411 		/* THREAD AND LOCALE CONTROL */
                                 ;     412  #ifndef _MULTI_THREAD
                                 ;     413 
                                 ;     414    #ifndef _NO_MT
                                 ;     415     #define _MULTI_THREAD	1	/* 0 for no thread locks */
                                 ;     416 
                                 ;     417    #else
                                 ;     418     #define _MULTI_THREAD	0
                                 ;     419    #endif	/* _NO_MT */
                                 ;     420 
                                 ;     421  #endif /* _MULTI_THREAD */
                                 ;     422 
                                 ;     423 #define _GLOBAL_LOCALE	0	/* 0 for per-thread locales, 1 for shared */
                                 ;     424 #define _FILE_OP_LOCKS	0	/* 0 for no FILE locks, 1 for atomic */
                                 ;     425 #define _IOSTREAM_OP_LOCKS	0	/* 0 for no iostream locks, 1 for atomic */
                                 ;     426 
                                 ;     427 		/* THREAD-LOCAL STORAGE */
                                 ;     428 #define _COMPILER_TLS	0	/* 1 if compiler supports TLS directly */
                                 ;     429 #define _TLS_QUAL	/* TLS qualifier, such as __declspec(thread), if any */
                                 ;     430 
                                 ;     431  #if !defined(_ADDED_C_LIB)
                                 ;     432   #define _ADDED_C_LIB	1	/* include declarations for C extensions */
                                 ;     433  #endif /* !defined(_ADDED_C_LIB) */
                                 ;     434 
                                 ;     435  #if !defined(_HAS_FIXED_POINT)
                                 ;     436   #define _HAS_FIXED_POINT	1	/* enable fixed-point extensions */
                                 ;     437  #endif /* !defined(_HAS_FIXED_POINT) */
                                 ;     438 
                                 ;     439  #if !defined(_HAS_IMMUTABLE_SETS)
                                 ;     440   #define _HAS_IMMUTABLE_SETS	1	/* disallow alterable set elements */
                                 ;     441  #endif /* !defined(_HAS_IMMUTABLE_SETS) */
                                 ;     442 
                                 ;     444  #if !defined(_HAS_ITERATOR_DEBUGGING) \
                                 ;     444 	&& (defined(_STL_DB) || defined(_STLP_DEBUG))
                                 ;     445   #define _HAS_ITERATOR_DEBUGGING	1	/* enable range checks, etc. */
                                 ;     446  #endif /* define _HAS_ITERATOR_DEBUGGING */
                                 ;     447 
                                 ;     448  #if !defined(_HAS_STRICT_CONFORMANCE)
                                 ;     449   #define _HAS_STRICT_CONFORMANCE	0	/* enable nonconforming extensions */
                                 ;     450  #endif /* !defined(_HAS_STRICT_CONFORMANCE) */
                                 ;     451 
                                 ;     452  #if !defined(_HAS_TRADITIONAL_IOSTREAMS)
                                 ;     453   #define _HAS_TRADITIONAL_IOSTREAMS	1	/* enable old iostreams stuff */
                                 ;     454  #endif /* !defined(_HAS_TRADITIONAL_IOSTREAMS) */
                                 ;     455 
                                 ;     456  #if !defined(_HAS_TRADITIONAL_ITERATORS)
                                 ;     457   #define _HAS_TRADITIONAL_ITERATORS	0	/* don't use pointer iterators */
                                 ;     458  #endif /* !defined(_HAS_TRADITIONAL_ITERATORS) */
                                 ;     459 
                                 ;     460  #if !defined(_HAS_TRADITIONAL_POS_TYPE)
                                 ;     461   #define _HAS_TRADITIONAL_POS_TYPE	0	/* make streampos same as streamoff */
                                 ;     462  #endif /* !defined(_HAS_TRADITIONAL_POS_TYPE) */
                                 ;     463 
                                 ;     464  #if !defined(_HAS_TRADITIONAL_STL)
                                 ;     465   #define _HAS_TRADITIONAL_STL	1	/* enable older STL extensions */
                                 ;     466  #endif /* !defined(_HAS_TRADITIONAL_STL) */
                                 ;     467 
                                 ;     468  #if !defined(_HAS_TR1)
                                 ;     469   #define _HAS_TR1	(!_IS_EMBEDDED)	/* enable TR1 extensions */
                                 ;     470  #endif /* !defined(_HAS_TR1) */
                                 ;     471 
                                 ;     472 #define _HAS_TR1_DECLARATIONS	_HAS_TR1
                                 ;     473 
                                 ;     474  #if !defined(_USE_EXISTING_SYSTEM_NAMES)
                                 ;     475   #define _USE_EXISTING_SYSTEM_NAMES	1	/* _Open => open, etc.  */
                                 ;     476  #endif /* !defined(_USE_EXISTING_SYSTEM_NAMES) */
                                 ;     477 
                                 ;     478  #if __STDC_WANT_SAFER_LIB__
                                 ;     479   #define __STDC_SAFER_LIB__	200510L
                                 ;     480  #endif /* __STDC_WANT_SAFER_LIB__ */
                                 ;     481 
                                 ;     482 
                                 ;     483 		/* NAMESPACE CONTROL */
                                 ;     484 
                                 ;     485  #if defined(__cplusplus)
                                 ;     486 
                                 ;     487  #if _HAS_NAMESPACE
                                 ;     488 namespace std {}
                                 ;     489 
                                 ;     490  #if defined(_C_AS_CPP)
                                 ;     491   #define _NO_CPP_INLINES	/* just for compiling C library as C++ */
                                 ;     492  #endif /* _C_AS_CPP */
                                 ;     493 
                                 ;     494  #if 0 < _ALT_NS
                                 ;     495 
                                 ;     496   #if defined(_C_AS_CPP)	/* define library in _Dinkum_std */
                                 ;     497    #define _STD_BEGIN	namespace _Dinkum_std {_C_LIB_DECL
                                 ;     498    #define _STD_END		_END_C_LIB_DECL }
                                 ;     499 
                                 ;     500   #else /* _C_AS_CPP */
                                 ;     501    #define _STD_BEGIN	namespace _Dinkum_std {
                                 ;     502    #define _STD_END		}
                                 ;     503   #endif /* _C_AS_CPP */
                                 ;     504 
                                 ;     505   #if _ALT_NS == 1	/* define C library in global namespace */
                                 ;     506     #define _C_STD_BEGIN
                                 ;     507     #define _C_STD_END
                                 ;     508     #define _CSTD		::
                                 ;     509     #define _STD			::_Dinkum_std::
                                 ;     510 
                                 ;     511   #elif _ALT_NS == 2	/* define both C and C++ in namespace _Dinkum_std */
                                 ;     512     #define _C_STD_BEGIN	namespace _Dinkum_std {
                                 ;     513     #define _C_STD_END	}
                                 ;     514     #define _CSTD		::_Dinkum_std::
                                 ;     515     #define _STD			::_Dinkum_std::
                                 ;     516 
                                 ;     517   #else	/* define C in namespace _Dinkum_std_c and C++ in _Dinkum_std */
                                 ;     518     #define _C_STD_BEGIN	namespace _Dinkum_std_c {
                                 ;     519     #define _C_STD_END	}
                                 ;     520     #define _CSTD		::_Dinkum_std_c::
                                 ;     521     #define _STD			::_Dinkum_std::
                                 ;     522   #endif /* _ALT_NS */
                                 ;     523 
                                 ;     524 namespace _Dinkum_std {}
                                 ;     525 namespace _Dinkum_std_c {}
                                 ;     526 namespace std {
                                 ;     527 	using namespace _Dinkum_std;
                                 ;     528 	using namespace _Dinkum_std_c;
                                 ;     529 	}
                                 ;     530 
                                 ;     531  #elif defined(_STD_USING)
                                 ;     532 
                                 ;     533   #if defined(_C_AS_CPP)	/* define library in std */
                                 ;     534    #define _STD_BEGIN	namespace std {_C_LIB_DECL
                                 ;     535    #define _STD_END		_END_C_LIB_DECL }
                                 ;     536 
                                 ;     537   #else /* _C_AS_CPP */
                                 ;     538    #define _STD_BEGIN	namespace std {
                                 ;     539    #define _STD_END		}
                                 ;     540   #endif /* _C_AS_CPP */
                                 ;     541 
                                 ;     542    #define _C_STD_BEGIN	namespace std {
                                 ;     543    #define _C_STD_END	}
                                 ;     544    #define _CSTD		::std::
                                 ;     545    #define _STD			::std::
                                 ;     546 
                                 ;     547  #else /* _ALT_NS == 0 && !defined(_STD_USING) */
                                 ;     548 
                                 ;     549   #if defined(_C_AS_CPP)	/* define C++ library in std, C in global */
                                 ;     550    #define _STD_BEGIN	_C_LIB_DECL
                                 ;     551    #define _STD_END		_END_C_LIB_DECL
                                 ;     552 
                                 ;     553   #else /* _C_AS_CPP */
                                 ;     554    #define _STD_BEGIN	namespace std {
                                 ;     555    #define _STD_END		}
                                 ;     556   #endif /* _C_AS_CPP */
                                 ;     557 
                                 ;     558    #define _C_STD_BEGIN
                                 ;     559    #define _C_STD_END
                                 ;     560    #define _CSTD		::
                                 ;     561    #define _STD			::std::
                                 ;     562  #endif /* _ALT_NS etc */
                                 ;     563 
                                 ;     564   #define _X_STD_BEGIN	namespace std {
                                 ;     565   #define _X_STD_END	}
                                 ;     566   #define _XSTD			::std::
                                 ;     567 
                                 ;     568   #if defined(_STD_USING) && _ALT_NS < 3
                                 ;     569    #undef _GLOBAL_USING		/* C names in std namespace */
                                 ;     570 
                                 ;     571   #else
                                 ;     572    #define _GLOBAL_USING	1	/* c* headers import C names to std */
                                 ;     573   #endif /* defined(_STD_USING) */
                                 ;     574 
                                 ;     575   #if defined(_STD_LINKAGE)
                                 ;     576    #define _C_LIB_DECL		extern "C++" {	/* C has extern "C++" linkage */
                                 ;     577 
                                 ;     578   #else /* defined(_STD_LINKAGE) */
                                 ;     579    #define _C_LIB_DECL		extern "C" {	/* C has extern "C" linkage */
                                 ;     580   #endif /* defined(_STD_LINKAGE) */
                                 ;     581 
                                 ;     582   #define _END_C_LIB_DECL	}
                                 ;     583   #define _EXTERN_C			extern "C" {
                                 ;     584   #define _END_EXTERN_C		}
                                 ;     585 
                                 ;     586  #else /* _HAS_NAMESPACE */
                                 ;     587   #define _STD_BEGIN
                                 ;     588   #define _STD_END
                                 ;     589   #define _STD	::
                                 ;     590 
                                 ;     591   #define _X_STD_BEGIN
                                 ;     592   #define _X_STD_END
                                 ;     593   #define _XSTD	::
                                 ;     594 
                                 ;     595   #define _C_STD_BEGIN
                                 ;     596   #define _C_STD_END
                                 ;     597   #define _CSTD	::
                                 ;     598 
                                 ;     599   #define _C_LIB_DECL		extern "C" {
                                 ;     600   #define _END_C_LIB_DECL	}
                                 ;     601   #define _EXTERN_C			extern "C" {
                                 ;     602   #define _END_EXTERN_C		}
                                 ;     603  #endif /* _HAS_NAMESPACE */
                                 ;     604 
                                 ;     605  #else /* __cplusplus */
                                 ;     606   #define _STD_BEGIN
                                 ;     607   #define _STD_END
                                 ;     608   #define _STD
                                 ;     609 
                                 ;     610   #define _X_STD_BEGIN
                                 ;     611   #define _X_STD_END
                                 ;     612   #define _XSTD
                                 ;     613 
                                 ;     614   #define _C_STD_BEGIN
                                 ;     615   #define _C_STD_END
                                 ;     616   #define _CSTD
                                 ;     617 
                                 ;     618   #define _C_LIB_DECL
                                 ;     619   #define _END_C_LIB_DECL
                                 ;     620   #define _EXTERN_C
                                 ;     621   #define _END_EXTERN_C
                                 ;     622  #endif /* __cplusplus */
                                 ;     623 
                                 ;     624  #if 199901L <= __STDC_VERSION__
                                 ;     625 
                                 ;     626  #if defined(__cplusplus)
                                 ;     627   #define _Restrict
                                 ;     628 
                                 ;     629  #else /* defined(__cplusplus) */
                                 ;     630   #define _Restrict restrict
                                 ;     631  #endif /* defined(__cplusplus) */
                                 ;     632 
                                 ;     633  #else /* 199901L <= __STDC_VERSION__ */
                                 ;     634  #define _Restrict
                                 ;     635  #endif /* 199901L <= __STDC_VERSION__ */
                                 ;     636 
                                 ;     637  #ifdef __cplusplus
                                 ;     638 _STD_BEGIN
                                 ;     639 typedef bool _Bool;
                                 ;     640 _STD_END
                                 ;     641  #endif /* __cplusplus */
                                 ;     642 
                                 ;     643 #include <stdarg.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /*****************************************************************/
                                 ;       8 /* SPEC ;                                                        */
                                 ;       9 /*   NAME = stdarg :                                             */
                                 ;      10 /*   FUNC = this module do the following finctions ;             */
                                 ;      11 /*                                                               */
                                 ;      12 /*         (1) initialize parameter pointer                      */
                                 ;      13 /*         (2) set parameter pointer to next parameter           */
                                 ;      14 /*                                                               */
                                 ;      15 /*                                                               */
                                 ;      16 /*   END ;                                                       */
                                 ;      17 /*****************************************************************/
                                 ;      18 
                                 ;      19 #ifndef _STDARG_H
                                 ;      20 #define _STDARG_H
                                 ;      21 #include <macro.h>
                                 ;      22 
                                 ;      23 #if defined(__H8__)
                                 ;      24 
                                 ;      25 typedef char *va_list ;
                                 ;      26 
                                 ;      27 #define va_start(AP,LASTARG) ((void)(AP = ((va_list)&LASTARG + ((sizeof(LASTARG)+1)&~1))))
                                 ;      28 
                                 ;      30 #define va_arg(AP,TYPE) \
                                 ;      30   (AP += ((sizeof(TYPE)+1)&~1), *((TYPE *)(AP - ((sizeof(TYPE)+1)&~1))))
                                 ;      31 
                                 ;      32 #define va_end(ap)
                                 ;      33 
                                 ;      34 #endif /* __H8__ */
                                 ;      35 
                                 ;      36 #if defined(_R_SHC) || defined(__RX)
                                 ;      37 
                                 ;      38 typedef char *va_list ;
                                 ;      39 
                                 ;      40 #if defined(__RX)
                                 ;      41 #define va_start(AP,LASTARG) ((void)(AP = (va_list)((((unsigned long)(&LASTARG+1))+3)&~3)))
                                 ;      42 #else /* __RX */
                                 ;      43 #define va_start(AP,LASTARG) ((void)(AP = ((va_list)&LASTARG + ((sizeof(LASTARG)+3)&~3))))
                                 ;      44 #endif /* __RX */
                                 ;      45 
                                 ;      47 #define va_arg(AP,TYPE) \
                                 ;      47   (AP += ((sizeof(TYPE)+3)&~3), *((TYPE *)(AP - ((sizeof(TYPE)+3)&~3))))
                                 ;      48 
                                 ;      49 #define va_end(ap)
                                 ;      50 
                                 ;      51 #endif /* _R_SHC || __RX */
                                 ;      52 
                                 ;      53 #if defined(_R_M16C)
                                 ;      54 
                                 ;      55 #ifndef _VA_LIST_DEF
                                 ;      56 typedef char *va_list;
                                 ;      57 #define _VA_LIST_DEF
                                 ;      58 #endif
                                 ;      59 
                                 ;      60 #define va_arg(AP,TYPE) (AP += sizeof(TYPE), *((TYPE *)(AP - sizeof(TYPE))))
                                 ;      61 #define va_end(AP) (AP = (va_list)0)
                                 ;      62 #define va_start(AP,LASTARG) (AP = ((va_list)&LASTARG + sizeof(LASTARG)))
                                 ;      63 
                                 ;      64 #endif /* _R_M16C */
                                 ;      65 
                                 ;      66 #endif /* _STDARG_H */
                                 ;     644 
                                 ;     645 		/* VC++ COMPILER PARAMETERS */
                                 ;     646  #define _CRTIMP
                                 ;     647  #define _CDECL
                                 ;     648 
                                 ;     649  #ifdef __NO_LONG_LONG
                                 ;     650 
                                 ;     651  #else /* defined(__NO_LONG_LONG) */
                                 ;     652   #define _LONGLONG	long long
                                 ;     653   #define _ULONGLONG	unsigned long long
                                 ;     654   #define _LLONG_MAX	0x7fffffffffffffffLL
                                 ;     655   #define _ULLONG_MAX	0xffffffffffffffffULL
                                 ;     656  #endif /* __NO_LONG_LONG */
                                 ;     657 
                                 ;     658 		/* FLOATING-POINT PROPERTIES */
                                 ;     659 #if defined(__RX) && defined(__DBL4)
                                 ;     660   #define _DBIAS	0x7e	/* IEEE format double and float */
                                 ;     661   #define _DOFF	7
                                 ;     662 #else /* defined(__RX) && defined(__DBL4) */
                                 ;     663   #define _DBIAS	0x3fe	/* IEEE format double and float */
                                 ;     664   #define _DOFF	4
                                 ;     665 #endif /* defined(__RX) && defined(__DBL4) */
                                 ;     666 
                                 ;     667 #define _FBIAS	0x7e
                                 ;     668 #define _FOFF	7
                                 ;     669 
                                 ;     670 		/* INTEGER PROPERTIES */
                                 ;     671 #define _BITS_BYTE	8
                                 ;     672 #define _C2			1	/* 0 if not 2's complement */
                                 ;     673 #define _MBMAX		8	/* MB_LEN_MAX */
                                 ;     674 
                                 ;     675   #if defined(__H8__) || defined(_R_M16C)
                                 ;     676     #define _ILONG		0	/* 16-bit int */
                                 ;     677   #elif defined(_R_SHC) || defined(__RX)
                                 ;     678     #define _ILONG		1	/* 32-bit int */
                                 ;     679   #else
                                 ;     680     #define _ILONG		1	/* 0 if 16-bit int */
                                 ;     681   #endif
                                 ;     682 
                                 ;     685  #if defined(__s390__) || defined(__CHAR_UNSIGNED__)  \
                                 ;     685 	|| defined(_CHAR_UNSIGNED) \
                                 ;     685 	|| (defined(__RX) && defined(__UCHAR))
                                 ;     686   #define _CSIGN	0	/* 0 if char is not signed */
                                 ;     687 
                                 ;     688  #else /* defined(__s390__) etc */
                                 ;     689   #define _CSIGN	1
                                 ;     690  #endif /* defined(__s390__) etc */
                                 ;     691 
                                 ;     692 #define _MAX_EXP_DIG	8	/* for parsing numerics */
                                 ;     693 #define _MAX_INT_DIG	32
                                 ;     694 #define _MAX_SIG_DIG	48
                                 ;     695 
                                 ;     696  #if defined(_LONGLONG)
                                 ;     697 typedef _LONGLONG _Longlong;
                                 ;     698 typedef _ULONGLONG _ULonglong;
                                 ;     699 
                                 ;     700  #else /* defined(_LONGLONG) */
                                 ;     701 typedef long _Longlong;
                                 ;     702 typedef unsigned long _ULonglong;
                                 ;     703  #define _LLONG_MAX		0x7fffffffL
                                 ;     704  #define _ULLONG_MAX	0xffffffffUL
                                 ;     705  #endif /* defined(_LONGLONG) */
                                 ;     706 
                                 ;     707 		/* wchar_t AND wint_t PROPERTIES */
                                 ;     708 
                                 ;     710  #if defined(_WCHAR_T) || defined(_WCHAR_T_DEFINED) \
                                 ;     710 	|| defined (_MSL_WCHAR_T_TYPE)
                                 ;     711   #define _WCHART
                                 ;     712  #endif /* defined(_WCHAR_T) || defined(_WCHAR_T_DEFINED) */
                                 ;     713 
                                 ;     714  #if defined(_WINT_T)
                                 ;     715   #define _WINTT
                                 ;     716  #endif /* _WINT_T */
                                 ;     717 
                                 ;     718 #if defined(__RX) && defined(_R_NO_WIDECHAR)
                                 ;     719  /* Dummy */
                                 ;     720 #else /* defined(__RX) && defined(_R_NO_WIDECHAR) */
                                 ;     721  #ifdef __cplusplus
                                 ;     722   #define _WCHART
                                 ;     723 typedef wchar_t _Wchart;
                                 ;     724 typedef wchar_t _Wintt;
                                 ;     725  #endif /* __cplusplus */
                                 ;     726 #endif /* defined(__RX) && defined(_R_NO_WIDECHAR) */
                                 ;     727 
                                 ;     728  #if defined(_MSL_WCHAR_T_TYPE)
                                 ;     729   #define _WCMIN	0
                                 ;     730   #define _WCMAX	0xffff
                                 ;     731 
                                 ;     732   #ifndef __cplusplus
                                 ;     733 typedef wchar_t _Wchart;
                                 ;     734 typedef wint_t _Wintt;
                                 ;     735   #endif /* __cplusplus */
                                 ;     736 
                                 ;     737   #define mbstate_t	_DNK_mbstate_t
                                 ;     738   #define wctype_t	_DNK_wctype_t
                                 ;     739   #define wint_t	_DNK_wint_t
                                 ;     740   #define _MSC_VER	1
                                 ;     741 
                                 ;     742  #elif defined(__WCHAR_TYPE__)
                                 ;     743   #define _WCMIN	(-_WCMAX - _C2)
                                 ;     744   #define _WCMAX	0x7fffffff	/* assume signed 32-bit wchar_t */
                                 ;     745 
                                 ;     746   #ifndef __cplusplus
                                 ;     747 typedef __WCHAR_TYPE__ _Wchart;
                                 ;     748 typedef __WCHAR_TYPE__ _Wintt;
                                 ;     749   #endif /* __cplusplus */
                                 ;     750 
                                 ;     751  #else /* default wchar_t/wint_t */
                                 ;     752 #ifdef __RX
                                 ;     753   #define _WCMIN	0
                                 ;     754   #define _WCMAX	0xffff
                                 ;     755 #else
                                 ;     756   #define _WCMIN	(-_WCMAX - _C2)
                                 ;     757   #define _WCMAX	0x7fffffff
                                 ;     758 #endif
                                 ;     759 
                                 ;     760 #if defined(__RX) && defined(_R_NO_WIDECHAR)
                                 ;     761 typedef unsigned short _Wchart;
                                 ;     762 typedef unsigned long _Wintt;
                                 ;     763 #else /* defined(__RX) && defined(_R_NO_WIDECHAR) */
                                 ;     764   #ifndef __cplusplus
                                 ;     765 	#ifdef __RX
                                 ;     766 typedef unsigned short _Wchart;
                                 ;     767 typedef unsigned long _Wintt;
                                 ;     768 	#else /* __RX */
                                 ;     769 typedef long _Wchart;
                                 ;     770 typedef long _Wintt;
                                 ;     771 	#endif /* __RX */
                                 ;     772   #endif /* __cplusplus */
                                 ;     773 #endif /* defined(__RX) && defined(_R_NO_WIDECHAR) */
                                 ;     774 
                                 ;     775  #endif /* compiler/library type */
                                 ;     776 
                                 ;     777 		/* POINTER PROPERTIES */
                                 ;     778 #define _NULL		0	/* 0L if pointer same as long */
                                 ;     779 
                                 ;     780 		/* signal PROPERTIES */
                                 ;     781 
                                 ;     782 #define _SIGABRT	6
                                 ;     783 #define _SIGMAX		44
                                 ;     784 
                                 ;     785 		/* stdarg PROPERTIES */
                                 ;     786 typedef va_list _Va_list;
                                 ;     787 
                                 ;     788  #if _HAS_C9X
                                 ;     789 
                                 ;     790  #if __EDG__ && !defined(__x86_64)
                                 ;     791   #undef va_copy
                                 ;     792  #endif /* __EDG__ */
                                 ;     793 
                                 ;     794  #ifndef va_copy
                                 ;     795 _EXTERN_C
                                 ;     796 void _Vacopy(va_list *, va_list);
                                 ;     797 _END_EXTERN_C
                                 ;     798   #define va_copy(apd, aps)	_Vacopy(&(apd), aps)
                                 ;     799  #endif /* va_copy */
                                 ;     800 
                                 ;     801  #endif /* _IS_C9X */
                                 ;     802 
                                 ;     803 _C_STD_BEGIN
                                 ;     804 		/* stdlib PROPERTIES */
                                 ;     805 #define _EXFAIL	1	/* EXIT_FAILURE */
                                 ;     806 
                                 ;     807 _EXTERN_C
                                 ;     808 void _Atexit(void (*)(void));
                                 ;     809 _END_EXTERN_C
                                 ;     810 
                                 ;     811 		/* stdio PROPERTIES */
                                 ;     812 #define _FNAMAX	260
                                 ;     813 #define _FOPMAX	20
                                 ;     814 #define _TNAMAX	16
                                 ;     815 
                                 ;     816  #define _FD_TYPE	signed char
                                 ;     817   #define _FD_NO(str) ((str)->_Handle)
                                 ;     818  #define _FD_VALID(fd)	(0 <= (fd))	/* fd is signed integer */
                                 ;     819  #define _FD_INVALID	(-1)
                                 ;     820  #define _SYSCH(x)	x
                                 ;     821 typedef char _Sysch_t;
                                 ;     822 
                                 ;     823 		/* STORAGE ALIGNMENT PROPERTIES */
                                 ;     824 
                                 ;     825  #if defined(_LP64) || defined(__x86_64)	/* compiler test */
                                 ;     826   #define _MEMBND	4U /* 16-byte boundaries (2^^4) */
                                 ;     827 
                                 ;     828  #else /* defined(_LP64) etc. */
                                 ;     829   #define _MEMBND	3U /* eight-byte boundaries (2^^3) */
                                 ;     830  #endif /* defined(_LP64) etc. */
                                 ;     831 
                                 ;     832 		/* time PROPERTIES */
                                 ;     833  #define _CPS	1
                                 ;     834 
                                 ;     835 #define _TBIAS	((70 * 365LU + 17) * 86400)
                                 ;     836 _C_STD_END
                                 ;     837 
                                 ;     838 		/* MULTITHREAD PROPERTIES */
                                 ;     839 
                                 ;     840  #if _MULTI_THREAD
                                 ;     841 _EXTERN_C
                                 ;     842 void _Locksyslock(int);
                                 ;     843 void _Unlocksyslock(int);
                                 ;     844 _END_EXTERN_C
                                 ;     845 
                                 ;     846  #else /* _MULTI_THREAD */
                                 ;     847   #define _Locksyslock(x)	(void)0
                                 ;     848   #define _Unlocksyslock(x)	(void)0
                                 ;     849  #endif /* _MULTI_THREAD */
                                 ;     850 
                                 ;     851 		/* LOCK MACROS */
                                 ;     852  #define _LOCK_LOCALE	0
                                 ;     853  #define _LOCK_MALLOC	1
                                 ;     854  #define _LOCK_STREAM	2
                                 ;     855  #define _LOCK_DEBUG	3
                                 ;     856  #define _MAX_LOCK		4	/* one more than highest lock number */
                                 ;     857 
                                 ;     858  #if _IOSTREAM_OP_LOCKS
                                 ;     859   #define _MAYBE_LOCK
                                 ;     860 
                                 ;     861  #else /* _IOSTREAM_OP_LOCKS */
                                 ;     863   #define _MAYBE_LOCK	\
                                 ;     863 	if (_Locktype == _LOCK_MALLOC || _Locktype == _LOCK_DEBUG)
                                 ;     864  #endif /* _IOSTREAM_OP_LOCKS */
                                 ;     865 
                                 ;     866  #ifdef __cplusplus
                                 ;     867 _STD_BEGIN
                                 ;     868 extern "C++" {	// in case of _C_AS_CPP
                                 ;     869 		// CLASS _Lockit
                                 ;     870 class _Lockit
                                 ;     871 	{	// lock while object in existence -- MUST NEST
                                 ;     872 public:
                                 ;     873 
                                 ;     874   #if !_MULTI_THREAD
                                 ;     875 	_Lockit()
                                 ;     876 		{	// do nothing
                                 ;     877 		}
                                 ;     878 
                                 ;     879 	explicit _Lockit(int)
                                 ;     880 		{	// do nothing
                                 ;     881 		}
                                 ;     882 
                                 ;     883 	~_Lockit()
                                 ;     884 		{	// do nothing
                                 ;     885 		}
                                 ;     886 
                                 ;     887   #else /* !_MULTI_THREAD */
                                 ;     888 	_Lockit()
                                 ;     889 		: _Locktype(_LOCK_MALLOC)
                                 ;     890 		{	// set default lock
                                 ;     891 		_MAYBE_LOCK
                                 ;     892 			_Locksyslock(_Locktype);
                                 ;     893 		}
                                 ;     894 
                                 ;     895 	explicit _Lockit(int _Type)
                                 ;     896 		: _Locktype(_Type)
                                 ;     897 		{	// set the lock
                                 ;     898 		_MAYBE_LOCK
                                 ;     899 			_Locksyslock(_Locktype);
                                 ;     900 		}
                                 ;     901 
                                 ;     902 	~_Lockit()
                                 ;     903 		{	// clear the lock
                                 ;     904 		_MAYBE_LOCK
                                 ;     905 			_Unlocksyslock(_Locktype);
                                 ;     906 		}
                                 ;     907   #endif /* _MULTI_THREAD */
                                 ;     908 
                                 ;     909 //private:
                                 ;     910 	_Lockit(const _Lockit&);			// not defined
                                 ;     911 	_Lockit& operator=(const _Lockit&);	// not defined
                                 ;     912 
                                 ;     913 private:
                                 ;     914 	int _Locktype;
                                 ;     915 	};
                                 ;     916 
                                 ;     917   #if !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS
                                 ;     918 class _Mutex
                                 ;     919 	{	// lock under program control
                                 ;     920 public:
                                 ;     921 	void _Lock()
                                 ;     922 		{	// do nothing
                                 ;     923 		}
                                 ;     924 
                                 ;     925 	void _Unlock()
                                 ;     926 		{	// do nothing
                                 ;     927 	}
                                 ;     928 	};
                                 ;     929 
                                 ;     930   #else /* !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS */
                                 ;     931 class _Mutex
                                 ;     932 	{	// lock under program control
                                 ;     933 public:
                                 ;     934 	_Mutex();
                                 ;     935 	~_Mutex();
                                 ;     936 	void _Lock();
                                 ;     937 	void _Unlock();
                                 ;     938 
                                 ;     939 private:
                                 ;     940 	_Mutex(const _Mutex&);				// not defined
                                 ;     941 	_Mutex& operator=(const _Mutex&);	// not defined
                                 ;     942 	void *_Mtx;
                                 ;     943 	};
                                 ;     944   #endif /* !_MULTI_THREAD || !_IOSTREAM_OP_LOCKS */
                                 ;     945 
                                 ;     946 }	// extern "C++"
                                 ;     947 _STD_END
                                 ;     948  #endif /* __cplusplus */
                                 ;     949 
                                 ;     950 		/* MISCELLANEOUS MACROS */
                                 ;     951 #define _ATEXIT_T	void
                                 ;     952 
                                 ;     953 #ifndef _TEMPLATE_STAT
                                 ;     954  #define _TEMPLATE_STAT
                                 ;     955 #endif /* */
                                 ;     956 
                                 ;     957   #define _NO_RETURN(fun)	void fun
                                 ;     958 
                                 ;     959 #endif /* _YVALS */
                                 ;     960 
                                 ;     961 
                                 ;     962 /*
                                 ;     963  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     964 V5.03:0216 */
                                 ;      13 #endif /* _YVALS */
                                 ;      14 
                                 ;      15  #if _BITS_BYTE != 8
                                 ;      16   #error <stdint.h> assumes 8 bits per byte
                                 ;      17  #endif /* _BITS_BYTE != 8 */
                                 ;      18 
                                 ;      19 /* NB: also assumes
                                 ;      20 	long is 32 bits
                                 ;      21 	pointer can convert to and from long long
                                 ;      22 	long long is longest type
                                 ;      23  */
                                 ;      24 
                                 ;      25  #if __STDC_WANT_LIB_EXT1__
                                 ;      26   #define RSIZE_MAX	_RSIZE_MAX
                                 ;      27  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;      28 
                                 ;      29 _C_STD_BEGIN
                                 ;      30 
                                 ;      31 		/* TYPE DEFINITIONS */
                                 ;      32  #ifndef _SYS_INT_TYPES_H
                                 ;      33   #define _STD_USING_INT_TYPES
                                 ;      34 
                                 ;      36   #if !defined(__BIT_TYPES_DEFINED__) && !defined(_MACHTYPES_H_) \
                                 ;      36 	&& !defined(__int8_t_defined)
                                 ;      37    #define _STD_USING_BIT_TYPES
                                 ;      38    #define __int8_t_defined
                                 ;      39 
                                 ;      40 typedef signed char int8_t;
                                 ;      41 typedef short int16_t;
                                 ;      42 typedef _Int32t int32_t;
                                 ;      43   #endif /* !defined(__BIT_TYPES_DEFINED__) etc. */
                                 ;      44 
                                 ;      45 typedef unsigned char uint8_t;
                                 ;      46 typedef unsigned short uint16_t;
                                 ;      47 typedef _Uint32t uint32_t;
                                 ;      48 
                                 ;      49 typedef signed char int_least8_t;
                                 ;      50 typedef short int_least16_t;
                                 ;      51 typedef _Int32t int_least32_t;
                                 ;      52 typedef unsigned char uint_least8_t;
                                 ;      53 typedef unsigned short uint_least16_t;
                                 ;      54 typedef _Uint32t uint_least32_t;
                                 ;      55  #endif /* _SYS_INT_TYPES_H */
                                 ;      56 
                                 ;      57 typedef signed char int_fast8_t;
                                 ;      58 typedef short int_fast16_t;
                                 ;      59 typedef _Int32t int_fast32_t;
                                 ;      60 
                                 ;      61 typedef unsigned char uint_fast8_t;
                                 ;      62 typedef unsigned short uint_fast16_t;
                                 ;      63 typedef _Uint32t uint_fast32_t;
                                 ;      64 
                                 ;      65  #ifndef _INTPTR
                                 ;      66   #define _INTPTR	0	/* 0 => int, 1 => long, 2 => long long */
                                 ;      67  #endif /* _INTPTR */
                                 ;      68 
                                 ;      69  #ifndef _SYS_INT_TYPES_H
                                 ;      70 
                                 ;      71   #if !defined(_MACHTYPES_H_)
                                 ;      72 
                                 ;      73    #if !defined(_UINTPTR_T_DEFINED)
                                 ;      74     #define _UINTPTR_T_DEFINED
                                 ;      75     #define _STD_USING_UINTPTR_T
                                 ;      76 
                                 ;      77     #if _INTPTR == 0
                                 ;      78 typedef unsigned long uintptr_t;
                                 ;      79 
                                 ;      80     #elif _INTPTR == 1
                                 ;      81 typedef unsigned long uintptr_t;
                                 ;      82 
                                 ;      83     #elif _INTPTR == 2
                                 ;      84 typedef _ULonglong uintptr_t;
                                 ;      85 
                                 ;      86     #else /* _INTPTR */
                                 ;      87      #error bad _INTPTR value
                                 ;      88     #endif /* _INTPTR */
                                 ;      89 
                                 ;      90    #endif /* _UNITPTR_T_DEFINED */
                                 ;      91 
                                 ;      92    #if !defined(__int_ptr_t_defined) && !defined(_INTPTR_T_DEFINED)
                                 ;      93     #define _INTPTR_T_DEFINED
                                 ;      94     #define _STD_USING_INTPTR_T
                                 ;      95 
                                 ;      96     #if _INTPTR == 0
                                 ;      97 typedef long intptr_t;
                                 ;      98 
                                 ;      99     #elif _INTPTR == 1
                                 ;     100 typedef long intptr_t;
                                 ;     101 
                                 ;     102     #elif _INTPTR == 2
                                 ;     103 typedef _Longlong intptr_t;
                                 ;     104 
                                 ;     105     #else /* _INTPTR */
                                 ;     106      #error bad _INTPTR value
                                 ;     107     #endif /* _INTPTR */
                                 ;     108 
                                 ;     109     #endif /* __int_ptr_t_defined etc. */
                                 ;     110 
                                 ;     111    #ifndef __BIT_TYPES_DEFINED__
                                 ;     112 typedef _Longlong int64_t;
                                 ;     113    #endif /* __BIT_TYPES_DEFINED__ */
                                 ;     114 
                                 ;     115   #endif /* !defined(_MACHTYPES_H_) */
                                 ;     116 typedef _ULonglong uint64_t;
                                 ;     117 
                                 ;     118 typedef _Longlong int_least64_t;
                                 ;     119 typedef _ULonglong uint_least64_t;
                                 ;     120  #endif /* _SYS_INT_TYPES_H */
                                 ;     121 
                                 ;     122 typedef _Longlong int_fast64_t;
                                 ;     123 typedef _ULonglong uint_fast64_t;
                                 ;     124 
                                 ;     125  #if !defined(_SYS_INT_TYPES_H) && !defined(_INTMAXT)
                                 ;     126   #define _INTMAXT
                                 ;     127 typedef _Longlong intmax_t;
                                 ;     128 typedef _ULonglong uintmax_t;
                                 ;     129  #endif /* !defined(_SYS_INT_TYPES_H) etc. */
                                 ;     130 
                                 ;     131 		/* LIMIT MACROS */
                                 ;     132 #define INT8_MIN	(-0x7f - _C2)
                                 ;     133 #define INT16_MIN	(-0x7fff - _C2)
                                 ;     134 #define INT32_MIN	(-0x7fffffff - _C2)
                                 ;     135 
                                 ;     136 #define INT8_MAX	0x7f
                                 ;     137 #define INT16_MAX	0x7fff
                                 ;     138 #define INT32_MAX	0x7fffffff
                                 ;     139 #define UINT8_MAX	0xff
                                 ;     140 #define UINT16_MAX	0xffff
                                 ;     141 #define UINT32_MAX	0xffffffff
                                 ;     142 
                                 ;     143 #define INT_LEAST8_MIN		(-0x7f - _C2)
                                 ;     144 #define INT_LEAST16_MIN		(-0x7fff - _C2)
                                 ;     145 #define INT_LEAST32_MIN		(-0x7fffffff - _C2)
                                 ;     146 
                                 ;     147 #define INT_LEAST8_MAX		0x7f
                                 ;     148 #define INT_LEAST16_MAX		0x7fff
                                 ;     149 #define INT_LEAST32_MAX		0x7fffffff
                                 ;     150 #define UINT_LEAST8_MAX		0xff
                                 ;     151 #define UINT_LEAST16_MAX	0xffff
                                 ;     152 #define UINT_LEAST32_MAX	0xffffffff
                                 ;     153 
                                 ;     154 #define INT_FAST8_MIN		(-0x7f - _C2)
                                 ;     155 #define INT_FAST16_MIN		(-0x7fff - _C2)
                                 ;     156 #define INT_FAST32_MIN		(-0x7fffffff - _C2)
                                 ;     157 
                                 ;     158 #define INT_FAST8_MAX		0x7f
                                 ;     159 #define INT_FAST16_MAX		0x7fff
                                 ;     160 #define INT_FAST32_MAX		0x7fffffff
                                 ;     161 #define UINT_FAST8_MAX		0xff
                                 ;     162 #define UINT_FAST16_MAX		0xffff
                                 ;     163 #define UINT_FAST32_MAX		0xffffffff
                                 ;     164 
                                 ;     165  #if _INTPTR == 0 && !_ILONG
                                 ;     166 #define INTPTR_MAX			0x7fff
                                 ;     167 #define INTPTR_MIN			(-INTPTR_MAX - _C2)
                                 ;     168 #define UINTPTR_MAX			0xffff
                                 ;     169 
                                 ;     170  #elif _INTPTR == 1 || _INTPTR == 0 && _ILONG
                                 ;     171 #define INTPTR_MAX			0x7fffffff
                                 ;     172 #define INTPTR_MIN			(-INTPTR_MAX - _C2)
                                 ;     173 #define UINTPTR_MAX			0xffffffff
                                 ;     174 
                                 ;     175  #else /* _INTPTR == 2 */
                                 ;     176 #define INTPTR_MIN			(-_LLONG_MAX - _C2)
                                 ;     177 #define INTPTR_MAX			_LLONG_MAX
                                 ;     178 #define UINTPTR_MAX			_ULLONG_MAX
                                 ;     179 #endif /* _INTPTR */
                                 ;     180 
                                 ;     181 #define INT8_C(x)	(x)
                                 ;     182 #define INT16_C(x)	(x)
                                 ;     183 #define INT32_C(x)	((x) + (INT32_MAX - INT32_MAX))
                                 ;     184 
                                 ;     185 #define UINT8_C(x)	(x)
                                 ;     186 #define UINT16_C(x)	(x)
                                 ;     187 #define UINT32_C(x)	((x) + (UINT32_MAX - UINT32_MAX))
                                 ;     188 
                                 ;     189  #if _ILONG
                                 ;     190   #define PTRDIFF_MIN		INT32_MIN
                                 ;     191   #define PTRDIFF_MAX		INT32_MAX
                                 ;     192 
                                 ;     193   #define SIG_ATOMIC_MIN	INT32_MIN
                                 ;     194   #define SIG_ATOMIC_MAX	INT32_MAX
                                 ;     195 
                                 ;     196   #define SIZE_MAX			UINT32_MAX
                                 ;     197 
                                 ;     198  #else /* _ILONG */
                                 ;     199   #define PTRDIFF_MIN		INT16_MIN
                                 ;     200   #define PTRDIFF_MAX		INT16_MAX
                                 ;     201 
                                 ;     202   #define SIG_ATOMIC_MIN	INT16_MIN
                                 ;     203   #define SIG_ATOMIC_MAX	INT16_MAX
                                 ;     204 
                                 ;     205   #define SIZE_MAX			UINT16_MAX
                                 ;     206  #endif /* _ILONG */
                                 ;     207 
                                 ;     208 #define WCHAR_MIN	_WCMIN
                                 ;     209 #define WCHAR_MAX	_WCMAX
                                 ;     210 
                                 ;     211 #define WINT_MIN	_WCMIN
                                 ;     212 #define WINT_MAX	_WCMAX
                                 ;     213 
                                 ;     214  #define INT64_MIN	(-0x7fffffffffffffffLL - _C2)
                                 ;     215  #define INT64_MAX	0x7fffffffffffffffLL
                                 ;     216  #define UINT64_MAX	0xffffffffffffffffULL
                                 ;     217 
                                 ;     218  #define INT_LEAST64_MIN	(-0x7fffffffffffffffLL - _C2)
                                 ;     219  #define INT_LEAST64_MAX	0x7fffffffffffffffLL
                                 ;     220  #define UINT_LEAST64_MAX	0xffffffffffffffffULL
                                 ;     221 
                                 ;     222  #define INT_FAST64_MIN		(-0x7fffffffffffffffLL - _C2)
                                 ;     223  #define INT_FAST64_MAX		0x7fffffffffffffffLL
                                 ;     224  #define UINT_FAST64_MAX	0xffffffffffffffffULL
                                 ;     225 
                                 ;     226  #define INTMAX_MIN		(-0x7fffffffffffffffLL - _C2)
                                 ;     227  #define INTMAX_MAX		0x7fffffffffffffffLL
                                 ;     228  #define UINTMAX_MAX	0xffffffffffffffffULL
                                 ;     229 
                                 ;     230 #define INT64_C(x)		((x) + (INT64_MAX - INT64_MAX))
                                 ;     231 #define UINT64_C(x)		((x) + (UINT64_MAX - UINT64_MAX))
                                 ;     232 #define INTMAX_C(x)		INT64_C(x)
                                 ;     233 #define UINTMAX_C(x)	UINT64_C(x)
                                 ;     234 _C_STD_END
                                 ;     235 
                                 ;     236 #endif /* _STDINT */
                                 ;     237 
                                 ;     238  #if defined(_STD_USING)
                                 ;     239 
                                 ;     240   #ifdef _STD_USING_BIT_TYPES
                                 ;     241 using _CSTD int8_t; using _CSTD int16_t;
                                 ;     242 using _CSTD int32_t; using _CSTD int64_t;
                                 ;     243   #endif /* _STD_USING_BIT_TYPES */
                                 ;     244 
                                 ;     245   #ifdef _STD_USING_INT_TYPES
                                 ;     246 using _CSTD uint8_t; using _CSTD uint16_t;
                                 ;     247 using _CSTD uint32_t; using _CSTD uint64_t;
                                 ;     248 
                                 ;     249 using _CSTD int_least8_t; using _CSTD int_least16_t;
                                 ;     250 using _CSTD int_least32_t;  using _CSTD int_least64_t;
                                 ;     251 using _CSTD uint_least8_t; using _CSTD uint_least16_t;
                                 ;     252 using _CSTD uint_least32_t; using _CSTD uint_least64_t;
                                 ;     253 
                                 ;     254 using _CSTD intmax_t; using _CSTD uintmax_t;
                                 ;     255   #endif /* _STD_USING_INT_TYPES */
                                 ;     256 
                                 ;     257   #ifdef _STD_USING_UINTPTR_T
                                 ;     258 using _CSTD uintptr_t;
                                 ;     259   #endif /* _STD_USING_UINTPTR_T */
                                 ;     260 
                                 ;     261   #ifdef _STD_USING_INTPTR_T
                                 ;     262 using _CSTD intptr_t;
                                 ;     263   #endif /* _STD_USING_INTPTR_T */
                                 ;     264 
                                 ;     265 using _CSTD int_fast8_t; using _CSTD int_fast16_t;
                                 ;     266 using _CSTD int_fast32_t; using _CSTD int_fast64_t;
                                 ;     267 using _CSTD uint_fast8_t; using _CSTD uint_fast16_t;
                                 ;     268 using _CSTD uint_fast32_t; using _CSTD uint_fast64_t;
                                 ;     269  #endif /* defined(_STD_USING) */
                                 ;     270 
                                 ;     271 /*
                                 ;     272  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     273 V5.03:0216 */
                                 ;      24 
                                 ;      25 /******************************************************************************
                                 ;      26 Typedef definitions
                                 ;      27 ******************************************************************************/
                                 ;      28 /* Standard data frame message definition object   */
                                 ;      29 typedef struct
                                 ;      30 {
                                 ;      31 	uint32_t id;
                                 ;      32 	uint8_t dlc;
                                 ;      33 	uint8_t data[8];
                                 ;      34 } can_std_frame_t;
                                 ;      35 
                                 ;      36 /******************************************************************************
                                 ;      37 Macro definitions
                                 ;      38 ******************************************************************************/
                                 ;      39 /*** CAN API ACTION TYPES ***/
                                 ;      40 #define DISABLE							0
                                 ;      41 #define ENABLE							1
                                 ;      42 /* Periph CAN modes */
                                 ;      43 #define EXITSLEEP_CANMODE				2
                                 ;      44 #define ENTERSLEEP_CANMODE 			 3
                                 ;      45 #define RESET_CANMODE					4
                                 ;      46 #define HALT_CANMODE					5
                                 ;      47 #define OPERATE_CANMODE					6
                                 ;      48 /* Port mode actions */
                                 ;      49 #define CANPORT_TEST_LISTEN_ONLY		7
                                 ;      50 #define CANPORT_TEST_0_EXT_LOOPBACK		8
                                 ;      51 #define CANPORT_TEST_1_INT_LOOPBACK		9
                                 ;      52 #define CANPORT_RETURN_TO_NORMAL		10
                                 ;      53 
                                 ;      54 /* Local sleep mode for CAN module */
                                 ;      55 #define CAN_NOT_SLEEP	0
                                 ;      56 #define CAN_SLEEP 	  1
                                 ;      57 
                                 ;      58 /*** CAN API return values *********************/
                                 ;      59 #define		R_CAN_OK				(uint32_t)0x00000000
                                 ;      60 #define		R_CAN_NOT_OK			(uint32_t)0x00000001
                                 ;      61 //available
                                 ;      62 #define		R_CAN_MSGLOST			(uint32_t)0x00000004
                                 ;      63 #define		R_CAN_NO_SENTDATA		(uint32_t)0x00000008
                                 ;      64 #define		R_CAN_RXPOLL_TMO		(uint32_t)0x00000010
                                 ;      65 #define		R_CAN_BAD_CH_NR 		(uint32_t)0x00000020
                                 ;      66 #define		R_CAN_SW_BAD_MBX		(uint32_t)0x00000040
                                 ;      67 #define		R_CAN_BAD_ACTION_TYPE	(uint32_t)0x00000080
                                 ;      68 /* CAN peripheral timeout reasons. */
                                 ;      69 #define		R_CAN_SW_WAKEUP_ERR		(uint32_t)0x00000100
                                 ;      70 #define		R_CAN_SW_SLEEP_ERR		(uint32_t)0x00000200
                                 ;      71 #define		R_CAN_SW_HALT_ERR		(uint32_t)0x00000400
                                 ;      72 #define		R_CAN_SW_RST_ERR		(uint32_t)0x00000800
                                 ;      73 #define		R_CAN_SW_TSRC_ERR		(uint32_t)0x00001000
                                 ;      74 #define		R_CAN_SW_SET_TX_TMO		(uint32_t)0x00002000
                                 ;      75 #define		R_CAN_SW_SET_RX_TMO		(uint32_t)0x00004000
                                 ;      76 #define		R_CAN_SW_ABORT_ERR		(uint32_t)0x00008000
                                 ;      77 /* CAN STATE CODES */
                                 ;      78 #define		R_CAN_STATUS_ERROR_ACTIVE   (uint32_t)0x0000001
                                 ;      79 #define		R_CAN_STATUS_ERROR_PASSIVE  (uint32_t)0x0000002
                                 ;      80 #define		R_CAN_STATUS_BUSOFF 		(uint32_t)0x0000004
                                 ;      81 /********************************************************/
                                 ;      82 
                                 ;      83 /* Mailbox search modes. */
                                 ;      84 #define 	RX_SEARCH		0
                                 ;      85 #define 	TX_SEARCH		1
                                 ;      86 #define 	MSGLOST_SEARCH	2
                                 ;      87 #define 	CHANNEL_SEARCH	3
                                 ;      88 
                                 ;      89 /* CAN0 Control Register (CTLR) b9, b8 CANM[1:0] CAN Operating Mode Select. */
                                 ;      90 #define CAN_OPERATION	0	//CAN operation mode
                                 ;      91 #define CAN_RESET		1	//CAN reset mode
                                 ;      92 #define CAN_HALT		2	//CAN halt mode
                                 ;      93 #define CAN_RESET_FORCE	3	//CAN reset mode (forcible transition)
                                 ;      94 
                                 ;      95 /* Frame types */
                                 ;      96 #define DATA_FRAME	    0
                                 ;      97 #define REMOTE_FRAME	1
                                 ;      98 
                                 ;      99 /* Bit set defines */
                                 ;     100 #define		MBX_0		0x00000001
                                 ;     101 #define		MBX_1		0x00000002
                                 ;     102 #define		MBX_2		0x00000004
                                 ;     103 #define		MBX_3		0x00000008
                                 ;     104 #define		MBX_4		0x00000010
                                 ;     105 #define		MBX_5		0x00000020
                                 ;     106 #define		MBX_6		0x00000040
                                 ;     107 #define		MBX_7		0x00000080
                                 ;     108 #define		MBX_8		0x00000100
                                 ;     109 #define		MBX_9		0x00000200
                                 ;     110 #define		MBX_10		0x00000400
                                 ;     111 #define		MBX_11		0x00000800
                                 ;     112 #define		MBX_12		0x00001000
                                 ;     113 #define		MBX_13		0x00002000
                                 ;     114 #define		MBX_14		0x00004000
                                 ;     115 #define		MBX_15		0x00008000
                                 ;     116 #define		MBX_16		0x00010000
                                 ;     117 #define		MBX_17		0x00020000
                                 ;     118 #define		MBX_18		0x00040000
                                 ;     119 #define		MBX_19		0x00080000
                                 ;     120 #define		MBX_20		0x00100000
                                 ;     121 #define		MBX_21		0x00200000
                                 ;     122 #define		MBX_22		0x00400000
                                 ;     123 #define		MBX_23		0x00800000
                                 ;     124 #define		MBX_24		0x01000000
                                 ;     125 #define		MBX_25		0x02000000
                                 ;     126 #define		MBX_26		0x04000000
                                 ;     127 #define		MBX_27		0x08000000
                                 ;     128 #define		MBX_28		0x10000000
                                 ;     129 #define		MBX_29		0x20000000
                                 ;     130 #define		MBX_30		0x40000000
                                 ;     131 #define		MBX_31		0x80000000
                                 ;     132 					 
                                 ;     133 /******************************************************************************
                                 ;     134 Constant definitions
                                 ;     135 *****************************************************************************/
                                 ;     136 /* Mem. area for bit set defines */
                                 ;     137 static const uint32_t 	bit_set[32] = {	MBX_0,  MBX_1,  MBX_2,  MBX_3, 
                                 ;     138 										MBX_4,  MBX_5,  MBX_6,  MBX_7,
                                 ;     139 										MBX_8,  MBX_9,  MBX_10, MBX_11, 
                                 ;     140 										MBX_12, MBX_13, MBX_14, MBX_15,
                                 ;     141 										MBX_16, MBX_17, MBX_18, MBX_19,
                                 ;     142 										MBX_20, MBX_21, MBX_22, MBX_23, 
                                 ;     143 										MBX_24, MBX_25, MBX_26, MBX_27,
                                 ;     144 										MBX_28, MBX_29, MBX_30, MBX_31, 
                                 ;     145 										};
                                 ;     146 
                                 ;     147 /******************************************************************************
                                 ;     148 Variable Externs
                                 ;     149 ******************************************************************************/
                                 ;     150 /******************************************************************************
                                 ;     151 Function prototypes
                                 ;     152 ******************************************************************************/
                                 ;     153 /*****************************************************************
                                 ;     154 			    R X   C A N   A P I 
                                 ;     155 ******************************************************************/
                                 ;     156 /* INITIALIZATION */
                                 ;     157 extern uint32_t	R_CAN_Create(const uint32_t ch_nr);
                                 ;     158 extern uint32_t	R_CAN_PortSet(const uint32_t ch_nr, const uint32_t action_type);
                                 ;     159 extern uint32_t	R_CAN_Control(const uint32_t ch_nr, const uint32_t action_type);
                                 ;     160 extern void     	R_CAN_SetBitrate(const uint32_t ch_nr);
                                 ;     161 
                                 ;     162 /* TRANSMIT */
                                 ;     163 extern uint32_t	R_CAN_TxSet(const uint32_t ch_nr, const uint32_t mbox_nr, const can_std_frame_t* frame_p, const uint32_t frame_type);
                                 ;     164 extern uint32_t	R_CAN_Tx(const uint32_t ch_nr, const uint32_t mbox_nr);
                                 ;     165 extern uint32_t	R_CAN_TxCheck(const uint32_t ch_nr, const uint32_t mbox_nr);
                                 ;     166 extern uint32_t	R_CAN_TxStopMsg(const uint32_t ch_nr, const uint32_t mbox_nr);
                                 ;     167 
                                 ;     168 /* RECEIVE */
                                 ;     169 extern uint32_t	R_CAN_RxSet(const uint32_t ch_nr, const uint32_t mbox_nr, const uint32_t sid, const uint32_t frame_type);
                                 ;     170 extern uint32_t	R_CAN_RxPoll(const uint32_t ch_nr, const uint32_t mbox_nr);
                                 ;     171 extern uint32_t	R_CAN_RxRead(const uint32_t ch_nr, const uint32_t mbox_nr, can_std_frame_t * const frame_p);
                                 ;     172 extern void		R_CAN_RxSetMask(const uint32_t ch_nr, const uint32_t mbox_nr, const uint32_t sid_mask_value);
                                 ;     173 
                                 ;     174 /* ERRORS */
                                 ;     175 extern uint32_t	R_CAN_CheckErr(const uint32_t ch_nr);
                                 ;     176 
                                 ;     177 #endif	/* R_CAN_API.H */
                                 ;     178 /* eof */
                                 ;      22 #include "stdint.h"
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /* stdint.h standard header */
                                 ;       8 #ifndef _STDINT
                                 ;       9 #define _STDINT
                                 ;      10 #include <macro.h>
                                 ;      11 #ifndef _YVALS
                                 ;      12 #include <sys/yvals.h>
                                 ;      13 #endif /* _YVALS */
                                 ;      14 
                                 ;      15  #if _BITS_BYTE != 8
                                 ;      16   #error <stdint.h> assumes 8 bits per byte
                                 ;      17  #endif /* _BITS_BYTE != 8 */
                                 ;      18 
                                 ;      19 /* NB: also assumes
                                 ;      20 	long is 32 bits
                                 ;      21 	pointer can convert to and from long long
                                 ;      22 	long long is longest type
                                 ;      23  */
                                 ;      24 
                                 ;      25  #if __STDC_WANT_LIB_EXT1__
                                 ;      26   #define RSIZE_MAX	_RSIZE_MAX
                                 ;      27  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;      28 
                                 ;      29 _C_STD_BEGIN
                                 ;      30 
                                 ;      31 		/* TYPE DEFINITIONS */
                                 ;      32  #ifndef _SYS_INT_TYPES_H
                                 ;      33   #define _STD_USING_INT_TYPES
                                 ;      34 
                                 ;      36   #if !defined(__BIT_TYPES_DEFINED__) && !defined(_MACHTYPES_H_) \
                                 ;      36 	&& !defined(__int8_t_defined)
                                 ;      37    #define _STD_USING_BIT_TYPES
                                 ;      38    #define __int8_t_defined
                                 ;      39 
                                 ;      40 typedef signed char int8_t;
                                 ;      41 typedef short int16_t;
                                 ;      42 typedef _Int32t int32_t;
                                 ;      43   #endif /* !defined(__BIT_TYPES_DEFINED__) etc. */
                                 ;      44 
                                 ;      45 typedef unsigned char uint8_t;
                                 ;      46 typedef unsigned short uint16_t;
                                 ;      47 typedef _Uint32t uint32_t;
                                 ;      48 
                                 ;      49 typedef signed char int_least8_t;
                                 ;      50 typedef short int_least16_t;
                                 ;      51 typedef _Int32t int_least32_t;
                                 ;      52 typedef unsigned char uint_least8_t;
                                 ;      53 typedef unsigned short uint_least16_t;
                                 ;      54 typedef _Uint32t uint_least32_t;
                                 ;      55  #endif /* _SYS_INT_TYPES_H */
                                 ;      56 
                                 ;      57 typedef signed char int_fast8_t;
                                 ;      58 typedef short int_fast16_t;
                                 ;      59 typedef _Int32t int_fast32_t;
                                 ;      60 
                                 ;      61 typedef unsigned char uint_fast8_t;
                                 ;      62 typedef unsigned short uint_fast16_t;
                                 ;      63 typedef _Uint32t uint_fast32_t;
                                 ;      64 
                                 ;      65  #ifndef _INTPTR
                                 ;      66   #define _INTPTR	0	/* 0 => int, 1 => long, 2 => long long */
                                 ;      67  #endif /* _INTPTR */
                                 ;      68 
                                 ;      69  #ifndef _SYS_INT_TYPES_H
                                 ;      70 
                                 ;      71   #if !defined(_MACHTYPES_H_)
                                 ;      72 
                                 ;      73    #if !defined(_UINTPTR_T_DEFINED)
                                 ;      74     #define _UINTPTR_T_DEFINED
                                 ;      75     #define _STD_USING_UINTPTR_T
                                 ;      76 
                                 ;      77     #if _INTPTR == 0
                                 ;      78 typedef unsigned long uintptr_t;
                                 ;      79 
                                 ;      80     #elif _INTPTR == 1
                                 ;      81 typedef unsigned long uintptr_t;
                                 ;      82 
                                 ;      83     #elif _INTPTR == 2
                                 ;      84 typedef _ULonglong uintptr_t;
                                 ;      85 
                                 ;      86     #else /* _INTPTR */
                                 ;      87      #error bad _INTPTR value
                                 ;      88     #endif /* _INTPTR */
                                 ;      89 
                                 ;      90    #endif /* _UNITPTR_T_DEFINED */
                                 ;      91 
                                 ;      92    #if !defined(__int_ptr_t_defined) && !defined(_INTPTR_T_DEFINED)
                                 ;      93     #define _INTPTR_T_DEFINED
                                 ;      94     #define _STD_USING_INTPTR_T
                                 ;      95 
                                 ;      96     #if _INTPTR == 0
                                 ;      97 typedef long intptr_t;
                                 ;      98 
                                 ;      99     #elif _INTPTR == 1
                                 ;     100 typedef long intptr_t;
                                 ;     101 
                                 ;     102     #elif _INTPTR == 2
                                 ;     103 typedef _Longlong intptr_t;
                                 ;     104 
                                 ;     105     #else /* _INTPTR */
                                 ;     106      #error bad _INTPTR value
                                 ;     107     #endif /* _INTPTR */
                                 ;     108 
                                 ;     109     #endif /* __int_ptr_t_defined etc. */
                                 ;     110 
                                 ;     111    #ifndef __BIT_TYPES_DEFINED__
                                 ;     112 typedef _Longlong int64_t;
                                 ;     113    #endif /* __BIT_TYPES_DEFINED__ */
                                 ;     114 
                                 ;     115   #endif /* !defined(_MACHTYPES_H_) */
                                 ;     116 typedef _ULonglong uint64_t;
                                 ;     117 
                                 ;     118 typedef _Longlong int_least64_t;
                                 ;     119 typedef _ULonglong uint_least64_t;
                                 ;     120  #endif /* _SYS_INT_TYPES_H */
                                 ;     121 
                                 ;     122 typedef _Longlong int_fast64_t;
                                 ;     123 typedef _ULonglong uint_fast64_t;
                                 ;     124 
                                 ;     125  #if !defined(_SYS_INT_TYPES_H) && !defined(_INTMAXT)
                                 ;     126   #define _INTMAXT
                                 ;     127 typedef _Longlong intmax_t;
                                 ;     128 typedef _ULonglong uintmax_t;
                                 ;     129  #endif /* !defined(_SYS_INT_TYPES_H) etc. */
                                 ;     130 
                                 ;     131 		/* LIMIT MACROS */
                                 ;     132 #define INT8_MIN	(-0x7f - _C2)
                                 ;     133 #define INT16_MIN	(-0x7fff - _C2)
                                 ;     134 #define INT32_MIN	(-0x7fffffff - _C2)
                                 ;     135 
                                 ;     136 #define INT8_MAX	0x7f
                                 ;     137 #define INT16_MAX	0x7fff
                                 ;     138 #define INT32_MAX	0x7fffffff
                                 ;     139 #define UINT8_MAX	0xff
                                 ;     140 #define UINT16_MAX	0xffff
                                 ;     141 #define UINT32_MAX	0xffffffff
                                 ;     142 
                                 ;     143 #define INT_LEAST8_MIN		(-0x7f - _C2)
                                 ;     144 #define INT_LEAST16_MIN		(-0x7fff - _C2)
                                 ;     145 #define INT_LEAST32_MIN		(-0x7fffffff - _C2)
                                 ;     146 
                                 ;     147 #define INT_LEAST8_MAX		0x7f
                                 ;     148 #define INT_LEAST16_MAX		0x7fff
                                 ;     149 #define INT_LEAST32_MAX		0x7fffffff
                                 ;     150 #define UINT_LEAST8_MAX		0xff
                                 ;     151 #define UINT_LEAST16_MAX	0xffff
                                 ;     152 #define UINT_LEAST32_MAX	0xffffffff
                                 ;     153 
                                 ;     154 #define INT_FAST8_MIN		(-0x7f - _C2)
                                 ;     155 #define INT_FAST16_MIN		(-0x7fff - _C2)
                                 ;     156 #define INT_FAST32_MIN		(-0x7fffffff - _C2)
                                 ;     157 
                                 ;     158 #define INT_FAST8_MAX		0x7f
                                 ;     159 #define INT_FAST16_MAX		0x7fff
                                 ;     160 #define INT_FAST32_MAX		0x7fffffff
                                 ;     161 #define UINT_FAST8_MAX		0xff
                                 ;     162 #define UINT_FAST16_MAX		0xffff
                                 ;     163 #define UINT_FAST32_MAX		0xffffffff
                                 ;     164 
                                 ;     165  #if _INTPTR == 0 && !_ILONG
                                 ;     166 #define INTPTR_MAX			0x7fff
                                 ;     167 #define INTPTR_MIN			(-INTPTR_MAX - _C2)
                                 ;     168 #define UINTPTR_MAX			0xffff
                                 ;     169 
                                 ;     170  #elif _INTPTR == 1 || _INTPTR == 0 && _ILONG
                                 ;     171 #define INTPTR_MAX			0x7fffffff
                                 ;     172 #define INTPTR_MIN			(-INTPTR_MAX - _C2)
                                 ;     173 #define UINTPTR_MAX			0xffffffff
                                 ;     174 
                                 ;     175  #else /* _INTPTR == 2 */
                                 ;     176 #define INTPTR_MIN			(-_LLONG_MAX - _C2)
                                 ;     177 #define INTPTR_MAX			_LLONG_MAX
                                 ;     178 #define UINTPTR_MAX			_ULLONG_MAX
                                 ;     179 #endif /* _INTPTR */
                                 ;     180 
                                 ;     181 #define INT8_C(x)	(x)
                                 ;     182 #define INT16_C(x)	(x)
                                 ;     183 #define INT32_C(x)	((x) + (INT32_MAX - INT32_MAX))
                                 ;     184 
                                 ;     185 #define UINT8_C(x)	(x)
                                 ;     186 #define UINT16_C(x)	(x)
                                 ;     187 #define UINT32_C(x)	((x) + (UINT32_MAX - UINT32_MAX))
                                 ;     188 
                                 ;     189  #if _ILONG
                                 ;     190   #define PTRDIFF_MIN		INT32_MIN
                                 ;     191   #define PTRDIFF_MAX		INT32_MAX
                                 ;     192 
                                 ;     193   #define SIG_ATOMIC_MIN	INT32_MIN
                                 ;     194   #define SIG_ATOMIC_MAX	INT32_MAX
                                 ;     195 
                                 ;     196   #define SIZE_MAX			UINT32_MAX
                                 ;     197 
                                 ;     198  #else /* _ILONG */
                                 ;     199   #define PTRDIFF_MIN		INT16_MIN
                                 ;     200   #define PTRDIFF_MAX		INT16_MAX
                                 ;     201 
                                 ;     202   #define SIG_ATOMIC_MIN	INT16_MIN
                                 ;     203   #define SIG_ATOMIC_MAX	INT16_MAX
                                 ;     204 
                                 ;     205   #define SIZE_MAX			UINT16_MAX
                                 ;     206  #endif /* _ILONG */
                                 ;     207 
                                 ;     208 #define WCHAR_MIN	_WCMIN
                                 ;     209 #define WCHAR_MAX	_WCMAX
                                 ;     210 
                                 ;     211 #define WINT_MIN	_WCMIN
                                 ;     212 #define WINT_MAX	_WCMAX
                                 ;     213 
                                 ;     214  #define INT64_MIN	(-0x7fffffffffffffffLL - _C2)
                                 ;     215  #define INT64_MAX	0x7fffffffffffffffLL
                                 ;     216  #define UINT64_MAX	0xffffffffffffffffULL
                                 ;     217 
                                 ;     218  #define INT_LEAST64_MIN	(-0x7fffffffffffffffLL - _C2)
                                 ;     219  #define INT_LEAST64_MAX	0x7fffffffffffffffLL
                                 ;     220  #define UINT_LEAST64_MAX	0xffffffffffffffffULL
                                 ;     221 
                                 ;     222  #define INT_FAST64_MIN		(-0x7fffffffffffffffLL - _C2)
                                 ;     223  #define INT_FAST64_MAX		0x7fffffffffffffffLL
                                 ;     224  #define UINT_FAST64_MAX	0xffffffffffffffffULL
                                 ;     225 
                                 ;     226  #define INTMAX_MIN		(-0x7fffffffffffffffLL - _C2)
                                 ;     227  #define INTMAX_MAX		0x7fffffffffffffffLL
                                 ;     228  #define UINTMAX_MAX	0xffffffffffffffffULL
                                 ;     229 
                                 ;     230 #define INT64_C(x)		((x) + (INT64_MAX - INT64_MAX))
                                 ;     231 #define UINT64_C(x)		((x) + (UINT64_MAX - UINT64_MAX))
                                 ;     232 #define INTMAX_C(x)		INT64_C(x)
                                 ;     233 #define UINTMAX_C(x)	UINT64_C(x)
                                 ;     234 _C_STD_END
                                 ;     235 
                                 ;     236 #endif /* _STDINT */
                                 ;     237 
                                 ;     238  #if defined(_STD_USING)
                                 ;     239 
                                 ;     240   #ifdef _STD_USING_BIT_TYPES
                                 ;     241 using _CSTD int8_t; using _CSTD int16_t;
                                 ;     242 using _CSTD int32_t; using _CSTD int64_t;
                                 ;     243   #endif /* _STD_USING_BIT_TYPES */
                                 ;     244 
                                 ;     245   #ifdef _STD_USING_INT_TYPES
                                 ;     246 using _CSTD uint8_t; using _CSTD uint16_t;
                                 ;     247 using _CSTD uint32_t; using _CSTD uint64_t;
                                 ;     248 
                                 ;     249 using _CSTD int_least8_t; using _CSTD int_least16_t;
                                 ;     250 using _CSTD int_least32_t;  using _CSTD int_least64_t;
                                 ;     251 using _CSTD uint_least8_t; using _CSTD uint_least16_t;
                                 ;     252 using _CSTD uint_least32_t; using _CSTD uint_least64_t;
                                 ;     253 
                                 ;     254 using _CSTD intmax_t; using _CSTD uintmax_t;
                                 ;     255   #endif /* _STD_USING_INT_TYPES */
                                 ;     256 
                                 ;     257   #ifdef _STD_USING_UINTPTR_T
                                 ;     258 using _CSTD uintptr_t;
                                 ;     259   #endif /* _STD_USING_UINTPTR_T */
                                 ;     260 
                                 ;     261   #ifdef _STD_USING_INTPTR_T
                                 ;     262 using _CSTD intptr_t;
                                 ;     263   #endif /* _STD_USING_INTPTR_T */
                                 ;     264 
                                 ;     265 using _CSTD int_fast8_t; using _CSTD int_fast16_t;
                                 ;     266 using _CSTD int_fast32_t; using _CSTD int_fast64_t;
                                 ;     267 using _CSTD uint_fast8_t; using _CSTD uint_fast16_t;
                                 ;     268 using _CSTD uint_fast32_t; using _CSTD uint_fast64_t;
                                 ;     269  #endif /* defined(_STD_USING) */
                                 ;     270 
                                 ;     271 /*
                                 ;     272  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     273 V5.03:0216 */
                                 ;      23 #include "iodefine.h"
                                 ;       1 /********************************************************************************/
                                 ;       2 /*                                                                              */
                                 ;       3 /* Device     : RX/RX600/RX62N                                                  */
                                 ;       4 /* File Name  : ioedfine.h                                                      */
                                 ;       5 /* Abstract   : Definition of I/O Register.                                     */
                                 ;       6 /* History    : V1.1  (2010-04-21)  [Hardware Manual Revision : 0.50]           */
                                 ;       7 /* Note       : This is a typical example.                                      */
                                 ;       8 /*                                                                              */
                                 ;       9 /*  Copyright(c) 2010 Renesas Electronics Corp.                                 */
                                 ;      10 /*                  And Renesas Solutions Corp. ,All Rights Reserved.           */
                                 ;      11 /*                                                                              */
                                 ;      12 /********************************************************************************/
                                 ;      13 /*                                                                              */
                                 ;      14 /*  DESCRIPTION : Definition of ICU Register                                    */
                                 ;      15 /*  CPU TYPE    : RX62N                                                         */
                                 ;      16 /*                                                                              */
                                 ;      17 /*  Usage : IR,DTCER,IER,IPR of ICU Register                                    */
                                 ;      18 /*     The following IR, DTCE, IEN, IPR macro functions simplify usage.         */
                                 ;      19 /*     The bit access operation is "Bit_Name(interrupt source,name)".           */
                                 ;      20 /*     A part of the name can be omitted.                                       */
                                 ;      21 /*     for example :                                                            */
                                 ;      22 /*       IR(MTU0,TGIA0) = 0;     expands to :                                   */
                                 ;      23 /*         ICU.IR[114].BIT.IR = 0;                                              */
                                 ;      24 /*                                                                              */
                                 ;      25 /*       DTCE(ICU,IRQ0) = 1;     expands to :                                   */
                                 ;      26 /*         ICU.DTCER[64].BIT.DTCE = 1;                                          */
                                 ;      27 /*                                                                              */
                                 ;      28 /*       IEN(CMT0,CMI0) = 1;     expands to :                                   */
                                 ;      29 /*         ICU.IER[0x03].BIT.IEN4 = 1;                                          */
                                 ;      30 /*                                                                              */
                                 ;      31 /*       IPR(MTU1,TGIA1) = 2;    expands to :                                   */
                                 ;      32 /*       IPR(MTU1,TGI  ) = 2;    // TGIA1,TGIB1 share IPR level.                */
                                 ;      33 /*         ICU.IPR[0x53].BIT.IPR = 2;                                           */
                                 ;      34 /*                                                                              */
                                 ;      35 /*       IPR(SCI0,ERI0) = 3;     expands to :                                   */
                                 ;      36 /*       IPR(SCI0,    ) = 3;     // SCI0 uses single IPR for all sources.       */
                                 ;      37 /*         ICU.IPR[0x80].BIT.IPR = 3;                                           */
                                 ;      38 /*                                                                              */
                                 ;      39 /*  Usage : #pragma interrupt Function_Identifier(vect=**)                      */
                                 ;      40 /*     The number of vector is "(interrupt source, name)".                      */
                                 ;      41 /*     for example :                                                            */
                                 ;      42 /*       #pragma interrupt INT_IRQ0(vect=VECT(ICU,IRQ0))          expands to :  */
                                 ;      43 /*         #pragma interrupt INT_IRQ0(vect=64)                                  */
                                 ;      44 /*       #pragma interrupt INT_CMT0_CMI0(vect=VECT(CMT0,CMI0))    expands to :  */
                                 ;      45 /*         #pragma interrupt INT_CMT0_CMI0(vect=28)                             */
                                 ;      46 /*       #pragma interrupt INT_MTU0_TGIA0(vect=VECT(MTU0,TGIA0))  expands to :  */
                                 ;      47 /*         #pragma interrupt INT_MTU0_TGIA0(vect=114)                           */
                                 ;      48 /*                                                                              */
                                 ;      49 /*  Usage : MSTPCRA,MSTPCRB,MSTPCRC of SYSTEM Register                          */
                                 ;      50 /*     The bit access operation is "MSTP(name)".                                */
                                 ;      51 /*     The name that can be used is a macro name defined with "iodefine.h".     */
                                 ;      52 /*     for example :                                                            */
                                 ;      53 /*       MSTP(TMR2) = 0;    // TMR2,TMR3,TMR23                    expands to :  */
                                 ;      54 /*         SYSTEM.MSTPCRA.BIT.MSTPA4  = 0;                                      */
                                 ;      55 /*       MSTP(SCI0) = 0;    // SCI0,SMCI0                         expands to :  */
                                 ;      56 /*         SYSTEM.MSTPCRB.BIT.MSTPB31 = 0;                                      */
                                 ;      57 /*       MSTP(MTU4) = 0;    // MTUA,MTU0,MTU1,MTU2,MTU3,MTU4,MTU5 expands to :  */
                                 ;      58 /*         SYSTEM.MSTPCRA.BIT.MSTPA9  = 0;                                      */
                                 ;      59 /*       MSTP(CMT3) = 0;    // CMT2,CMT3                          expands to :  */
                                 ;      60 /*         SYSTEM.MSTPCRA.BIT.MSTPA14 = 0;                                      */
                                 ;      61 /*                                                                              */
                                 ;      62 /********************************************************************************/
                                 ;      63 #ifndef __RX62NIODEFINE_HEADER__
                                 ;      64 #define __RX62NIODEFINE_HEADER__
                                 ;      65 #pragma bit_order left
                                 ;      66 #pragma unpack
                                 ;      67 struct st_system {
                                 ;      68     union {
                                 ;      69         unsigned short WORD;
                                 ;      70         struct {
                                 ;      71             unsigned short :8;
                                 ;      72             unsigned short MDE:1;
                                 ;      73             unsigned short :5;
                                 ;      74             unsigned short MD1:1;
                                 ;      75             unsigned short MD0:1;
                                 ;      76         } BIT;
                                 ;      77     } MDMONR;
                                 ;      78     union {
                                 ;      79         unsigned short WORD;
                                 ;      80         struct {
                                 ;      81             unsigned short :9;
                                 ;      82             unsigned short UBTS:1;
                                 ;      83             unsigned short :1;
                                 ;      84             unsigned short BOTS:1;
                                 ;      85             unsigned short BSW:2;
                                 ;      86             unsigned short EXB:1;
                                 ;      87             unsigned short IROM:1;
                                 ;      88         } BIT;
                                 ;      89     } MDSR;
                                 ;      90     unsigned char wk0[2];
                                 ;      91     union {
                                 ;      92         unsigned short WORD;
                                 ;      93         struct {
                                 ;      94             unsigned short KEY:8;
                                 ;      95             unsigned short :6;
                                 ;      96             unsigned short EXBE:1;
                                 ;      97             unsigned short ROME:1;
                                 ;      98         } BIT;
                                 ;      99     } SYSCR0;
                                 ;     100     union {
                                 ;     101         unsigned short WORD;
                                 ;     102         struct {
                                 ;     103             unsigned short :15;
                                 ;     104             unsigned short RAME:1;
                                 ;     105         } BIT;
                                 ;     106     } SYSCR1;
                                 ;     107     unsigned char wk1[2];
                                 ;     108     union {
                                 ;     109         unsigned short WORD;
                                 ;     110         struct {
                                 ;     111             unsigned short SSBY:1;
                                 ;     112             unsigned short OPE:1;
                                 ;     113             unsigned short :1;
                                 ;     114             unsigned short STS:5;
                                 ;     115             unsigned short :8;
                                 ;     116         } BIT;
                                 ;     117     } SBYCR;
                                 ;     118     unsigned char wk2[2];
                                 ;     119     union {
                                 ;     120         unsigned long LONG;
                                 ;     121         struct {
                                 ;     122             unsigned long ACSE:1;
                                 ;     123             unsigned long :1;
                                 ;     124             unsigned long MSTPA29:1;
                                 ;     125             unsigned long MSTPA28:1;
                                 ;     126             unsigned long :4;
                                 ;     127             unsigned long MSTPA23:1;
                                 ;     128             unsigned long MSTPA22:1;
                                 ;     129             unsigned long :2;
                                 ;     130             unsigned long MSTPA19:1;
                                 ;     131             unsigned long :1;
                                 ;     132             unsigned long MSTPA17:1;
                                 ;     133             unsigned long :1;
                                 ;     134             unsigned long MSTPA15:1;
                                 ;     135             unsigned long MSTPA14:1;
                                 ;     136             unsigned long :2;
                                 ;     137             unsigned long MSTPA11:1;
                                 ;     138             unsigned long MSTPA10:1;
                                 ;     139             unsigned long MSTPA9:1;
                                 ;     140             unsigned long MSTPA8:1;
                                 ;     141             unsigned long :2;
                                 ;     142             unsigned long MSTPA5:1;
                                 ;     143             unsigned long MSTPA4:1;
                                 ;     144             unsigned long :4;
                                 ;     145         } BIT;
                                 ;     146     } MSTPCRA;
                                 ;     147     union {
                                 ;     148         unsigned long LONG;
                                 ;     149         struct {
                                 ;     150             unsigned long MSTPB31:1;
                                 ;     151             unsigned long MSTPB30:1;
                                 ;     152             unsigned long MSTPB29:1;
                                 ;     153             unsigned long MSTPB28:1;
                                 ;     154             unsigned long :1;
                                 ;     155             unsigned long MSTPB26:1;
                                 ;     156             unsigned long MSTPB25:1;
                                 ;     157             unsigned long :1;
                                 ;     158             unsigned long MSTPB23:1;
                                 ;     159             unsigned long :1;
                                 ;     160             unsigned long MSTPB21:1;
                                 ;     161             unsigned long MSTPB20:1;
                                 ;     162             unsigned long MSTPB19:1;
                                 ;     163             unsigned long MSTPB18:1;
                                 ;     164             unsigned long MSTPB17:1;
                                 ;     165             unsigned long MSTPB16:1;
                                 ;     166             unsigned long MSTPB15:1;
                                 ;     167             unsigned long :14;
                                 ;     168             unsigned long MSTPB0:1;
                                 ;     169         } BIT;
                                 ;     170     } MSTPCRB;
                                 ;     171     union {
                                 ;     172         unsigned long LONG;
                                 ;     173         struct {
                                 ;     174             unsigned long :30;
                                 ;     175             unsigned long MSTPC1:1;
                                 ;     176             unsigned long MSTPC0:1;
                                 ;     177         } BIT;
                                 ;     178     } MSTPCRC;
                                 ;     179     unsigned char wk3[4];
                                 ;     180     union {
                                 ;     181         unsigned long LONG;
                                 ;     182         struct {
                                 ;     183             unsigned long :4;
                                 ;     184             unsigned long ICK:4;
                                 ;     185             unsigned long PSTOP1:1;
                                 ;     186             unsigned long PSTOP0:1;
                                 ;     187             unsigned long :2;
                                 ;     188             unsigned long BCK:4;
                                 ;     189             unsigned long :4;
                                 ;     190             unsigned long PCK:4;
                                 ;     191             unsigned long :8;
                                 ;     192         } BIT;
                                 ;     193     } SCKCR;
                                 ;     194     unsigned char wk4[12];
                                 ;     195     union {
                                 ;     196         unsigned char BYTE;
                                 ;     197         struct {
                                 ;     198             unsigned char :7;
                                 ;     199             unsigned char BCLKDIV:1;
                                 ;     200         } BIT;
                                 ;     201     } BCKCR;
                                 ;     202     unsigned char wk5[15];
                                 ;     203     union {
                                 ;     204         unsigned short WORD;
                                 ;     205         struct {
                                 ;     206             unsigned short KEY:8;
                                 ;     207             unsigned short OSTDE:1;
                                 ;     208             unsigned short OSTDF:1;
                                 ;     209             unsigned short :6;
                                 ;     210         } BIT;
                                 ;     211     } OSTDCR;
                                 ;     212     unsigned char wk6[49726];
                                 ;     213     union {
                                 ;     214         unsigned char BYTE;
                                 ;     215         struct {
                                 ;     216             unsigned char DPSBY:1;
                                 ;     217             unsigned char IOKEEP:1;
                                 ;     218             unsigned char RAMCUT2:1;
                                 ;     219             unsigned char RAMCUT1:1;
                                 ;     220             unsigned char :3;
                                 ;     221             unsigned char RAMCUT0:1;
                                 ;     222         } BIT;
                                 ;     223     } DPSBYCR;
                                 ;     224     union {
                                 ;     225         unsigned char BYTE;
                                 ;     226         struct {
                                 ;     227             unsigned char :2;
                                 ;     228             unsigned char WTSTS:6;
                                 ;     229         } BIT;
                                 ;     230     } DPSWCR;
                                 ;     231     union {
                                 ;     232         unsigned char BYTE;
                                 ;     233         struct {
                                 ;     234             unsigned char DNMIE:1;
                                 ;     235             unsigned char DUSBE:1;
                                 ;     236             unsigned char DRTCE:1;
                                 ;     237             unsigned char DLVDE:1;
                                 ;     238             unsigned char DIRQ3E:1;
                                 ;     239             unsigned char DIRQ2E:1;
                                 ;     240             unsigned char DIRQ1E:1;
                                 ;     241             unsigned char DIRQ0E:1;
                                 ;     242         } BIT;
                                 ;     243     } DPSIER;
                                 ;     244     union {
                                 ;     245         unsigned char BYTE;
                                 ;     246         struct {
                                 ;     247             unsigned char DNMIF:1;
                                 ;     248             unsigned char DUSBF:1;
                                 ;     249             unsigned char DRTCFF:1;
                                 ;     250             unsigned char DLVDF:1;
                                 ;     251             unsigned char DIRQ3F:1;
                                 ;     252             unsigned char DIRQ2F:1;
                                 ;     253             unsigned char DIRQ1F:1;
                                 ;     254             unsigned char DIRQ0F:1;
                                 ;     255         } BIT;
                                 ;     256     } DPSIFR;
                                 ;     257     union {
                                 ;     258         unsigned char BYTE;
                                 ;     259         struct {
                                 ;     260             unsigned char DNMIEG:1;
                                 ;     261             unsigned char :3;
                                 ;     262             unsigned char DIRQ3EG:1;
                                 ;     263             unsigned char DIRQ2EG:1;
                                 ;     264             unsigned char DIRQ1EG:1;
                                 ;     265             unsigned char DIRQ0EG:1;
                                 ;     266         } BIT;
                                 ;     267     } DPSIEGR;
                                 ;     268     union {
                                 ;     269         unsigned char BYTE;
                                 ;     270         struct {
                                 ;     271             unsigned char DPSRSTF:1;
                                 ;     272             unsigned char :4;
                                 ;     273             unsigned char LVD2F:1;
                                 ;     274             unsigned char LVD1F:1;
                                 ;     275             unsigned char PORF:1;
                                 ;     276         } BIT;
                                 ;     277     } RSTSR;
                                 ;     278     unsigned char wk7[4];
                                 ;     279     union {
                                 ;     280         unsigned char BYTE;
                                 ;     281         struct {
                                 ;     282             unsigned char :7;
                                 ;     283             unsigned char SUBSTOP:1;
                                 ;     284         } BIT;
                                 ;     285     } SUBOSCCR;
                                 ;     286     unsigned char wk8[1];
                                 ;     287     unsigned char LVDKEYR;
                                 ;     288     union {
                                 ;     289         unsigned char BYTE;
                                 ;     290         struct {
                                 ;     291             unsigned char LVD2E:1;
                                 ;     292             unsigned char LVD2RI:1;
                                 ;     293             unsigned char :2;
                                 ;     294             unsigned char LVD1E:1;
                                 ;     295             unsigned char LVD1RI:1;
                                 ;     296             unsigned char :2;
                                 ;     297         } BIT;
                                 ;     298     } LVDCR;
                                 ;     299     unsigned char wk9[2];
                                 ;     300     unsigned char DPSBKR[32];
                                 ;     301 };
                                 ;     302 
                                 ;     303 struct st_bsc {
                                 ;     304     union {
                                 ;     305         unsigned char BYTE;
                                 ;     306         struct {
                                 ;     307             unsigned char :7;
                                 ;     308             unsigned char STSCLR:1;
                                 ;     309         } BIT;
                                 ;     310     } BERCLR;
                                 ;     311     unsigned char wk0[3];
                                 ;     312     union {
                                 ;     313         unsigned char BYTE;
                                 ;     314         struct {
                                 ;     315             unsigned char :6;
                                 ;     316             unsigned char TOEN:1;
                                 ;     317             unsigned char IGAEN:1;
                                 ;     318         } BIT;
                                 ;     319     } BEREN;
                                 ;     320     unsigned char wk1[3];
                                 ;     321     union {
                                 ;     322         unsigned char BYTE;
                                 ;     323         struct {
                                 ;     324             unsigned char :1;
                                 ;     325             unsigned char MST:3;
                                 ;     326             unsigned char :2;
                                 ;     327             unsigned char TO:1;
                                 ;     328             unsigned char IA:1;
                                 ;     329         } BIT;
                                 ;     330     } BERSR1;
                                 ;     331     unsigned char wk2[1];
                                 ;     332     union {
                                 ;     333         unsigned short WORD;
                                 ;     334         struct {
                                 ;     335             unsigned short ADDR:13;
                                 ;     336             unsigned short :3;
                                 ;     337         } BIT;
                                 ;     338     } BERSR2;
                                 ;     339     unsigned char wk3[7414];
                                 ;     340     union {
                                 ;     341         unsigned short WORD;
                                 ;     342         struct {
                                 ;     343             unsigned short PRMOD:1;
                                 ;     344             unsigned short :5;
                                 ;     345             unsigned short PWENB:1;
                                 ;     346             unsigned short PRENB:1;
                                 ;     347             unsigned short :4;
                                 ;     348             unsigned short EWENB:1;
                                 ;     349             unsigned short :2;
                                 ;     350             unsigned short WRMOD:1;
                                 ;     351         } BIT;
                                 ;     352     } CS0MOD;
                                 ;     353     union {
                                 ;     354         unsigned long LONG;
                                 ;     355         struct {
                                 ;     356             unsigned long :3;
                                 ;     357             unsigned long CSRWAIT:5;
                                 ;     358             unsigned long :3;
                                 ;     359             unsigned long CSWWAIT:5;
                                 ;     360             unsigned long :5;
                                 ;     361             unsigned long CSPRWAIT:3;
                                 ;     362             unsigned long :5;
                                 ;     363             unsigned long CSPWWAIT:3;
                                 ;     364         } BIT;
                                 ;     365     } CS0WCR1;
                                 ;     366     union {
                                 ;     367         unsigned long LONG;
                                 ;     368         struct {
                                 ;     369             unsigned long :1;
                                 ;     370             unsigned long CSON:3;
                                 ;     371             unsigned long :1;
                                 ;     372             unsigned long WDON:3;
                                 ;     373             unsigned long :1;
                                 ;     374             unsigned long WRON:3;
                                 ;     375             unsigned long :1;
                                 ;     376             unsigned long RDON:3;
                                 ;     377             unsigned long :5;
                                 ;     378             unsigned long WDOFF:3;
                                 ;     379             unsigned long :1;
                                 ;     380             unsigned long CSWOFF:3;
                                 ;     381             unsigned long :1;
                                 ;     382             unsigned long CSROFF:3;
                                 ;     383         } BIT;
                                 ;     384     } CS0WCR2;
                                 ;     385     unsigned char wk4[6];
                                 ;     386     union {
                                 ;     387         unsigned short WORD;
                                 ;     388         struct {
                                 ;     389             unsigned short PRMOD:1;
                                 ;     390             unsigned short :5;
                                 ;     391             unsigned short PWENB:1;
                                 ;     392             unsigned short PRENB:1;
                                 ;     393             unsigned short :4;
                                 ;     394             unsigned short EWENB:1;
                                 ;     395             unsigned short :2;
                                 ;     396             unsigned short WRMOD:1;
                                 ;     397         } BIT;
                                 ;     398     } CS1MOD;
                                 ;     399     union {
                                 ;     400         unsigned long LONG;
                                 ;     401         struct {
                                 ;     402             unsigned long :3;
                                 ;     403             unsigned long CSRWAIT:5;
                                 ;     404             unsigned long :3;
                                 ;     405             unsigned long CSWWAIT:5;
                                 ;     406             unsigned long :5;
                                 ;     407             unsigned long CSPRWAIT:3;
                                 ;     408             unsigned long :5;
                                 ;     409             unsigned long CSPWWAIT:3;
                                 ;     410         } BIT;
                                 ;     411     } CS1WCR1;
                                 ;     412     union {
                                 ;     413         unsigned long LONG;
                                 ;     414         struct {
                                 ;     415             unsigned long :1;
                                 ;     416             unsigned long CSON:3;
                                 ;     417             unsigned long :1;
                                 ;     418             unsigned long WDON:3;
                                 ;     419             unsigned long :1;
                                 ;     420             unsigned long WRON:3;
                                 ;     421             unsigned long :1;
                                 ;     422             unsigned long RDON:3;
                                 ;     423             unsigned long :5;
                                 ;     424             unsigned long WDOFF:3;
                                 ;     425             unsigned long :1;
                                 ;     426             unsigned long CSWOFF:3;
                                 ;     427             unsigned long :1;
                                 ;     428             unsigned long CSROFF:3;
                                 ;     429         } BIT;
                                 ;     430     } CS1WCR2;
                                 ;     431     unsigned char wk5[6];
                                 ;     432     union {
                                 ;     433         unsigned short WORD;
                                 ;     434         struct {
                                 ;     435             unsigned short PRMOD:1;
                                 ;     436             unsigned short :5;
                                 ;     437             unsigned short PWENB:1;
                                 ;     438             unsigned short PRENB:1;
                                 ;     439             unsigned short :4;
                                 ;     440             unsigned short EWENB:1;
                                 ;     441             unsigned short :2;
                                 ;     442             unsigned short WRMOD:1;
                                 ;     443         } BIT;
                                 ;     444     } CS2MOD;
                                 ;     445     union {
                                 ;     446         unsigned long LONG;
                                 ;     447         struct {
                                 ;     448             unsigned long :3;
                                 ;     449             unsigned long CSRWAIT:5;
                                 ;     450             unsigned long :3;
                                 ;     451             unsigned long CSWWAIT:5;
                                 ;     452             unsigned long :5;
                                 ;     453             unsigned long CSPRWAIT:3;
                                 ;     454             unsigned long :5;
                                 ;     455             unsigned long CSPWWAIT:3;
                                 ;     456         } BIT;
                                 ;     457     } CS2WCR1;
                                 ;     458     union {
                                 ;     459         unsigned long LONG;
                                 ;     460         struct {
                                 ;     461             unsigned long :1;
                                 ;     462             unsigned long CSON:3;
                                 ;     463             unsigned long :1;
                                 ;     464             unsigned long WDON:3;
                                 ;     465             unsigned long :1;
                                 ;     466             unsigned long WRON:3;
                                 ;     467             unsigned long :1;
                                 ;     468             unsigned long RDON:3;
                                 ;     469             unsigned long :5;
                                 ;     470             unsigned long WDOFF:3;
                                 ;     471             unsigned long :1;
                                 ;     472             unsigned long CSWOFF:3;
                                 ;     473             unsigned long :1;
                                 ;     474             unsigned long CSROFF:3;
                                 ;     475         } BIT;
                                 ;     476     } CS2WCR2;
                                 ;     477     unsigned char wk6[6];
                                 ;     478     union {
                                 ;     479         unsigned short WORD;
                                 ;     480         struct {
                                 ;     481             unsigned short PRMOD:1;
                                 ;     482             unsigned short :5;
                                 ;     483             unsigned short PWENB:1;
                                 ;     484             unsigned short PRENB:1;
                                 ;     485             unsigned short :4;
                                 ;     486             unsigned short EWENB:1;
                                 ;     487             unsigned short :2;
                                 ;     488             unsigned short WRMOD:1;
                                 ;     489         } BIT;
                                 ;     490     } CS3MOD;
                                 ;     491     union {
                                 ;     492         unsigned long LONG;
                                 ;     493         struct {
                                 ;     494             unsigned long :3;
                                 ;     495             unsigned long CSRWAIT:5;
                                 ;     496             unsigned long :3;
                                 ;     497             unsigned long CSWWAIT:5;
                                 ;     498             unsigned long :5;
                                 ;     499             unsigned long CSPRWAIT:3;
                                 ;     500             unsigned long :5;
                                 ;     501             unsigned long CSPWWAIT:3;
                                 ;     502         } BIT;
                                 ;     503     } CS3WCR1;
                                 ;     504     union {
                                 ;     505         unsigned long LONG;
                                 ;     506         struct {
                                 ;     507             unsigned long :1;
                                 ;     508             unsigned long CSON:3;
                                 ;     509             unsigned long :1;
                                 ;     510             unsigned long WDON:3;
                                 ;     511             unsigned long :1;
                                 ;     512             unsigned long WRON:3;
                                 ;     513             unsigned long :1;
                                 ;     514             unsigned long RDON:3;
                                 ;     515             unsigned long :5;
                                 ;     516             unsigned long WDOFF:3;
                                 ;     517             unsigned long :1;
                                 ;     518             unsigned long CSWOFF:3;
                                 ;     519             unsigned long :1;
                                 ;     520             unsigned long CSROFF:3;
                                 ;     521         } BIT;
                                 ;     522     } CS3WCR2;
                                 ;     523     unsigned char wk7[6];
                                 ;     524     union {
                                 ;     525         unsigned short WORD;
                                 ;     526         struct {
                                 ;     527             unsigned short PRMOD:1;
                                 ;     528             unsigned short :5;
                                 ;     529             unsigned short PWENB:1;
                                 ;     530             unsigned short PRENB:1;
                                 ;     531             unsigned short :4;
                                 ;     532             unsigned short EWENB:1;
                                 ;     533             unsigned short :2;
                                 ;     534             unsigned short WRMOD:1;
                                 ;     535         } BIT;
                                 ;     536     } CS4MOD;
                                 ;     537     union {
                                 ;     538         unsigned long LONG;
                                 ;     539         struct {
                                 ;     540             unsigned long :3;
                                 ;     541             unsigned long CSRWAIT:5;
                                 ;     542             unsigned long :3;
                                 ;     543             unsigned long CSWWAIT:5;
                                 ;     544             unsigned long :5;
                                 ;     545             unsigned long CSPRWAIT:3;
                                 ;     546             unsigned long :5;
                                 ;     547             unsigned long CSPWWAIT:3;
                                 ;     548         } BIT;
                                 ;     549     } CS4WCR1;
                                 ;     550     union {
                                 ;     551         unsigned long LONG;
                                 ;     552         struct {
                                 ;     553             unsigned long :1;
                                 ;     554             unsigned long CSON:3;
                                 ;     555             unsigned long :1;
                                 ;     556             unsigned long WDON:3;
                                 ;     557             unsigned long :1;
                                 ;     558             unsigned long WRON:3;
                                 ;     559             unsigned long :1;
                                 ;     560             unsigned long RDON:3;
                                 ;     561             unsigned long :5;
                                 ;     562             unsigned long WDOFF:3;
                                 ;     563             unsigned long :1;
                                 ;     564             unsigned long CSWOFF:3;
                                 ;     565             unsigned long :1;
                                 ;     566             unsigned long CSROFF:3;
                                 ;     567         } BIT;
                                 ;     568     } CS4WCR2;
                                 ;     569     unsigned char wk8[6];
                                 ;     570     union {
                                 ;     571         unsigned short WORD;
                                 ;     572         struct {
                                 ;     573             unsigned short PRMOD:1;
                                 ;     574             unsigned short :5;
                                 ;     575             unsigned short PWENB:1;
                                 ;     576             unsigned short PRENB:1;
                                 ;     577             unsigned short :4;
                                 ;     578             unsigned short EWENB:1;
                                 ;     579             unsigned short :2;
                                 ;     580             unsigned short WRMOD:1;
                                 ;     581         } BIT;
                                 ;     582     } CS5MOD;
                                 ;     583     union {
                                 ;     584         unsigned long LONG;
                                 ;     585         struct {
                                 ;     586             unsigned long :3;
                                 ;     587             unsigned long CSRWAIT:5;
                                 ;     588             unsigned long :3;
                                 ;     589             unsigned long CSWWAIT:5;
                                 ;     590             unsigned long :5;
                                 ;     591             unsigned long CSPRWAIT:3;
                                 ;     592             unsigned long :5;
                                 ;     593             unsigned long CSPWWAIT:3;
                                 ;     594         } BIT;
                                 ;     595     } CS5WCR1;
                                 ;     596     union {
                                 ;     597         unsigned long LONG;
                                 ;     598         struct {
                                 ;     599             unsigned long :1;
                                 ;     600             unsigned long CSON:3;
                                 ;     601             unsigned long :1;
                                 ;     602             unsigned long WDON:3;
                                 ;     603             unsigned long :1;
                                 ;     604             unsigned long WRON:3;
                                 ;     605             unsigned long :1;
                                 ;     606             unsigned long RDON:3;
                                 ;     607             unsigned long :5;
                                 ;     608             unsigned long WDOFF:3;
                                 ;     609             unsigned long :1;
                                 ;     610             unsigned long CSWOFF:3;
                                 ;     611             unsigned long :1;
                                 ;     612             unsigned long CSROFF:3;
                                 ;     613         } BIT;
                                 ;     614     } CS5WCR2;
                                 ;     615     unsigned char wk9[6];
                                 ;     616     union {
                                 ;     617         unsigned short WORD;
                                 ;     618         struct {
                                 ;     619             unsigned short PRMOD:1;
                                 ;     620             unsigned short :5;
                                 ;     621             unsigned short PWENB:1;
                                 ;     622             unsigned short PRENB:1;
                                 ;     623             unsigned short :4;
                                 ;     624             unsigned short EWENB:1;
                                 ;     625             unsigned short :2;
                                 ;     626             unsigned short WRMOD:1;
                                 ;     627         } BIT;
                                 ;     628     } CS6MOD;
                                 ;     629     union {
                                 ;     630         unsigned long LONG;
                                 ;     631         struct {
                                 ;     632             unsigned long :3;
                                 ;     633             unsigned long CSRWAIT:5;
                                 ;     634             unsigned long :3;
                                 ;     635             unsigned long CSWWAIT:5;
                                 ;     636             unsigned long :5;
                                 ;     637             unsigned long CSPRWAIT:3;
                                 ;     638             unsigned long :5;
                                 ;     639             unsigned long CSPWWAIT:3;
                                 ;     640         } BIT;
                                 ;     641     } CS6WCR1;
                                 ;     642     union {
                                 ;     643         unsigned long LONG;
                                 ;     644         struct {
                                 ;     645             unsigned long :1;
                                 ;     646             unsigned long CSON:3;
                                 ;     647             unsigned long :1;
                                 ;     648             unsigned long WDON:3;
                                 ;     649             unsigned long :1;
                                 ;     650             unsigned long WRON:3;
                                 ;     651             unsigned long :1;
                                 ;     652             unsigned long RDON:3;
                                 ;     653             unsigned long :5;
                                 ;     654             unsigned long WDOFF:3;
                                 ;     655             unsigned long :1;
                                 ;     656             unsigned long CSWOFF:3;
                                 ;     657             unsigned long :1;
                                 ;     658             unsigned long CSROFF:3;
                                 ;     659         } BIT;
                                 ;     660     } CS6WCR2;
                                 ;     661     unsigned char wk10[6];
                                 ;     662     union {
                                 ;     663         unsigned short WORD;
                                 ;     664         struct {
                                 ;     665             unsigned short PRMOD:1;
                                 ;     666             unsigned short :5;
                                 ;     667             unsigned short PWENB:1;
                                 ;     668             unsigned short PRENB:1;
                                 ;     669             unsigned short :4;
                                 ;     670             unsigned short EWENB:1;
                                 ;     671             unsigned short :2;
                                 ;     672             unsigned short WRMOD:1;
                                 ;     673         } BIT;
                                 ;     674     } CS7MOD;
                                 ;     675     union {
                                 ;     676         unsigned long LONG;
                                 ;     677         struct {
                                 ;     678             unsigned long :3;
                                 ;     679             unsigned long CSRWAIT:5;
                                 ;     680             unsigned long :3;
                                 ;     681             unsigned long CSWWAIT:5;
                                 ;     682             unsigned long :5;
                                 ;     683             unsigned long CSPRWAIT:3;
                                 ;     684             unsigned long :5;
                                 ;     685             unsigned long CSPWWAIT:3;
                                 ;     686         } BIT;
                                 ;     687     } CS7WCR1;
                                 ;     688     union {
                                 ;     689         unsigned long LONG;
                                 ;     690         struct {
                                 ;     691             unsigned long :1;
                                 ;     692             unsigned long CSON:3;
                                 ;     693             unsigned long :1;
                                 ;     694             unsigned long WDON:3;
                                 ;     695             unsigned long :1;
                                 ;     696             unsigned long WRON:3;
                                 ;     697             unsigned long :1;
                                 ;     698             unsigned long RDON:3;
                                 ;     699             unsigned long :5;
                                 ;     700             unsigned long WDOFF:3;
                                 ;     701             unsigned long :1;
                                 ;     702             unsigned long CSWOFF:3;
                                 ;     703             unsigned long :1;
                                 ;     704             unsigned long CSROFF:3;
                                 ;     705         } BIT;
                                 ;     706     } CS7WCR2;
                                 ;     707     unsigned char wk11[1926];
                                 ;     708     union {
                                 ;     709         unsigned short WORD;
                                 ;     710         struct {
                                 ;     711             unsigned short :7;
                                 ;     712             unsigned short EMODE:1;
                                 ;     713             unsigned short :2;
                                 ;     714             unsigned short BSIZE:2;
                                 ;     715             unsigned short :3;
                                 ;     716             unsigned short EXENB:1;
                                 ;     717         } BIT;
                                 ;     718     } CS0CR;
                                 ;     719     unsigned char wk12[6];
                                 ;     720     union {
                                 ;     721         unsigned short WORD;
                                 ;     722         struct {
                                 ;     723             unsigned short :4;
                                 ;     724             unsigned short WRCV:4;
                                 ;     725             unsigned short :4;
                                 ;     726             unsigned short RRCV:4;
                                 ;     727         } BIT;
                                 ;     728     } CS0REC;
                                 ;     729     unsigned char wk13[6];
                                 ;     730     union {
                                 ;     731         unsigned short WORD;
                                 ;     732         struct {
                                 ;     733             unsigned short :7;
                                 ;     734             unsigned short EMODE:1;
                                 ;     735             unsigned short :2;
                                 ;     736             unsigned short BSIZE:2;
                                 ;     737             unsigned short :3;
                                 ;     738             unsigned short EXENB:1;
                                 ;     739         } BIT;
                                 ;     740     } CS1CR;
                                 ;     741     unsigned char wk14[6];
                                 ;     742     union {
                                 ;     743         unsigned short WORD;
                                 ;     744         struct {
                                 ;     745             unsigned short :4;
                                 ;     746             unsigned short WRCV:4;
                                 ;     747             unsigned short :4;
                                 ;     748             unsigned short RRCV:4;
                                 ;     749         } BIT;
                                 ;     750     } CS1REC;
                                 ;     751     unsigned char wk15[6];
                                 ;     752     union {
                                 ;     753         unsigned short WORD;
                                 ;     754         struct {
                                 ;     755             unsigned short :7;
                                 ;     756             unsigned short EMODE:1;
                                 ;     757             unsigned short :2;
                                 ;     758             unsigned short BSIZE:2;
                                 ;     759             unsigned short :3;
                                 ;     760             unsigned short EXENB:1;
                                 ;     761         } BIT;
                                 ;     762     } CS2CR;
                                 ;     763     unsigned char wk16[6];
                                 ;     764     union {
                                 ;     765         unsigned short WORD;
                                 ;     766         struct {
                                 ;     767             unsigned short :4;
                                 ;     768             unsigned short WRCV:4;
                                 ;     769             unsigned short :4;
                                 ;     770             unsigned short RRCV:4;
                                 ;     771         } BIT;
                                 ;     772     } CS2REC;
                                 ;     773     unsigned char wk17[6];
                                 ;     774     union {
                                 ;     775         unsigned short WORD;
                                 ;     776         struct {
                                 ;     777             unsigned short :7;
                                 ;     778             unsigned short EMODE:1;
                                 ;     779             unsigned short :2;
                                 ;     780             unsigned short BSIZE:2;
                                 ;     781             unsigned short :3;
                                 ;     782             unsigned short EXENB:1;
                                 ;     783         } BIT;
                                 ;     784     } CS3CR;
                                 ;     785     unsigned char wk18[6];
                                 ;     786     union {
                                 ;     787         unsigned short WORD;
                                 ;     788         struct {
                                 ;     789             unsigned short :4;
                                 ;     790             unsigned short WRCV:4;
                                 ;     791             unsigned short :4;
                                 ;     792             unsigned short RRCV:4;
                                 ;     793         } BIT;
                                 ;     794     } CS3REC;
                                 ;     795     unsigned char wk19[6];
                                 ;     796     union {
                                 ;     797         unsigned short WORD;
                                 ;     798         struct {
                                 ;     799             unsigned short :7;
                                 ;     800             unsigned short EMODE:1;
                                 ;     801             unsigned short :2;
                                 ;     802             unsigned short BSIZE:2;
                                 ;     803             unsigned short :3;
                                 ;     804             unsigned short EXENB:1;
                                 ;     805         } BIT;
                                 ;     806     } CS4CR;
                                 ;     807     unsigned char wk20[6];
                                 ;     808     union {
                                 ;     809         unsigned short WORD;
                                 ;     810         struct {
                                 ;     811             unsigned short :4;
                                 ;     812             unsigned short WRCV:4;
                                 ;     813             unsigned short :4;
                                 ;     814             unsigned short RRCV:4;
                                 ;     815         } BIT;
                                 ;     816     } CS4REC;
                                 ;     817     unsigned char wk21[6];
                                 ;     818     union {
                                 ;     819         unsigned short WORD;
                                 ;     820         struct {
                                 ;     821             unsigned short :7;
                                 ;     822             unsigned short EMODE:1;
                                 ;     823             unsigned short :2;
                                 ;     824             unsigned short BSIZE:2;
                                 ;     825             unsigned short :3;
                                 ;     826             unsigned short EXENB:1;
                                 ;     827         } BIT;
                                 ;     828     } CS5CR;
                                 ;     829     unsigned char wk22[6];
                                 ;     830     union {
                                 ;     831         unsigned short WORD;
                                 ;     832         struct {
                                 ;     833             unsigned short :4;
                                 ;     834             unsigned short WRCV:4;
                                 ;     835             unsigned short :4;
                                 ;     836             unsigned short RRCV:4;
                                 ;     837         } BIT;
                                 ;     838     } CS5REC;
                                 ;     839     unsigned char wk23[6];
                                 ;     840     union {
                                 ;     841         unsigned short WORD;
                                 ;     842         struct {
                                 ;     843             unsigned short :7;
                                 ;     844             unsigned short EMODE:1;
                                 ;     845             unsigned short :2;
                                 ;     846             unsigned short BSIZE:2;
                                 ;     847             unsigned short :3;
                                 ;     848             unsigned short EXENB:1;
                                 ;     849         } BIT;
                                 ;     850     } CS6CR;
                                 ;     851     unsigned char wk24[6];
                                 ;     852     union {
                                 ;     853         unsigned short WORD;
                                 ;     854         struct {
                                 ;     855             unsigned short :4;
                                 ;     856             unsigned short WRCV:4;
                                 ;     857             unsigned short :4;
                                 ;     858             unsigned short RRCV:4;
                                 ;     859         } BIT;
                                 ;     860     } CS6REC;
                                 ;     861     unsigned char wk25[6];
                                 ;     862     union {
                                 ;     863         unsigned short WORD;
                                 ;     864         struct {
                                 ;     865             unsigned short :7;
                                 ;     866             unsigned short EMODE:1;
                                 ;     867             unsigned short :2;
                                 ;     868             unsigned short BSIZE:2;
                                 ;     869             unsigned short :3;
                                 ;     870             unsigned short EXENB:1;
                                 ;     871         } BIT;
                                 ;     872     } CS7CR;
                                 ;     873     unsigned char wk26[6];
                                 ;     874     union {
                                 ;     875         unsigned short WORD;
                                 ;     876         struct {
                                 ;     877             unsigned short :4;
                                 ;     878             unsigned short WRCV:4;
                                 ;     879             unsigned short :4;
                                 ;     880             unsigned short RRCV:4;
                                 ;     881         } BIT;
                                 ;     882     } CS7REC;
                                 ;     883     unsigned char wk27[900];
                                 ;     884     union {
                                 ;     885         unsigned char BYTE;
                                 ;     886         struct {
                                 ;     887             unsigned char :2;
                                 ;     888             unsigned char BSIZE:2;
                                 ;     889             unsigned char :3;
                                 ;     890             unsigned char EXENB:1;
                                 ;     891         } BIT;
                                 ;     892     } SDCCR;
                                 ;     893     union {
                                 ;     894         unsigned char BYTE;
                                 ;     895         struct {
                                 ;     896             unsigned char :7;
                                 ;     897             unsigned char EMODE:1;
                                 ;     898         } BIT;
                                 ;     899     } SDCMOD;
                                 ;     900     union {
                                 ;     901         unsigned char BYTE;
                                 ;     902         struct {
                                 ;     903             unsigned char :7;
                                 ;     904             unsigned char BE:1;
                                 ;     905         } BIT;
                                 ;     906     } SDAMOD;
                                 ;     907     unsigned char wk28[13];
                                 ;     908     union {
                                 ;     909         unsigned char BYTE;
                                 ;     910         struct {
                                 ;     911             unsigned char :7;
                                 ;     912             unsigned char SFEN:1;
                                 ;     913         } BIT;
                                 ;     914     } SDSELF;
                                 ;     915     unsigned char wk29[3];
                                 ;     916     union {
                                 ;     917         unsigned short WORD;
                                 ;     918         struct {
                                 ;     919             unsigned short REFW:4;
                                 ;     920             unsigned short RFC:12;
                                 ;     921         } BIT;
                                 ;     922     } SDRFCR;
                                 ;     923     union {
                                 ;     924         unsigned char BYTE;
                                 ;     925         struct {
                                 ;     926             unsigned char :7;
                                 ;     927             unsigned char RFEN:1;
                                 ;     928         } BIT;
                                 ;     929     } SDRFEN;
                                 ;     930     unsigned char wk30[9];
                                 ;     931     union {
                                 ;     932         unsigned char BYTE;
                                 ;     933         struct {
                                 ;     934             unsigned char :7;
                                 ;     935             unsigned char INIRQ:1;
                                 ;     936         } BIT;
                                 ;     937     } SDICR;
                                 ;     938     unsigned char wk31[3];
                                 ;     939     union {
                                 ;     940         unsigned short WORD;
                                 ;     941         struct {
                                 ;     942             unsigned short :5;
                                 ;     943             unsigned short PRC:3;
                                 ;     944             unsigned short ARFC:4;
                                 ;     945             unsigned short ARFI:4;
                                 ;     946         } BIT;
                                 ;     947     } SDIR;
                                 ;     948     unsigned char wk32[26];
                                 ;     949     union {
                                 ;     950         unsigned char BYTE;
                                 ;     951         struct {
                                 ;     952             unsigned char :6;
                                 ;     953             unsigned char MXC:2;
                                 ;     954         } BIT;
                                 ;     955     } SDADR;
                                 ;     956     unsigned char wk33[3];
                                 ;     957     union {
                                 ;     958         unsigned long LONG;
                                 ;     959         struct {
                                 ;     960             unsigned long :13;
                                 ;     961             unsigned long RAS:3;
                                 ;     962             unsigned long :2;
                                 ;     963             unsigned long RCD:2;
                                 ;     964             unsigned long RP:3;
                                 ;     965             unsigned long WR:1;
                                 ;     966             unsigned long :5;
                                 ;     967             unsigned long CL:3;
                                 ;     968         } BIT;
                                 ;     969     } SDTR;
                                 ;     970     union {
                                 ;     971         unsigned short WORD;
                                 ;     972         struct {
                                 ;     973             unsigned short :1;
                                 ;     974             unsigned short MR:15;
                                 ;     975         } BIT;
                                 ;     976     } SDMOD;
                                 ;     977     unsigned char wk34[6];
                                 ;     978     union {
                                 ;     979         unsigned char BYTE;
                                 ;     980         struct {
                                 ;     981             unsigned char :3;
                                 ;     982             unsigned char SRFST:1;
                                 ;     983             unsigned char INIST:1;
                                 ;     984             unsigned char :2;
                                 ;     985             unsigned char MRSST:1;
                                 ;     986         } BIT;
                                 ;     987     } SDSR;
                                 ;     988 };
                                 ;     989 
                                 ;     990 struct st_dmac0 {
                                 ;     991     void *DMSAR;
                                 ;     992     void *DMDAR;
                                 ;     993     unsigned long DMCRA;
                                 ;     994     unsigned short DMCRB;
                                 ;     995     unsigned char wk0[2];
                                 ;     996     union {
                                 ;     997         unsigned short WORD;
                                 ;     998         struct {
                                 ;     999             unsigned short MD:2;
                                 ;    1000             unsigned short DTS:2;
                                 ;    1001             unsigned short :2;
                                 ;    1002             unsigned short SZ:2;
                                 ;    1003             unsigned short :6;
                                 ;    1004             unsigned short DCTG:2;
                                 ;    1005         } BIT;
                                 ;    1006     } DMTMD;
                                 ;    1007     unsigned char wk1[1];
                                 ;    1008     union {
                                 ;    1009         unsigned char BYTE;
                                 ;    1010         struct {
                                 ;    1011             unsigned char :3;
                                 ;    1012             unsigned char DTIE:1;
                                 ;    1013             unsigned char ESIE:1;
                                 ;    1014             unsigned char RPTIE:1;
                                 ;    1015             unsigned char SARIE:1;
                                 ;    1016             unsigned char DARIE:1;
                                 ;    1017         } BIT;
                                 ;    1018     } DMINT;
                                 ;    1019     union {
                                 ;    1020         unsigned short WORD;
                                 ;    1021         struct {
                                 ;    1022             unsigned short SM:2;
                                 ;    1023             unsigned short :1;
                                 ;    1024             unsigned short SARA:5;
                                 ;    1025             unsigned short DM:2;
                                 ;    1026             unsigned short :1;
                                 ;    1027             unsigned short DARA:5;
                                 ;    1028         } BIT;
                                 ;    1029     } DMAMD;
                                 ;    1030     unsigned char wk2[2];
                                 ;    1031     unsigned long DMOFR;
                                 ;    1032     union {
                                 ;    1033         unsigned char BYTE;
                                 ;    1034         struct {
                                 ;    1035             unsigned char :7;
                                 ;    1036             unsigned char DTE:1;
                                 ;    1037         } BIT;
                                 ;    1038     } DMCNT;
                                 ;    1039     union {
                                 ;    1040         unsigned char BYTE;
                                 ;    1041         struct {
                                 ;    1042             unsigned char :3;
                                 ;    1043             unsigned char CLRS:1;
                                 ;    1044             unsigned char :3;
                                 ;    1045             unsigned char SWREQ:1;
                                 ;    1046         } BIT;
                                 ;    1047     } DMREQ;
                                 ;    1048     union {
                                 ;    1049         unsigned char BYTE;
                                 ;    1050         struct {
                                 ;    1051             unsigned char ACT:1;
                                 ;    1052             unsigned char :2;
                                 ;    1053             unsigned char DTIF:1;
                                 ;    1054             unsigned char :3;
                                 ;    1055             unsigned char ESIF:1;
                                 ;    1056         } BIT;
                                 ;    1057     } DMSTS;
                                 ;    1058     union {
                                 ;    1059         unsigned char BYTE;
                                 ;    1060         struct {
                                 ;    1061             unsigned char :7;
                                 ;    1062             unsigned char DISEL:1;
                                 ;    1063         } BIT;
                                 ;    1064     } DMCSL;
                                 ;    1065 };
                                 ;    1066 
                                 ;    1067 struct st_dmac1 {
                                 ;    1068     void *DMSAR;
                                 ;    1069     void *DMDAR;
                                 ;    1070     unsigned long DMCRA;
                                 ;    1071     unsigned short DMCRB;
                                 ;    1072     unsigned char wk0[2];
                                 ;    1073     union {
                                 ;    1074         unsigned short WORD;
                                 ;    1075         struct {
                                 ;    1076             unsigned short MD:2;
                                 ;    1077             unsigned short DTS:2;
                                 ;    1078             unsigned short :2;
                                 ;    1079             unsigned short SZ:2;
                                 ;    1080             unsigned short :6;
                                 ;    1081             unsigned short DCTG:2;
                                 ;    1082         } BIT;
                                 ;    1083     } DMTMD;
                                 ;    1084     unsigned char wk1[1];
                                 ;    1085     union {
                                 ;    1086         unsigned char BYTE;
                                 ;    1087         struct {
                                 ;    1088             unsigned char :3;
                                 ;    1089             unsigned char DTIE:1;
                                 ;    1090             unsigned char ESIE:1;
                                 ;    1091             unsigned char RPTIE:1;
                                 ;    1092             unsigned char SARIE:1;
                                 ;    1093             unsigned char DARIE:1;
                                 ;    1094         } BIT;
                                 ;    1095     } DMINT;
                                 ;    1096     union {
                                 ;    1097         unsigned short WORD;
                                 ;    1098         struct {
                                 ;    1099             unsigned short SM:2;
                                 ;    1100             unsigned short :1;
                                 ;    1101             unsigned short SARA:5;
                                 ;    1102             unsigned short DM:2;
                                 ;    1103             unsigned short :1;
                                 ;    1104             unsigned short DARA:5;
                                 ;    1105         } BIT;
                                 ;    1106     } DMAMD;
                                 ;    1107     unsigned char wk2[6];
                                 ;    1108     union {
                                 ;    1109         unsigned char BYTE;
                                 ;    1110         struct {
                                 ;    1111             unsigned char :7;
                                 ;    1112             unsigned char DTE:1;
                                 ;    1113         } BIT;
                                 ;    1114     } DMCNT;
                                 ;    1115     union {
                                 ;    1116         unsigned char BYTE;
                                 ;    1117         struct {
                                 ;    1118             unsigned char :3;
                                 ;    1119             unsigned char CLRS:1;
                                 ;    1120             unsigned char :3;
                                 ;    1121             unsigned char SWREQ:1;
                                 ;    1122         } BIT;
                                 ;    1123     } DMREQ;
                                 ;    1124     union {
                                 ;    1125         unsigned char BYTE;
                                 ;    1126         struct {
                                 ;    1127             unsigned char ACT:1;
                                 ;    1128             unsigned char :2;
                                 ;    1129             unsigned char DTIF:1;
                                 ;    1130             unsigned char :3;
                                 ;    1131             unsigned char ESIF:1;
                                 ;    1132         } BIT;
                                 ;    1133     } DMSTS;
                                 ;    1134     union {
                                 ;    1135         unsigned char BYTE;
                                 ;    1136         struct {
                                 ;    1137             unsigned char :7;
                                 ;    1138             unsigned char DISEL:1;
                                 ;    1139         } BIT;
                                 ;    1140     } DMCSL;
                                 ;    1141 };
                                 ;    1142 
                                 ;    1143 struct st_dmac {
                                 ;    1144     union {
                                 ;    1145         unsigned char BYTE;
                                 ;    1146         struct {
                                 ;    1147             unsigned char :7;
                                 ;    1148             unsigned char DMST:1;
                                 ;    1149         } BIT;
                                 ;    1150     } DMAST;
                                 ;    1151 };
                                 ;    1152 
                                 ;    1153 struct st_dtc {
                                 ;    1154     union {
                                 ;    1155         unsigned char BYTE;
                                 ;    1156         struct {
                                 ;    1157             unsigned char :3;
                                 ;    1158             unsigned char RRS:1;
                                 ;    1159             unsigned char :4;
                                 ;    1160         } BIT;
                                 ;    1161     } DTCCR;
                                 ;    1162     unsigned char wk0[3];
                                 ;    1163     void *DTCVBR;
                                 ;    1164     union {
                                 ;    1165         unsigned char BYTE;
                                 ;    1166         struct {
                                 ;    1167             unsigned char :7;
                                 ;    1168             unsigned char SHORT:1;
                                 ;    1169         } BIT;
                                 ;    1170     } DTCADMOD;
                                 ;    1171     unsigned char wk1[3];
                                 ;    1172     union {
                                 ;    1173         unsigned char BYTE;
                                 ;    1174         struct {
                                 ;    1175             unsigned char :7;
                                 ;    1176             unsigned char DTCST:1;
                                 ;    1177         } BIT;
                                 ;    1178     } DTCST;
                                 ;    1179     unsigned char wk2[1];
                                 ;    1180     union {
                                 ;    1181         unsigned short WORD;
                                 ;    1182         struct {
                                 ;    1183             unsigned short ACT:1;
                                 ;    1184             unsigned short :7;
                                 ;    1185             unsigned short VECN:8;
                                 ;    1186         } BIT;
                                 ;    1187     } DTCSTS;
                                 ;    1188 };
                                 ;    1189 
                                 ;    1190 struct st_exdmac0 {
                                 ;    1191     void *EDMSAR;
                                 ;    1192     void *EDMDAR;
                                 ;    1193     unsigned long EDMCRA;
                                 ;    1194     unsigned short EDMCRB;
                                 ;    1195     unsigned char wk0[2];
                                 ;    1196     union {
                                 ;    1197         unsigned short WORD;
                                 ;    1198         struct {
                                 ;    1199             unsigned short MD:2;
                                 ;    1200             unsigned short DTS:2;
                                 ;    1201             unsigned short :2;
                                 ;    1202             unsigned short SZ:2;
                                 ;    1203             unsigned short :6;
                                 ;    1204             unsigned short DCTG:2;
                                 ;    1205         } BIT;
                                 ;    1206     } EDMTMD;
                                 ;    1207     union {
                                 ;    1208         unsigned char BYTE;
                                 ;    1209         struct {
                                 ;    1210             unsigned char :4;
                                 ;    1211             unsigned char DACKS:1;
                                 ;    1212             unsigned char DACKE:1;
                                 ;    1213             unsigned char DACKW:1;
                                 ;    1214             unsigned char :1;
                                 ;    1215         } BIT;
                                 ;    1216     } EDMOMD;
                                 ;    1217     union {
                                 ;    1218         unsigned char BYTE;
                                 ;    1219         struct {
                                 ;    1220             unsigned char :3;
                                 ;    1221             unsigned char DTIE:1;
                                 ;    1222             unsigned char ESIE:1;
                                 ;    1223             unsigned char RPTIE:1;
                                 ;    1224             unsigned char SARIE:1;
                                 ;    1225             unsigned char DARIE:1;
                                 ;    1226         } BIT;
                                 ;    1227     } EDMINT;
                                 ;    1228     union {
                                 ;    1229         unsigned long LONG;
                                 ;    1230         struct {
                                 ;    1231             unsigned long :14;
                                 ;    1232             unsigned long AMS:1;
                                 ;    1233             unsigned long DIR:1;
                                 ;    1234             unsigned long SM:2;
                                 ;    1235             unsigned long :1;
                                 ;    1236             unsigned long SARA:5;
                                 ;    1237             unsigned long DM:2;
                                 ;    1238             unsigned long :1;
                                 ;    1239             unsigned long DARA:5;
                                 ;    1240         } BIT;
                                 ;    1241     } EDMAMD;
                                 ;    1242     unsigned long EDMOFR;
                                 ;    1243     union {
                                 ;    1244         unsigned char BYTE;
                                 ;    1245         struct {
                                 ;    1246             unsigned char :7;
                                 ;    1247             unsigned char DTE:1;
                                 ;    1248         } BIT;
                                 ;    1249     } EDMCNT;
                                 ;    1250     union {
                                 ;    1251         unsigned char BYTE;
                                 ;    1252         struct {
                                 ;    1253             unsigned char :3;
                                 ;    1254             unsigned char CLRS:1;
                                 ;    1255             unsigned char :3;
                                 ;    1256             unsigned char SWREQ:1;
                                 ;    1257         } BIT;
                                 ;    1258     } EDMREQ;
                                 ;    1259     union {
                                 ;    1260         unsigned char BYTE;
                                 ;    1261         struct {
                                 ;    1262             unsigned char ACT:1;
                                 ;    1263             unsigned char :2;
                                 ;    1264             unsigned char DTIF:1;
                                 ;    1265             unsigned char :3;
                                 ;    1266             unsigned char ESIF:1;
                                 ;    1267         } BIT;
                                 ;    1268     } EDMSTS;
                                 ;    1269     unsigned char wk1[1];
                                 ;    1270     union {
                                 ;    1271         unsigned char BYTE;
                                 ;    1272         struct {
                                 ;    1273             unsigned char :6;
                                 ;    1274             unsigned char DREQS:2;
                                 ;    1275         } BIT;
                                 ;    1276     } EDMRMD;
                                 ;    1277     union {
                                 ;    1278         unsigned char BYTE;
                                 ;    1279         struct {
                                 ;    1280             unsigned char :7;
                                 ;    1281             unsigned char EREQ:1;
                                 ;    1282         } BIT;
                                 ;    1283     } EDMERF;
                                 ;    1284     union {
                                 ;    1285         unsigned char BYTE;
                                 ;    1286         struct {
                                 ;    1287             unsigned char :7;
                                 ;    1288             unsigned char PREQ:1;
                                 ;    1289         } BIT;
                                 ;    1290     } EDMPRF;
                                 ;    1291 };
                                 ;    1292 
                                 ;    1293 struct st_exdmac {
                                 ;    1294     union {
                                 ;    1295         unsigned char BYTE;
                                 ;    1296         struct {
                                 ;    1297             unsigned char :7;
                                 ;    1298             unsigned char DMST:1;
                                 ;    1299         } BIT;
                                 ;    1300     } EDMAST;
                                 ;    1301     unsigned char wk0[479];
                                 ;    1302     unsigned long CLSBR0;
                                 ;    1303     unsigned long CLSBR1;
                                 ;    1304     unsigned long CLSBR2;
                                 ;    1305     unsigned long CLSBR3;
                                 ;    1306     unsigned long CLSBR4;
                                 ;    1307     unsigned long CLSBR5;
                                 ;    1308     unsigned long CLSBR6;
                                 ;    1309     unsigned long CLSBR7;
                                 ;    1310 };
                                 ;    1311 
                                 ;    1312 struct st_icu {
                                 ;    1313     union {
                                 ;    1314         unsigned char BYTE;
                                 ;    1315         struct {
                                 ;    1316             unsigned char :7;
                                 ;    1317             unsigned char IR:1;
                                 ;    1318         } BIT;
                                 ;    1319     } IR[254];
                                 ;    1320     unsigned char wk17[2];
                                 ;    1321     union {
                                 ;    1322         unsigned char BYTE;
                                 ;    1323         struct {
                                 ;    1324             unsigned char :7;
                                 ;    1325             unsigned char DTCE:1;
                                 ;    1326         } BIT;
                                 ;    1327     } DTCER[254];
                                 ;    1328     unsigned char wk47[2];
                                 ;    1329     union {
                                 ;    1330         unsigned char BYTE;
                                 ;    1331         struct {
                                 ;    1332             unsigned char IEN7:1;
                                 ;    1333             unsigned char IEN6:1;
                                 ;    1334             unsigned char IEN5:1;
                                 ;    1335             unsigned char IEN4:1;
                                 ;    1336             unsigned char IEN3:1;
                                 ;    1337             unsigned char IEN2:1;
                                 ;    1338             unsigned char IEN1:1;
                                 ;    1339             unsigned char IEN0:1;
                                 ;    1340         } BIT;
                                 ;    1341     } IER[32];
                                 ;    1342     unsigned char wk50[192];
                                 ;    1343     union {
                                 ;    1344         unsigned char BYTE;
                                 ;    1345         struct {
                                 ;    1346             unsigned char :7;
                                 ;    1347             unsigned char SWINT:1;
                                 ;    1348         } BIT;
                                 ;    1349     } SWINTR;
                                 ;    1350     unsigned char wk51[15];
                                 ;    1351     union {
                                 ;    1352         unsigned short WORD;
                                 ;    1353         struct {
                                 ;    1354             unsigned short FIEN:1;
                                 ;    1355             unsigned short :7;
                                 ;    1356             unsigned short FVCT:8;
                                 ;    1357         } BIT;
                                 ;    1358     } FIR;
                                 ;    1359     unsigned char wk52[14];
                                 ;    1360     union {
                                 ;    1361         unsigned char BYTE;
                                 ;    1362         struct {
                                 ;    1363             unsigned char :4;
                                 ;    1364             unsigned char IPR:4;
                                 ;    1365         } BIT;
                                 ;    1366     } IPR[144];
                                 ;    1367     unsigned char wk67[112];
                                 ;    1368     unsigned char DMRSR0;
                                 ;    1369     unsigned char wk68[3];
                                 ;    1370     unsigned char DMRSR1;
                                 ;    1371     unsigned char wk69[3];
                                 ;    1372     unsigned char DMRSR2;
                                 ;    1373     unsigned char wk70[3];
                                 ;    1374     unsigned char DMRSR3;
                                 ;    1375     unsigned char wk71[243];
                                 ;    1376     union {
                                 ;    1377         unsigned char BYTE;
                                 ;    1378         struct {
                                 ;    1379             unsigned char :4;
                                 ;    1380             unsigned char IRQMD:2;
                                 ;    1381             unsigned char :2;
                                 ;    1382         } BIT;
                                 ;    1383     } IRQCR[16];
                                 ;    1384     unsigned char wk72[112];
                                 ;    1385     union {
                                 ;    1386         unsigned char BYTE;
                                 ;    1387         struct {
                                 ;    1388             unsigned char :5;
                                 ;    1389             unsigned char OSTST:1;
                                 ;    1390             unsigned char LVDST:1;
                                 ;    1391             unsigned char NMIST:1;
                                 ;    1392         } BIT;
                                 ;    1393     } NMISR;
                                 ;    1394     union {
                                 ;    1395         unsigned char BYTE;
                                 ;    1396         struct {
                                 ;    1397             unsigned char :5;
                                 ;    1398             unsigned char OSTEN:1;
                                 ;    1399             unsigned char LVDEN:1;
                                 ;    1400             unsigned char NMIEN:1;
                                 ;    1401         } BIT;
                                 ;    1402     } NMIER;
                                 ;    1403     union {
                                 ;    1404         unsigned char BYTE;
                                 ;    1405         struct {
                                 ;    1406             unsigned char :5;
                                 ;    1407             unsigned char OSTCLR:1;
                                 ;    1408             unsigned char :1;
                                 ;    1409             unsigned char NMICLR:1;
                                 ;    1410         } BIT;
                                 ;    1411     } NMICLR;
                                 ;    1412     union {
                                 ;    1413         unsigned char BYTE;
                                 ;    1414         struct {
                                 ;    1415             unsigned char :4;
                                 ;    1416             unsigned char NMIMD:1;
                                 ;    1417             unsigned char :3;
                                 ;    1418         } BIT;
                                 ;    1419     } NMICR;
                                 ;    1420 };
                                 ;    1421 
                                 ;    1422 struct st_cmt {
                                 ;    1423     union {
                                 ;    1424         unsigned short WORD;
                                 ;    1425         struct {
                                 ;    1426             unsigned short :14;
                                 ;    1427             unsigned short STR1:1;
                                 ;    1428             unsigned short STR0:1;
                                 ;    1429         } BIT;
                                 ;    1430     } CMSTR0;
                                 ;    1431     unsigned char wk0[14];
                                 ;    1432     union {
                                 ;    1433         unsigned short WORD;
                                 ;    1434         struct {
                                 ;    1435             unsigned short :14;
                                 ;    1436             unsigned short STR3:1;
                                 ;    1437             unsigned short STR2:1;
                                 ;    1438         } BIT;
                                 ;    1439     } CMSTR1;
                                 ;    1440 };
                                 ;    1441 
                                 ;    1442 struct st_cmt0 {
                                 ;    1443     union {
                                 ;    1444         unsigned short WORD;
                                 ;    1445         struct {
                                 ;    1446             unsigned short :9;
                                 ;    1447             unsigned short CMIE:1;
                                 ;    1448             unsigned short :4;
                                 ;    1449             unsigned short CKS:2;
                                 ;    1450         } BIT;
                                 ;    1451     } CMCR;
                                 ;    1452     unsigned short CMCNT;
                                 ;    1453     unsigned short CMCOR;
                                 ;    1454 };
                                 ;    1455 
                                 ;    1456 union un_wdt {
                                 ;    1457     struct {
                                 ;    1458         union {
                                 ;    1459             unsigned char BYTE;
                                 ;    1460             struct {
                                 ;    1461                 unsigned char :1;
                                 ;    1462                 unsigned char TMS:1;
                                 ;    1463                 unsigned char TME:1;
                                 ;    1464                 unsigned char :2;
                                 ;    1465                 unsigned char CKS:3;
                                 ;    1466             } BIT;
                                 ;    1467         } TCSR;
                                 ;    1468         unsigned char TCNT;
                                 ;    1469         unsigned char wk0[1];
                                 ;    1470         union {
                                 ;    1471             unsigned char BYTE;
                                 ;    1472             struct {
                                 ;    1473                 unsigned char WOVF:1;
                                 ;    1474                 unsigned char RSTE:1;
                                 ;    1475                 unsigned char :6;
                                 ;    1476             } BIT;
                                 ;    1477         } RSTCSR;
                                 ;    1478     } READ;
                                 ;    1479     struct {
                                 ;    1480         unsigned short WINA;
                                 ;    1481         unsigned short WINB;
                                 ;    1482     } WRITE;
                                 ;    1483 };
                                 ;    1484 
                                 ;    1485 struct st_iwdt {
                                 ;    1486     unsigned char IWDTRR;
                                 ;    1487     unsigned char wk0[1];
                                 ;    1488     union {
                                 ;    1489         unsigned short WORD;
                                 ;    1490         struct {
                                 ;    1491             unsigned short :8;
                                 ;    1492             unsigned short CKS:4;
                                 ;    1493             unsigned short :2;
                                 ;    1494             unsigned short TOPS:2;
                                 ;    1495         } BIT;
                                 ;    1496     } IWDTCR;
                                 ;    1497     union {
                                 ;    1498         unsigned short WORD;
                                 ;    1499         struct {
                                 ;    1500             unsigned short :1;
                                 ;    1501             unsigned short UNDFF:1;
                                 ;    1502             unsigned short CNTVAL:14;
                                 ;    1503         } BIT;
                                 ;    1504     } IWDTSR;
                                 ;    1505 };
                                 ;    1506 
                                 ;    1507 struct st_ad {
                                 ;    1508     unsigned short ADDRA;
                                 ;    1509     unsigned short ADDRB;
                                 ;    1510     unsigned short ADDRC;
                                 ;    1511     unsigned short ADDRD;
                                 ;    1512     unsigned char wk0[8];
                                 ;    1513     union {
                                 ;    1514         unsigned char BYTE;
                                 ;    1515         struct {
                                 ;    1516             unsigned char :1;
                                 ;    1517             unsigned char ADIE:1;
                                 ;    1518             unsigned char ADST:1;
                                 ;    1519             unsigned char :1;
                                 ;    1520             unsigned char CH:4;
                                 ;    1521         } BIT;
                                 ;    1522     } ADCSR;
                                 ;    1523     union {
                                 ;    1524         unsigned char BYTE;
                                 ;    1525         struct {
                                 ;    1526             unsigned char TRGS:3;
                                 ;    1527             unsigned char :1;
                                 ;    1528             unsigned char CKS:2;
                                 ;    1529             unsigned char MODE:2;
                                 ;    1530         } BIT;
                                 ;    1531     } ADCR;
                                 ;    1532     union {
                                 ;    1533         unsigned char BYTE;
                                 ;    1534         struct {
                                 ;    1535             unsigned char DPSEL:1;
                                 ;    1536             unsigned char :7;
                                 ;    1537         } BIT;
                                 ;    1538     } ADDPR;
                                 ;    1539     unsigned char ADSSTR;
                                 ;    1540     unsigned char wk1[11];
                                 ;    1541     union {
                                 ;    1542         unsigned char BYTE;
                                 ;    1543         struct {
                                 ;    1544             unsigned char :6;
                                 ;    1545             unsigned char DIAG:2;
                                 ;    1546         } BIT;
                                 ;    1547     } ADDIAGR;
                                 ;    1548 };
                                 ;    1549 
                                 ;    1550 struct st_da {
                                 ;    1551     unsigned short DADR0;
                                 ;    1552     unsigned short DADR1;
                                 ;    1553     union {
                                 ;    1554         unsigned char BYTE;
                                 ;    1555         struct {
                                 ;    1556             unsigned char DAOE1:1;
                                 ;    1557             unsigned char DAOE0:1;
                                 ;    1558             unsigned char DAE:1;
                                 ;    1559             unsigned char :5;
                                 ;    1560         } BIT;
                                 ;    1561     } DACR;
                                 ;    1562     union {
                                 ;    1563         unsigned char BYTE;
                                 ;    1564         struct {
                                 ;    1565             unsigned char DPSEL:1;
                                 ;    1566             unsigned char :7;
                                 ;    1567         } BIT;
                                 ;    1568     } DADPR;
                                 ;    1569 };
                                 ;    1570 
                                 ;    1571 struct st_ppg0 {
                                 ;    1572     union {
                                 ;    1573         unsigned char BYTE;
                                 ;    1574         struct {
                                 ;    1575             unsigned char G3CMS:2;
                                 ;    1576             unsigned char G2CMS:2;
                                 ;    1577             unsigned char G1CMS:2;
                                 ;    1578             unsigned char G0CMS:2;
                                 ;    1579         } BIT;
                                 ;    1580     } PCR;
                                 ;    1581     union {
                                 ;    1582         unsigned char BYTE;
                                 ;    1583         struct {
                                 ;    1584             unsigned char G3INV:1;
                                 ;    1585             unsigned char G2INV:1;
                                 ;    1586             unsigned char G1INV:1;
                                 ;    1587             unsigned char G0INV:1;
                                 ;    1588             unsigned char G3NOV:1;
                                 ;    1589             unsigned char G2NOV:1;
                                 ;    1590             unsigned char G1NOV:1;
                                 ;    1591             unsigned char G0NOV:1;
                                 ;    1592         } BIT;
                                 ;    1593     } PMR;
                                 ;    1594     union {
                                 ;    1595         unsigned char BYTE;
                                 ;    1596         struct {
                                 ;    1597             unsigned char NDER15:1;
                                 ;    1598             unsigned char NDER14:1;
                                 ;    1599             unsigned char NDER13:1;
                                 ;    1600             unsigned char NDER12:1;
                                 ;    1601             unsigned char NDER11:1;
                                 ;    1602             unsigned char NDER10:1;
                                 ;    1603             unsigned char NDER9:1;
                                 ;    1604             unsigned char NDER8:1;
                                 ;    1605         } BIT;
                                 ;    1606     } NDERH;
                                 ;    1607     union {
                                 ;    1608         unsigned char BYTE;
                                 ;    1609         struct {
                                 ;    1610             unsigned char NDER7:1;
                                 ;    1611             unsigned char NDER6:1;
                                 ;    1612             unsigned char NDER5:1;
                                 ;    1613             unsigned char NDER4:1;
                                 ;    1614             unsigned char NDER3:1;
                                 ;    1615             unsigned char NDER2:1;
                                 ;    1616             unsigned char NDER1:1;
                                 ;    1617             unsigned char NDER0:1;
                                 ;    1618         } BIT;
                                 ;    1619     } NDERL;
                                 ;    1620     union {
                                 ;    1621         unsigned char BYTE;
                                 ;    1622         struct {
                                 ;    1623             unsigned char POD15:1;
                                 ;    1624             unsigned char POD14:1;
                                 ;    1625             unsigned char POD13:1;
                                 ;    1626             unsigned char POD12:1;
                                 ;    1627             unsigned char POD11:1;
                                 ;    1628             unsigned char POD10:1;
                                 ;    1629             unsigned char POD9:1;
                                 ;    1630             unsigned char POD8:1;
                                 ;    1631         } BIT;
                                 ;    1632     } PODRH;
                                 ;    1633     union {
                                 ;    1634         unsigned char BYTE;
                                 ;    1635         struct {
                                 ;    1636             unsigned char POD7:1;
                                 ;    1637             unsigned char POD6:1;
                                 ;    1638             unsigned char POD5:1;
                                 ;    1639             unsigned char POD4:1;
                                 ;    1640             unsigned char POD3:1;
                                 ;    1641             unsigned char POD2:1;
                                 ;    1642             unsigned char POD1:1;
                                 ;    1643             unsigned char POD0:1;
                                 ;    1644         } BIT;
                                 ;    1645     } PODRL;
                                 ;    1646     union {
                                 ;    1647         unsigned char BYTE;
                                 ;    1648         struct {
                                 ;    1649             unsigned char NDR15:1;
                                 ;    1650             unsigned char NDR14:1;
                                 ;    1651             unsigned char NDR13:1;
                                 ;    1652             unsigned char NDR12:1;
                                 ;    1653             unsigned char NDR11:1;
                                 ;    1654             unsigned char NDR10:1;
                                 ;    1655             unsigned char NDR9:1;
                                 ;    1656             unsigned char NDR8:1;
                                 ;    1657         } BIT;
                                 ;    1658     } NDRH;
                                 ;    1659     union {
                                 ;    1660         unsigned char BYTE;
                                 ;    1661         struct {
                                 ;    1662             unsigned char NDR7:1;
                                 ;    1663             unsigned char NDR6:1;
                                 ;    1664             unsigned char NDR5:1;
                                 ;    1665             unsigned char NDR4:1;
                                 ;    1666             unsigned char NDR3:1;
                                 ;    1667             unsigned char NDR2:1;
                                 ;    1668             unsigned char NDR1:1;
                                 ;    1669             unsigned char NDR0:1;
                                 ;    1670         } BIT;
                                 ;    1671     } NDRL;
                                 ;    1672     union {
                                 ;    1673         unsigned char BYTE;
                                 ;    1674         struct {
                                 ;    1675             unsigned char :4;
                                 ;    1676             unsigned char NDR11:1;
                                 ;    1677             unsigned char NDR10:1;
                                 ;    1678             unsigned char NDR9:1;
                                 ;    1679             unsigned char NDR8:1;
                                 ;    1680         } BIT;
                                 ;    1681     } NDRH2;
                                 ;    1682     union {
                                 ;    1683         unsigned char BYTE;
                                 ;    1684         struct {
                                 ;    1685             unsigned char :4;
                                 ;    1686             unsigned char NDR3:1;
                                 ;    1687             unsigned char NDR2:1;
                                 ;    1688             unsigned char NDR1:1;
                                 ;    1689             unsigned char NDR0:1;
                                 ;    1690         } BIT;
                                 ;    1691     } NDRL2;
                                 ;    1692 };
                                 ;    1693 
                                 ;    1694 struct st_ppg1 {
                                 ;    1695     union {
                                 ;    1696         unsigned char BYTE;
                                 ;    1697         struct {
                                 ;    1698             unsigned char :7;
                                 ;    1699             unsigned char PTRSL:1;
                                 ;    1700         } BIT;
                                 ;    1701     } PTRSLR;
                                 ;    1702     unsigned char wk0[5];
                                 ;    1703     union {
                                 ;    1704         unsigned char BYTE;
                                 ;    1705         struct {
                                 ;    1706             unsigned char G3CMS:2;
                                 ;    1707             unsigned char G2CMS:2;
                                 ;    1708             unsigned char G1CMS:2;
                                 ;    1709             unsigned char G0CMS:2;
                                 ;    1710         } BIT;
                                 ;    1711     } PCR;
                                 ;    1712     union {
                                 ;    1713         unsigned char BYTE;
                                 ;    1714         struct {
                                 ;    1715             unsigned char G3INV:1;
                                 ;    1716             unsigned char G2INV:1;
                                 ;    1717             unsigned char G1INV:1;
                                 ;    1718             unsigned char G0INV:1;
                                 ;    1719             unsigned char G3NOV:1;
                                 ;    1720             unsigned char G2NOV:1;
                                 ;    1721             unsigned char G1NOV:1;
                                 ;    1722             unsigned char G0NOV:1;
                                 ;    1723         } BIT;
                                 ;    1724     } PMR;
                                 ;    1725     union {
                                 ;    1726         unsigned char BYTE;
                                 ;    1727         struct {
                                 ;    1728             unsigned char NDER31:1;
                                 ;    1729             unsigned char NDER30:1;
                                 ;    1730             unsigned char NDER29:1;
                                 ;    1731             unsigned char NDER28:1;
                                 ;    1732             unsigned char NDER27:1;
                                 ;    1733             unsigned char NDER26:1;
                                 ;    1734             unsigned char NDER25:1;
                                 ;    1735             unsigned char NDER24:1;
                                 ;    1736         } BIT;
                                 ;    1737     } NDERH;
                                 ;    1738     union {
                                 ;    1739         unsigned char BYTE;
                                 ;    1740         struct {
                                 ;    1741             unsigned char NDER23:1;
                                 ;    1742             unsigned char NDER22:1;
                                 ;    1743             unsigned char NDER21:1;
                                 ;    1744             unsigned char NDER20:1;
                                 ;    1745             unsigned char NDER19:1;
                                 ;    1746             unsigned char NDER18:1;
                                 ;    1747             unsigned char NDER17:1;
                                 ;    1748             unsigned char NDER16:1;
                                 ;    1749         } BIT;
                                 ;    1750     } NDERL;
                                 ;    1751     union {
                                 ;    1752         unsigned char BYTE;
                                 ;    1753         struct {
                                 ;    1754             unsigned char POD31:1;
                                 ;    1755             unsigned char POD30:1;
                                 ;    1756             unsigned char POD29:1;
                                 ;    1757             unsigned char POD28:1;
                                 ;    1758             unsigned char POD27:1;
                                 ;    1759             unsigned char POD26:1;
                                 ;    1760             unsigned char POD25:1;
                                 ;    1761             unsigned char POD24:1;
                                 ;    1762         } BIT;
                                 ;    1763     } PODRH;
                                 ;    1764     union {
                                 ;    1765         unsigned char BYTE;
                                 ;    1766         struct {
                                 ;    1767             unsigned char POD23:1;
                                 ;    1768             unsigned char POD22:1;
                                 ;    1769             unsigned char POD21:1;
                                 ;    1770             unsigned char POD20:1;
                                 ;    1771             unsigned char POD19:1;
                                 ;    1772             unsigned char POD18:1;
                                 ;    1773             unsigned char POD17:1;
                                 ;    1774             unsigned char POD16:1;
                                 ;    1775         } BIT;
                                 ;    1776     } PODRL;
                                 ;    1777     union {
                                 ;    1778         unsigned char BYTE;
                                 ;    1779         struct {
                                 ;    1780             unsigned char NDR31:1;
                                 ;    1781             unsigned char NDR30:1;
                                 ;    1782             unsigned char NDR29:1;
                                 ;    1783             unsigned char NDR28:1;
                                 ;    1784             unsigned char NDR27:1;
                                 ;    1785             unsigned char NDR26:1;
                                 ;    1786             unsigned char NDR25:1;
                                 ;    1787             unsigned char NDR24:1;
                                 ;    1788         } BIT;
                                 ;    1789     } NDRH;
                                 ;    1790     union {
                                 ;    1791         unsigned char BYTE;
                                 ;    1792         struct {
                                 ;    1793             unsigned char NDR23:1;
                                 ;    1794             unsigned char NDR22:1;
                                 ;    1795             unsigned char NDR21:1;
                                 ;    1796             unsigned char NDR20:1;
                                 ;    1797             unsigned char NDR19:1;
                                 ;    1798             unsigned char NDR18:1;
                                 ;    1799             unsigned char NDR17:1;
                                 ;    1800             unsigned char NDR16:1;
                                 ;    1801         } BIT;
                                 ;    1802     } NDRL;
                                 ;    1803     union {
                                 ;    1804         unsigned char BYTE;
                                 ;    1805         struct {
                                 ;    1806             unsigned char :4;
                                 ;    1807             unsigned char NDR27:1;
                                 ;    1808             unsigned char NDR26:1;
                                 ;    1809             unsigned char NDR25:1;
                                 ;    1810             unsigned char NDR24:1;
                                 ;    1811         } BIT;
                                 ;    1812     } NDRH2;
                                 ;    1813     union {
                                 ;    1814         unsigned char BYTE;
                                 ;    1815         struct {
                                 ;    1816             unsigned char :4;
                                 ;    1817             unsigned char NDR19:1;
                                 ;    1818             unsigned char NDR18:1;
                                 ;    1819             unsigned char NDR17:1;
                                 ;    1820             unsigned char NDR16:1;
                                 ;    1821         } BIT;
                                 ;    1822     } NDRL2;
                                 ;    1823 };
                                 ;    1824 
                                 ;    1825 struct st_tmr0 {
                                 ;    1826     union {
                                 ;    1827         unsigned char BYTE;
                                 ;    1828         struct {
                                 ;    1829             unsigned char CMIEB:1;
                                 ;    1830             unsigned char CMIEA:1;
                                 ;    1831             unsigned char OVIE:1;
                                 ;    1832             unsigned char CCLR:2;
                                 ;    1833             unsigned char :3;
                                 ;    1834         } BIT;
                                 ;    1835     } TCR;
                                 ;    1836     unsigned char wk0[1];
                                 ;    1837     union {
                                 ;    1838         unsigned char BYTE;
                                 ;    1839         struct {
                                 ;    1840             unsigned char :3;
                                 ;    1841             unsigned char ADTE:1;
                                 ;    1842             unsigned char OSB:2;
                                 ;    1843             unsigned char OSA:2;
                                 ;    1844         } BIT;
                                 ;    1845     } TCSR;
                                 ;    1846     unsigned char wk1[1];
                                 ;    1847     unsigned char TCORA;
                                 ;    1848     unsigned char wk2[1];
                                 ;    1849     unsigned char TCORB;
                                 ;    1850     unsigned char wk3[1];
                                 ;    1851     unsigned char TCNT;
                                 ;    1852     unsigned char wk4[1];
                                 ;    1853     union {
                                 ;    1854         unsigned char BYTE;
                                 ;    1855         struct {
                                 ;    1856             unsigned char TMRIS:1;
                                 ;    1857             unsigned char :2;
                                 ;    1858             unsigned char CSS:2;
                                 ;    1859             unsigned char CKS:3;
                                 ;    1860         } BIT;
                                 ;    1861     } TCCR;
                                 ;    1862 };
                                 ;    1863 
                                 ;    1864 struct st_tmr1 {
                                 ;    1865     union {
                                 ;    1866         unsigned char BYTE;
                                 ;    1867         struct {
                                 ;    1868             unsigned char CMIEB:1;
                                 ;    1869             unsigned char CMIEA:1;
                                 ;    1870             unsigned char OVIE:1;
                                 ;    1871             unsigned char CCLR:2;
                                 ;    1872             unsigned char :3;
                                 ;    1873         } BIT;
                                 ;    1874     } TCR;
                                 ;    1875     unsigned char wk0[1];
                                 ;    1876     union {
                                 ;    1877         unsigned char BYTE;
                                 ;    1878         struct {
                                 ;    1879             unsigned char :4;
                                 ;    1880             unsigned char OSB:2;
                                 ;    1881             unsigned char OSA:2;
                                 ;    1882         } BIT;
                                 ;    1883     } TCSR;
                                 ;    1884     unsigned char wk1[1];
                                 ;    1885     unsigned char TCORA;
                                 ;    1886     unsigned char wk2[1];
                                 ;    1887     unsigned char TCORB;
                                 ;    1888     unsigned char wk3[1];
                                 ;    1889     unsigned char TCNT;
                                 ;    1890     unsigned char wk4[1];
                                 ;    1891     union {
                                 ;    1892         unsigned char BYTE;
                                 ;    1893         struct {
                                 ;    1894             unsigned char TMRIS:1;
                                 ;    1895             unsigned char :2;
                                 ;    1896             unsigned char CSS:2;
                                 ;    1897             unsigned char CKS:3;
                                 ;    1898         } BIT;
                                 ;    1899     } TCCR;
                                 ;    1900 };
                                 ;    1901 
                                 ;    1902 struct st_tmr01 {
                                 ;    1903     unsigned short TCORA;
                                 ;    1904     unsigned short TCORB;
                                 ;    1905     unsigned short TCNT;
                                 ;    1906     unsigned short TCCR;
                                 ;    1907 };
                                 ;    1908 
                                 ;    1909 struct st_sci {
                                 ;    1910     union {
                                 ;    1911         unsigned char BYTE;
                                 ;    1912         struct {
                                 ;    1913             unsigned char CM:1;
                                 ;    1914             unsigned char CHR:1;
                                 ;    1915             unsigned char PE:1;
                                 ;    1916             unsigned char PM:1;
                                 ;    1917             unsigned char STOP:1;
                                 ;    1918             unsigned char MP:1;
                                 ;    1919             unsigned char CKS:2;
                                 ;    1920         } BIT;
                                 ;    1921     } SMR;
                                 ;    1922     unsigned char BRR;
                                 ;    1923     union {
                                 ;    1924         unsigned char BYTE;
                                 ;    1925         struct {
                                 ;    1926             unsigned char TIE:1;
                                 ;    1927             unsigned char RIE:1;
                                 ;    1928             unsigned char TE:1;
                                 ;    1929             unsigned char RE:1;
                                 ;    1930             unsigned char MPIE:1;
                                 ;    1931             unsigned char TEIE:1;
                                 ;    1932             unsigned char CKE:2;
                                 ;    1933         } BIT;
                                 ;    1934     } SCR;
                                 ;    1935     unsigned char TDR;
                                 ;    1936     union {
                                 ;    1937         unsigned char BYTE;
                                 ;    1938         struct {
                                 ;    1939             unsigned char :2;
                                 ;    1940             unsigned char ORER:1;
                                 ;    1941             unsigned char FER:1;
                                 ;    1942             unsigned char PER:1;
                                 ;    1943             unsigned char TEND:1;
                                 ;    1944             unsigned char MPB:1;
                                 ;    1945             unsigned char MPBT:1;
                                 ;    1946         } BIT;
                                 ;    1947     } SSR;
                                 ;    1948     unsigned char RDR;
                                 ;    1949     union {
                                 ;    1950         unsigned char BYTE;
                                 ;    1951         struct {
                                 ;    1952             unsigned char :4;
                                 ;    1953             unsigned char SDIR:1;
                                 ;    1954             unsigned char SINV:1;
                                 ;    1955             unsigned char :1;
                                 ;    1956             unsigned char SMIF:1;
                                 ;    1957         } BIT;
                                 ;    1958     } SCMR;
                                 ;    1959     union {
                                 ;    1960         unsigned char BYTE;
                                 ;    1961         struct {
                                 ;    1962             unsigned char :3;
                                 ;    1963             unsigned char ABCS:1;
                                 ;    1964             unsigned char :3;
                                 ;    1965             unsigned char ACS0:1;
                                 ;    1966         } BIT;
                                 ;    1967     } SEMR;
                                 ;    1968 };
                                 ;    1969 
                                 ;    1970 struct st_smci {
                                 ;    1971     union {
                                 ;    1972         unsigned char BYTE;
                                 ;    1973         struct {
                                 ;    1974             unsigned char GM:1;
                                 ;    1975             unsigned char BLK:1;
                                 ;    1976             unsigned char PE:1;
                                 ;    1977             unsigned char PM:1;
                                 ;    1978             unsigned char BCP:2;
                                 ;    1979             unsigned char CKS:2;
                                 ;    1980         } BIT;
                                 ;    1981     } SMR;
                                 ;    1982     unsigned char BRR;
                                 ;    1983     union {
                                 ;    1984         unsigned char BYTE;
                                 ;    1985         struct {
                                 ;    1986             unsigned char TIE:1;
                                 ;    1987             unsigned char RIE:1;
                                 ;    1988             unsigned char TE:1;
                                 ;    1989             unsigned char RE:1;
                                 ;    1990             unsigned char :1;
                                 ;    1991             unsigned char TEIE:1;
                                 ;    1992             unsigned char CKE:2;
                                 ;    1993         } BIT;
                                 ;    1994     } SCR;
                                 ;    1995     unsigned char TDR;
                                 ;    1996     union {
                                 ;    1997         unsigned char BYTE;
                                 ;    1998         struct {
                                 ;    1999             unsigned char :2;
                                 ;    2000             unsigned char ORER:1;
                                 ;    2001             unsigned char ERS:1;
                                 ;    2002             unsigned char PER:1;
                                 ;    2003             unsigned char TEND:1;
                                 ;    2004             unsigned char :2;
                                 ;    2005         } BIT;
                                 ;    2006     } SSR;
                                 ;    2007     unsigned char RDR;
                                 ;    2008     union {
                                 ;    2009         unsigned char BYTE;
                                 ;    2010         struct {
                                 ;    2011             unsigned char BCP2:1;
                                 ;    2012             unsigned char :3;
                                 ;    2013             unsigned char SDIR:1;
                                 ;    2014             unsigned char SINV:1;
                                 ;    2015             unsigned char :1;
                                 ;    2016             unsigned char SMIF:1;
                                 ;    2017         } BIT;
                                 ;    2018     } SCMR;
                                 ;    2019 };
                                 ;    2020 
                                 ;    2021 struct st_crc {
                                 ;    2022     union {
                                 ;    2023         unsigned char BYTE;
                                 ;    2024         struct {
                                 ;    2025             unsigned char DORCLR:1;
                                 ;    2026             unsigned char :4;
                                 ;    2027             unsigned char LMS:1;
                                 ;    2028             unsigned char GPS:2;
                                 ;    2029         } BIT;
                                 ;    2030     } CRCCR;
                                 ;    2031     unsigned char CRCDIR;
                                 ;    2032     unsigned short CRCDOR;
                                 ;    2033 };
                                 ;    2034 
                                 ;    2035 struct st_riic {
                                 ;    2036     union {
                                 ;    2037         unsigned char BYTE;
                                 ;    2038         struct {
                                 ;    2039             unsigned char ICE:1;
                                 ;    2040             unsigned char IICRST:1;
                                 ;    2041             unsigned char CLO:1;
                                 ;    2042             unsigned char SOWP:1;
                                 ;    2043             unsigned char SCLO:1;
                                 ;    2044             unsigned char SDAO:1;
                                 ;    2045             unsigned char SCLI:1;
                                 ;    2046             unsigned char SDAI:1;
                                 ;    2047         } BIT;
                                 ;    2048     } ICCR1;
                                 ;    2049     union {
                                 ;    2050         unsigned char BYTE;
                                 ;    2051         struct {
                                 ;    2052             unsigned char BBSY:1;
                                 ;    2053             unsigned char MST:1;
                                 ;    2054             unsigned char TRS:1;
                                 ;    2055             unsigned char :1;
                                 ;    2056             unsigned char SP:1;
                                 ;    2057             unsigned char RS:1;
                                 ;    2058             unsigned char ST:1;
                                 ;    2059             unsigned char :1;
                                 ;    2060         } BIT;
                                 ;    2061     } ICCR2;
                                 ;    2062     union {
                                 ;    2063         unsigned char BYTE;
                                 ;    2064         struct {
                                 ;    2065             unsigned char MTWP:1;
                                 ;    2066             unsigned char CKS:3;
                                 ;    2067             unsigned char BCWP:1;
                                 ;    2068             unsigned char BC:3;
                                 ;    2069         } BIT;
                                 ;    2070     } ICMR1;
                                 ;    2071     union {
                                 ;    2072         unsigned char BYTE;
                                 ;    2073         struct {
                                 ;    2074             unsigned char DLCS:1;
                                 ;    2075             unsigned char SDDL:3;
                                 ;    2076             unsigned char :1;
                                 ;    2077             unsigned char TMOH:1;
                                 ;    2078             unsigned char TMOL:1;
                                 ;    2079             unsigned char TMOS:1;
                                 ;    2080         } BIT;
                                 ;    2081     } ICMR2;
                                 ;    2082     union {
                                 ;    2083         unsigned char BYTE;
                                 ;    2084         struct {
                                 ;    2085             unsigned char SMBS:1;
                                 ;    2086             unsigned char WAIT:1;
                                 ;    2087             unsigned char RDRFS:1;
                                 ;    2088             unsigned char ACKWP:1;
                                 ;    2089             unsigned char ACKBT:1;
                                 ;    2090             unsigned char ACKBR:1;
                                 ;    2091             unsigned char NF:2;
                                 ;    2092         } BIT;
                                 ;    2093     } ICMR3;
                                 ;    2094     union {
                                 ;    2095         unsigned char BYTE;
                                 ;    2096         struct {
                                 ;    2097             unsigned char FMPE:1;
                                 ;    2098             unsigned char SCLE:1;
                                 ;    2099             unsigned char NFE:1;
                                 ;    2100             unsigned char NACKE:1;
                                 ;    2101             unsigned char SALE:1;
                                 ;    2102             unsigned char NALE:1;
                                 ;    2103             unsigned char MALE:1;
                                 ;    2104             unsigned char TMOE:1;
                                 ;    2105         } BIT;
                                 ;    2106     } ICFER;
                                 ;    2107     union {
                                 ;    2108         unsigned char BYTE;
                                 ;    2109         struct {
                                 ;    2110             unsigned char HOAE:1;
                                 ;    2111             unsigned char :1;
                                 ;    2112             unsigned char DIDE:1;
                                 ;    2113             unsigned char :1;
                                 ;    2114             unsigned char GCAE:1;
                                 ;    2115             unsigned char SAR2E:1;
                                 ;    2116             unsigned char SAR1E:1;
                                 ;    2117             unsigned char SAR0E:1;
                                 ;    2118         } BIT;
                                 ;    2119     } ICSER;
                                 ;    2120     union {
                                 ;    2121         unsigned char BYTE;
                                 ;    2122         struct {
                                 ;    2123             unsigned char TIE:1;
                                 ;    2124             unsigned char TEIE:1;
                                 ;    2125             unsigned char RIE:1;
                                 ;    2126             unsigned char NAKIE:1;
                                 ;    2127             unsigned char SPIE:1;
                                 ;    2128             unsigned char STIE:1;
                                 ;    2129             unsigned char ALIE:1;
                                 ;    2130             unsigned char TMOIE:1;
                                 ;    2131         } BIT;
                                 ;    2132     } ICIER;
                                 ;    2133     union {
                                 ;    2134         unsigned char BYTE;
                                 ;    2135         struct {
                                 ;    2136             unsigned char HOA:1;
                                 ;    2137             unsigned char :1;
                                 ;    2138             unsigned char DID:1;
                                 ;    2139             unsigned char :1;
                                 ;    2140             unsigned char GCA:1;
                                 ;    2141             unsigned char AAS2:1;
                                 ;    2142             unsigned char AAS1:1;
                                 ;    2143             unsigned char AAS0:1;
                                 ;    2144         } BIT;
                                 ;    2145     } ICSR1;
                                 ;    2146     union {
                                 ;    2147         unsigned char BYTE;
                                 ;    2148         struct {
                                 ;    2149             unsigned char TDRE:1;
                                 ;    2150             unsigned char TEND:1;
                                 ;    2151             unsigned char RDRF:1;
                                 ;    2152             unsigned char NACKF:1;
                                 ;    2153             unsigned char STOP:1;
                                 ;    2154             unsigned char START:1;
                                 ;    2155             unsigned char AL:1;
                                 ;    2156             unsigned char TMOF:1;
                                 ;    2157         } BIT;
                                 ;    2158     } ICSR2;
                                 ;    2159     union {
                                 ;    2160         unsigned char BYTE;
                                 ;    2161         struct {
                                 ;    2162             unsigned char SVA:7;
                                 ;    2163             unsigned char SVA0:1;
                                 ;    2164         } BIT;
                                 ;    2165     } SARL0;
                                 ;    2166     union {
                                 ;    2167         unsigned char BYTE;
                                 ;    2168         struct {
                                 ;    2169             unsigned char :5;
                                 ;    2170             unsigned char SVA:2;
                                 ;    2171             unsigned char FS:1;
                                 ;    2172         } BIT;
                                 ;    2173     } SARU0;
                                 ;    2174     union {
                                 ;    2175         unsigned char BYTE;
                                 ;    2176         struct {
                                 ;    2177             unsigned char SVA:7;
                                 ;    2178             unsigned char SVA0:1;
                                 ;    2179         } BIT;
                                 ;    2180     } SARL1;
                                 ;    2181     union {
                                 ;    2182         unsigned char BYTE;
                                 ;    2183         struct {
                                 ;    2184             unsigned char :5;
                                 ;    2185             unsigned char SVA:2;
                                 ;    2186             unsigned char FS:1;
                                 ;    2187         } BIT;
                                 ;    2188     } SARU1;
                                 ;    2189     union {
                                 ;    2190         unsigned char BYTE;
                                 ;    2191         struct {
                                 ;    2192             unsigned char SVA:7;
                                 ;    2193             unsigned char SVA0:1;
                                 ;    2194         } BIT;
                                 ;    2195     } SARL2;
                                 ;    2196     union {
                                 ;    2197         unsigned char BYTE;
                                 ;    2198         struct {
                                 ;    2199             unsigned char :5;
                                 ;    2200             unsigned char SVA:2;
                                 ;    2201             unsigned char FS:1;
                                 ;    2202         } BIT;
                                 ;    2203     } SARU2;
                                 ;    2204     union {
                                 ;    2205         unsigned char BYTE;
                                 ;    2206         struct {
                                 ;    2207             unsigned char :3;
                                 ;    2208             unsigned char BRL:5;
                                 ;    2209         } BIT;
                                 ;    2210     } ICBRL;
                                 ;    2211     union {
                                 ;    2212         unsigned char BYTE;
                                 ;    2213         struct {
                                 ;    2214             unsigned char :3;
                                 ;    2215             unsigned char BRH:5;
                                 ;    2216         } BIT;
                                 ;    2217     } ICBRH;
                                 ;    2218     unsigned char ICDRT;
                                 ;    2219     unsigned char ICDRR;
                                 ;    2220 };
                                 ;    2221 
                                 ;    2222 struct st_rspi {
                                 ;    2223     union {
                                 ;    2224         unsigned char BYTE;
                                 ;    2225         struct {
                                 ;    2226             unsigned char SPRIE:1;
                                 ;    2227             unsigned char SPE:1;
                                 ;    2228             unsigned char SPTIE:1;
                                 ;    2229             unsigned char SPEIE:1;
                                 ;    2230             unsigned char MSTR:1;
                                 ;    2231             unsigned char MODFEN:1;
                                 ;    2232             unsigned char TXMD:1;
                                 ;    2233             unsigned char SPMS:1;
                                 ;    2234         } BIT;
                                 ;    2235     } SPCR;
                                 ;    2236     union {
                                 ;    2237         unsigned char BYTE;
                                 ;    2238         struct {
                                 ;    2239             unsigned char :4;
                                 ;    2240             unsigned char SSLP3:1;
                                 ;    2241             unsigned char SSLP2:1;
                                 ;    2242             unsigned char SSLP1:1;
                                 ;    2243             unsigned char SSLP0:1;
                                 ;    2244         } BIT;
                                 ;    2245     } SSLP;
                                 ;    2246     union {
                                 ;    2247         unsigned char BYTE;
                                 ;    2248         struct {
                                 ;    2249             unsigned char :2;
                                 ;    2250             unsigned char MOIFE:1;
                                 ;    2251             unsigned char MOIFV:1;
                                 ;    2252             unsigned char :1;
                                 ;    2253             unsigned char SPOM:1;
                                 ;    2254             unsigned char SPLP2:1;
                                 ;    2255             unsigned char SPLP:1;
                                 ;    2256         } BIT;
                                 ;    2257     } SPPCR;
                                 ;    2258     union {
                                 ;    2259         unsigned char BYTE;
                                 ;    2260         struct {
                                 ;    2261             unsigned char :4;
                                 ;    2262             unsigned char PERF:1;
                                 ;    2263             unsigned char MODF:1;
                                 ;    2264             unsigned char IDLNF:1;
                                 ;    2265             unsigned char OVRF:1;
                                 ;    2266         } BIT;
                                 ;    2267     } SPSR;
                                 ;    2268     union {
                                 ;    2269         unsigned long LONG;
                                 ;    2270         struct {
                                 ;    2271             unsigned short H;
                                 ;    2272             unsigned short L;
                                 ;    2273         } WORD;
                                 ;    2274     } SPDR;
                                 ;    2275     union {
                                 ;    2276         unsigned char BYTE;
                                 ;    2277         struct {
                                 ;    2278             unsigned char :5;
                                 ;    2279             unsigned char SPSLN:3;
                                 ;    2280         } BIT;
                                 ;    2281     } SPSCR;
                                 ;    2282     union {
                                 ;    2283         unsigned char BYTE;
                                 ;    2284         struct {
                                 ;    2285             unsigned char :1;
                                 ;    2286             unsigned char SPECM:3;
                                 ;    2287             unsigned char :1;
                                 ;    2288             unsigned char SPCP:3;
                                 ;    2289         } BIT;
                                 ;    2290     } SPSSR;
                                 ;    2291     union {
                                 ;    2292         unsigned char BYTE;
                                 ;    2293         struct {
                                 ;    2294             unsigned char SPR7:1;
                                 ;    2295             unsigned char SPR6:1;
                                 ;    2296             unsigned char SPR5:1;
                                 ;    2297             unsigned char SPR4:1;
                                 ;    2298             unsigned char SPR3:1;
                                 ;    2299             unsigned char SPR2:1;
                                 ;    2300             unsigned char SPR1:1;
                                 ;    2301             unsigned char SPR0:1;
                                 ;    2302         } BIT;
                                 ;    2303     } SPBR;
                                 ;    2304     union {
                                 ;    2305         unsigned char BYTE;
                                 ;    2306         struct {
                                 ;    2307             unsigned char :2;
                                 ;    2308             unsigned char SPLW:1;
                                 ;    2309             unsigned char SPRDTD:1;
                                 ;    2310             unsigned char SLSEL:2;
                                 ;    2311             unsigned char SPFC:2;
                                 ;    2312         } BIT;
                                 ;    2313     } SPDCR;
                                 ;    2314     union {
                                 ;    2315         unsigned char BYTE;
                                 ;    2316         struct {
                                 ;    2317             unsigned char :5;
                                 ;    2318             unsigned char SCKDL:3;
                                 ;    2319         } BIT;
                                 ;    2320     } SPCKD;
                                 ;    2321     union {
                                 ;    2322         unsigned char BYTE;
                                 ;    2323         struct {
                                 ;    2324             unsigned char :5;
                                 ;    2325             unsigned char SLNDL:3;
                                 ;    2326         } BIT;
                                 ;    2327     } SSLND;
                                 ;    2328     union {
                                 ;    2329         unsigned char BYTE;
                                 ;    2330         struct {
                                 ;    2331             unsigned char :5;
                                 ;    2332             unsigned char SPNDL:3;
                                 ;    2333         } BIT;
                                 ;    2334     } SPND;
                                 ;    2335     union {
                                 ;    2336         unsigned char BYTE;
                                 ;    2337         struct {
                                 ;    2338             unsigned char :4;
                                 ;    2339             unsigned char PTE:1;
                                 ;    2340             unsigned char SPIIE:1;
                                 ;    2341             unsigned char SPOE:1;
                                 ;    2342             unsigned char SPPE:1;
                                 ;    2343         } BIT;
                                 ;    2344     } SPCR2;
                                 ;    2345     union {
                                 ;    2346         unsigned short WORD;
                                 ;    2347         struct {
                                 ;    2348             unsigned short SCKDEN:1;
                                 ;    2349             unsigned short SLNDEN:1;
                                 ;    2350             unsigned short SPNDEN:1;
                                 ;    2351             unsigned short LSBF:1;
                                 ;    2352             unsigned short SPB:4;
                                 ;    2353             unsigned short SSLKP:1;
                                 ;    2354             unsigned short SSLA:3;
                                 ;    2355             unsigned short BRDV:2;
                                 ;    2356             unsigned short CPOL:1;
                                 ;    2357             unsigned short CPHA:1;
                                 ;    2358         } BIT;
                                 ;    2359     } SPCMD0;
                                 ;    2360     union {
                                 ;    2361         unsigned short WORD;
                                 ;    2362         struct {
                                 ;    2363             unsigned short SCKDEN:1;
                                 ;    2364             unsigned short SLNDEN:1;
                                 ;    2365             unsigned short SPNDEN:1;
                                 ;    2366             unsigned short LSBF:1;
                                 ;    2367             unsigned short SPB:4;
                                 ;    2368             unsigned short SSLKP:1;
                                 ;    2369             unsigned short SSLA:3;
                                 ;    2370             unsigned short BRDV:2;
                                 ;    2371             unsigned short CPOL:1;
                                 ;    2372             unsigned short CPHA:1;
                                 ;    2373         } BIT;
                                 ;    2374     } SPCMD1;
                                 ;    2375     union {
                                 ;    2376         unsigned short WORD;
                                 ;    2377         struct {
                                 ;    2378             unsigned short SCKDEN:1;
                                 ;    2379             unsigned short SLNDEN:1;
                                 ;    2380             unsigned short SPNDEN:1;
                                 ;    2381             unsigned short LSBF:1;
                                 ;    2382             unsigned short SPB:4;
                                 ;    2383             unsigned short SSLKP:1;
                                 ;    2384             unsigned short SSLA:3;
                                 ;    2385             unsigned short BRDV:2;
                                 ;    2386             unsigned short CPOL:1;
                                 ;    2387             unsigned short CPHA:1;
                                 ;    2388         } BIT;
                                 ;    2389     } SPCMD2;
                                 ;    2390     union {
                                 ;    2391         unsigned short WORD;
                                 ;    2392         struct {
                                 ;    2393             unsigned short SCKDEN:1;
                                 ;    2394             unsigned short SLNDEN:1;
                                 ;    2395             unsigned short SPNDEN:1;
                                 ;    2396             unsigned short LSBF:1;
                                 ;    2397             unsigned short SPB:4;
                                 ;    2398             unsigned short SSLKP:1;
                                 ;    2399             unsigned short SSLA:3;
                                 ;    2400             unsigned short BRDV:2;
                                 ;    2401             unsigned short CPOL:1;
                                 ;    2402             unsigned short CPHA:1;
                                 ;    2403         } BIT;
                                 ;    2404     } SPCMD3;
                                 ;    2405     union {
                                 ;    2406         unsigned short WORD;
                                 ;    2407         struct {
                                 ;    2408             unsigned short SCKDEN:1;
                                 ;    2409             unsigned short SLNDEN:1;
                                 ;    2410             unsigned short SPNDEN:1;
                                 ;    2411             unsigned short LSBF:1;
                                 ;    2412             unsigned short SPB:4;
                                 ;    2413             unsigned short SSLKP:1;
                                 ;    2414             unsigned short SSLA:3;
                                 ;    2415             unsigned short BRDV:2;
                                 ;    2416             unsigned short CPOL:1;
                                 ;    2417             unsigned short CPHA:1;
                                 ;    2418         } BIT;
                                 ;    2419     } SPCMD4;
                                 ;    2420     union {
                                 ;    2421         unsigned short WORD;
                                 ;    2422         struct {
                                 ;    2423             unsigned short SCKDEN:1;
                                 ;    2424             unsigned short SLNDEN:1;
                                 ;    2425             unsigned short SPNDEN:1;
                                 ;    2426             unsigned short LSBF:1;
                                 ;    2427             unsigned short SPB:4;
                                 ;    2428             unsigned short SSLKP:1;
                                 ;    2429             unsigned short SSLA:3;
                                 ;    2430             unsigned short BRDV:2;
                                 ;    2431             unsigned short CPOL:1;
                                 ;    2432             unsigned short CPHA:1;
                                 ;    2433         } BIT;
                                 ;    2434     } SPCMD5;
                                 ;    2435     union {
                                 ;    2436         unsigned short WORD;
                                 ;    2437         struct {
                                 ;    2438             unsigned short SCKDEN:1;
                                 ;    2439             unsigned short SLNDEN:1;
                                 ;    2440             unsigned short SPNDEN:1;
                                 ;    2441             unsigned short LSBF:1;
                                 ;    2442             unsigned short SPB:4;
                                 ;    2443             unsigned short SSLKP:1;
                                 ;    2444             unsigned short SSLA:3;
                                 ;    2445             unsigned short BRDV:2;
                                 ;    2446             unsigned short CPOL:1;
                                 ;    2447             unsigned short CPHA:1;
                                 ;    2448         } BIT;
                                 ;    2449     } SPCMD6;
                                 ;    2450     union {
                                 ;    2451         unsigned short WORD;
                                 ;    2452         struct {
                                 ;    2453             unsigned short SCKDEN:1;
                                 ;    2454             unsigned short SLNDEN:1;
                                 ;    2455             unsigned short SPNDEN:1;
                                 ;    2456             unsigned short LSBF:1;
                                 ;    2457             unsigned short SPB:4;
                                 ;    2458             unsigned short SSLKP:1;
                                 ;    2459             unsigned short SSLA:3;
                                 ;    2460             unsigned short BRDV:2;
                                 ;    2461             unsigned short CPOL:1;
                                 ;    2462             unsigned short CPHA:1;
                                 ;    2463         } BIT;
                                 ;    2464     } SPCMD7;
                                 ;    2465 };
                                 ;    2466 
                                 ;    2467 struct st_mtu {
                                 ;    2468     union {
                                 ;    2469         unsigned char BYTE;
                                 ;    2470         struct {
                                 ;    2471             unsigned char :2;
                                 ;    2472             unsigned char OE4D:1;
                                 ;    2473             unsigned char OE4C:1;
                                 ;    2474             unsigned char OE3D:1;
                                 ;    2475             unsigned char OE4B:1;
                                 ;    2476             unsigned char OE4A:1;
                                 ;    2477             unsigned char OE3B:1;
                                 ;    2478         } BIT;
                                 ;    2479     } TOER;
                                 ;    2480     unsigned char wk0[2];
                                 ;    2481     union {
                                 ;    2482         unsigned char BYTE;
                                 ;    2483         struct {
                                 ;    2484             unsigned char :1;
                                 ;    2485             unsigned char BCD:1;
                                 ;    2486             unsigned char N:1;
                                 ;    2487             unsigned char P:1;
                                 ;    2488             unsigned char FB:1;
                                 ;    2489             unsigned char WF:1;
                                 ;    2490             unsigned char VF:1;
                                 ;    2491             unsigned char UF:1;
                                 ;    2492         } BIT;
                                 ;    2493     } TGCR;
                                 ;    2494     union {
                                 ;    2495         unsigned char BYTE;
                                 ;    2496         struct {
                                 ;    2497             unsigned char :1;
                                 ;    2498             unsigned char PSYE:1;
                                 ;    2499             unsigned char :2;
                                 ;    2500             unsigned char TOCL:1;
                                 ;    2501             unsigned char TOCS:1;
                                 ;    2502             unsigned char OLSN:1;
                                 ;    2503             unsigned char OLSP:1;
                                 ;    2504         } BIT;
                                 ;    2505     } TOCR1;
                                 ;    2506     union {
                                 ;    2507         unsigned char BYTE;
                                 ;    2508         struct {
                                 ;    2509             unsigned char BF:2;
                                 ;    2510             unsigned char OLS3N:1;
                                 ;    2511             unsigned char OLS3P:1;
                                 ;    2512             unsigned char OLS2N:1;
                                 ;    2513             unsigned char OLS2P:1;
                                 ;    2514             unsigned char OLS1N:1;
                                 ;    2515             unsigned char OLS1P:1;
                                 ;    2516         } BIT;
                                 ;    2517     } TOCR2;
                                 ;    2518     unsigned char wk1[4];
                                 ;    2519     unsigned short TCDR;
                                 ;    2520     unsigned short TDDR;
                                 ;    2521     unsigned char wk2[8];
                                 ;    2522     unsigned short TCNTS;
                                 ;    2523     unsigned short TCBR;
                                 ;    2524     unsigned char wk3[12];
                                 ;    2525     union {
                                 ;    2526         unsigned char BYTE;
                                 ;    2527         struct {
                                 ;    2528             unsigned char T3AEN:1;
                                 ;    2529             unsigned char T3ACOR:3;
                                 ;    2530             unsigned char T4VEN:1;
                                 ;    2531             unsigned char T4VCOR:3;
                                 ;    2532         } BIT;
                                 ;    2533     } TITCR;
                                 ;    2534     union {
                                 ;    2535         unsigned char BYTE;
                                 ;    2536         struct {
                                 ;    2537             unsigned char :1;
                                 ;    2538             unsigned char T3ACNT:3;
                                 ;    2539             unsigned char :1;
                                 ;    2540             unsigned char T4VCNT:3;
                                 ;    2541         } BIT;
                                 ;    2542     } TITCNT;
                                 ;    2543     union {
                                 ;    2544         unsigned char BYTE;
                                 ;    2545         struct {
                                 ;    2546             unsigned char :6;
                                 ;    2547             unsigned char BTE:2;
                                 ;    2548         } BIT;
                                 ;    2549     } TBTER;
                                 ;    2550     unsigned char wk4[1];
                                 ;    2551     union {
                                 ;    2552         unsigned char BYTE;
                                 ;    2553         struct {
                                 ;    2554             unsigned char :7;
                                 ;    2555             unsigned char TDRE:1;
                                 ;    2556         } BIT;
                                 ;    2557     } TDER;
                                 ;    2558     unsigned char wk5[1];
                                 ;    2559     union {
                                 ;    2560         unsigned char BYTE;
                                 ;    2561         struct {
                                 ;    2562             unsigned char :2;
                                 ;    2563             unsigned char OLS3N:1;
                                 ;    2564             unsigned char OLS3P:1;
                                 ;    2565             unsigned char OLS2N:1;
                                 ;    2566             unsigned char OLS2P:1;
                                 ;    2567             unsigned char OLS1N:1;
                                 ;    2568             unsigned char OLS1P:1;
                                 ;    2569         } BIT;
                                 ;    2570     } TOLBR;
                                 ;    2571     unsigned char wk6[41];
                                 ;    2572     union {
                                 ;    2573         unsigned char BYTE;
                                 ;    2574         struct {
                                 ;    2575             unsigned char CCE:1;
                                 ;    2576             unsigned char :6;
                                 ;    2577             unsigned char WRE:1;
                                 ;    2578         } BIT;
                                 ;    2579     } TWCR;
                                 ;    2580     unsigned char wk7[31];
                                 ;    2581     union {
                                 ;    2582         unsigned char BYTE;
                                 ;    2583         struct {
                                 ;    2584             unsigned char CST4:1;
                                 ;    2585             unsigned char CST3:1;
                                 ;    2586             unsigned char :3;
                                 ;    2587             unsigned char CST2:1;
                                 ;    2588             unsigned char CST1:1;
                                 ;    2589             unsigned char CST0:1;
                                 ;    2590         } BIT;
                                 ;    2591     } TSTR;
                                 ;    2592     union {
                                 ;    2593         unsigned char BYTE;
                                 ;    2594         struct {
                                 ;    2595             unsigned char SYNC4:1;
                                 ;    2596             unsigned char SYNC3:1;
                                 ;    2597             unsigned char :3;
                                 ;    2598             unsigned char SYNC2:1;
                                 ;    2599             unsigned char SYNC1:1;
                                 ;    2600             unsigned char SYNC0:1;
                                 ;    2601         } BIT;
                                 ;    2602     } TSYR;
                                 ;    2603     unsigned char wk8[2];
                                 ;    2604     union {
                                 ;    2605         unsigned char BYTE;
                                 ;    2606         struct {
                                 ;    2607             unsigned char :7;
                                 ;    2608             unsigned char RWE:1;
                                 ;    2609         } BIT;
                                 ;    2610     } TRWER;
                                 ;    2611 };
                                 ;    2612 
                                 ;    2613 struct st_mtu0 {
                                 ;    2614     union {
                                 ;    2615         unsigned char BYTE;
                                 ;    2616         struct {
                                 ;    2617             unsigned char CCLR:3;
                                 ;    2618             unsigned char CKEG:2;
                                 ;    2619             unsigned char TPSC:3;
                                 ;    2620         } BIT;
                                 ;    2621     } TCR;
                                 ;    2622     union {
                                 ;    2623         unsigned char BYTE;
                                 ;    2624         struct {
                                 ;    2625             unsigned char :1;
                                 ;    2626             unsigned char BFE:1;
                                 ;    2627             unsigned char BFB:1;
                                 ;    2628             unsigned char BFA:1;
                                 ;    2629             unsigned char MD:4;
                                 ;    2630         } BIT;
                                 ;    2631     } TMDR;
                                 ;    2632     union {
                                 ;    2633         unsigned char BYTE;
                                 ;    2634         struct {
                                 ;    2635             unsigned char IOB:4;
                                 ;    2636             unsigned char IOA:4;
                                 ;    2637         } BIT;
                                 ;    2638     } TIORH;
                                 ;    2639     union {
                                 ;    2640         unsigned char BYTE;
                                 ;    2641         struct {
                                 ;    2642             unsigned char IOD:4;
                                 ;    2643             unsigned char IOC:4;
                                 ;    2644         } BIT;
                                 ;    2645     } TIORL;
                                 ;    2646     union {
                                 ;    2647         unsigned char BYTE;
                                 ;    2648         struct {
                                 ;    2649             unsigned char TTGE:1;
                                 ;    2650             unsigned char :2;
                                 ;    2651             unsigned char TCIEV:1;
                                 ;    2652             unsigned char TGIED:1;
                                 ;    2653             unsigned char TGIEC:1;
                                 ;    2654             unsigned char TGIEB:1;
                                 ;    2655             unsigned char TGIEA:1;
                                 ;    2656         } BIT;
                                 ;    2657     } TIER;
                                 ;    2658     unsigned char TSR;
                                 ;    2659     unsigned short TCNT;
                                 ;    2660     unsigned short TGRA;
                                 ;    2661     unsigned short TGRB;
                                 ;    2662     unsigned short TGRC;
                                 ;    2663     unsigned short TGRD;
                                 ;    2664     unsigned char wk0[16];
                                 ;    2665     unsigned short TGRE;
                                 ;    2666     unsigned short TGRF;
                                 ;    2667     union {
                                 ;    2668         unsigned char BYTE;
                                 ;    2669         struct {
                                 ;    2670             unsigned char :6;
                                 ;    2671             unsigned char TGIEF:1;
                                 ;    2672             unsigned char TGIEE:1;
                                 ;    2673         } BIT;
                                 ;    2674     } TIER2;
                                 ;    2675     unsigned char wk1[1];
                                 ;    2676     union {
                                 ;    2677         unsigned char BYTE;
                                 ;    2678         struct {
                                 ;    2679             unsigned char :5;
                                 ;    2680             unsigned char TTSE:1;
                                 ;    2681             unsigned char TTSB:1;
                                 ;    2682             unsigned char TTSA:1;
                                 ;    2683         } BIT;
                                 ;    2684     } TBTM;
                                 ;    2685 };
                                 ;    2686 
                                 ;    2687 struct st_mtu1 {
                                 ;    2688     union {
                                 ;    2689         unsigned char BYTE;
                                 ;    2690         struct {
                                 ;    2691             unsigned char CCLR:3;
                                 ;    2692             unsigned char CKEG:2;
                                 ;    2693             unsigned char TPSC:3;
                                 ;    2694         } BIT;
                                 ;    2695     } TCR;
                                 ;    2696     union {
                                 ;    2697         unsigned char BYTE;
                                 ;    2698         struct {
                                 ;    2699             unsigned char :4;
                                 ;    2700             unsigned char MD:4;
                                 ;    2701         } BIT;
                                 ;    2702     } TMDR;
                                 ;    2703     union {
                                 ;    2704         unsigned char BYTE;
                                 ;    2705         struct {
                                 ;    2706             unsigned char IOB:4;
                                 ;    2707             unsigned char IOA:4;
                                 ;    2708         } BIT;
                                 ;    2709     } TIOR;
                                 ;    2710     unsigned char wk0[1];
                                 ;    2711     union {
                                 ;    2712         unsigned char BYTE;
                                 ;    2713         struct {
                                 ;    2714             unsigned char TTGE:1;
                                 ;    2715             unsigned char :1;
                                 ;    2716             unsigned char TCIEU:1;
                                 ;    2717             unsigned char TCIEV:1;
                                 ;    2718             unsigned char :2;
                                 ;    2719             unsigned char TGIEB:1;
                                 ;    2720             unsigned char TGIEA:1;
                                 ;    2721         } BIT;
                                 ;    2722     } TIER;
                                 ;    2723     union {
                                 ;    2724         unsigned char BYTE;
                                 ;    2725         struct {
                                 ;    2726             unsigned char TCFD:1;
                                 ;    2727             unsigned char :7;
                                 ;    2728         } BIT;
                                 ;    2729     } TSR;
                                 ;    2730     unsigned short TCNT;
                                 ;    2731     unsigned short TGRA;
                                 ;    2732     unsigned short TGRB;
                                 ;    2733     unsigned char wk1[4];
                                 ;    2734     union {
                                 ;    2735         unsigned char BYTE;
                                 ;    2736         struct {
                                 ;    2737             unsigned char :4;
                                 ;    2738             unsigned char I2BE:1;
                                 ;    2739             unsigned char I2AE:1;
                                 ;    2740             unsigned char I1BE:1;
                                 ;    2741             unsigned char I1AE:1;
                                 ;    2742         } BIT;
                                 ;    2743     } TICCR;
                                 ;    2744 };
                                 ;    2745 
                                 ;    2746 struct st_mtu2 {
                                 ;    2747     union {
                                 ;    2748         unsigned char BYTE;
                                 ;    2749         struct {
                                 ;    2750             unsigned char CCLR:3;
                                 ;    2751             unsigned char CKEG:2;
                                 ;    2752             unsigned char TPSC:3;
                                 ;    2753         } BIT;
                                 ;    2754     } TCR;
                                 ;    2755     union {
                                 ;    2756         unsigned char BYTE;
                                 ;    2757         struct {
                                 ;    2758             unsigned char :4;
                                 ;    2759             unsigned char MD:4;
                                 ;    2760         } BIT;
                                 ;    2761     } TMDR;
                                 ;    2762     union {
                                 ;    2763         unsigned char BYTE;
                                 ;    2764         struct {
                                 ;    2765             unsigned char IOB:4;
                                 ;    2766             unsigned char IOA:4;
                                 ;    2767         } BIT;
                                 ;    2768     } TIOR;
                                 ;    2769     unsigned char wk0[1];
                                 ;    2770     union {
                                 ;    2771         unsigned char BYTE;
                                 ;    2772         struct {
                                 ;    2773             unsigned char TTGE:1;
                                 ;    2774             unsigned char :1;
                                 ;    2775             unsigned char TCIEU:1;
                                 ;    2776             unsigned char TCIEV:1;
                                 ;    2777             unsigned char :2;
                                 ;    2778             unsigned char TGIEB:1;
                                 ;    2779             unsigned char TGIEA:1;
                                 ;    2780         } BIT;
                                 ;    2781     } TIER;
                                 ;    2782     union {
                                 ;    2783         unsigned char BYTE;
                                 ;    2784         struct {
                                 ;    2785             unsigned char TCFD:1;
                                 ;    2786             unsigned char :7;
                                 ;    2787         } BIT;
                                 ;    2788     } TSR;
                                 ;    2789     unsigned short TCNT;
                                 ;    2790     unsigned short TGRA;
                                 ;    2791     unsigned short TGRB;
                                 ;    2792 };
                                 ;    2793 
                                 ;    2794 struct st_mtu3 {
                                 ;    2795     union {
                                 ;    2796         unsigned char BYTE;
                                 ;    2797         struct {
                                 ;    2798             unsigned char CCLR:3;
                                 ;    2799             unsigned char CKEG:2;
                                 ;    2800             unsigned char TPSC:3;
                                 ;    2801         } BIT;
                                 ;    2802     } TCR;
                                 ;    2803     unsigned char wk0[1];
                                 ;    2804     union {
                                 ;    2805         unsigned char BYTE;
                                 ;    2806         struct {
                                 ;    2807             unsigned char :1;
                                 ;    2808             unsigned char BFE:1;
                                 ;    2809             unsigned char BFB:1;
                                 ;    2810             unsigned char BFA:1;
                                 ;    2811             unsigned char MD:4;
                                 ;    2812         } BIT;
                                 ;    2813     } TMDR;
                                 ;    2814     unsigned char wk1[1];
                                 ;    2815     union {
                                 ;    2816         unsigned char BYTE;
                                 ;    2817         struct {
                                 ;    2818             unsigned char IOB:4;
                                 ;    2819             unsigned char IOA:4;
                                 ;    2820         } BIT;
                                 ;    2821     } TIORH;
                                 ;    2822     union {
                                 ;    2823         unsigned char BYTE;
                                 ;    2824         struct {
                                 ;    2825             unsigned char IOD:4;
                                 ;    2826             unsigned char IOC:4;
                                 ;    2827         } BIT;
                                 ;    2828     } TIORL;
                                 ;    2829     unsigned char wk2[2];
                                 ;    2830     union {
                                 ;    2831         unsigned char BYTE;
                                 ;    2832         struct {
                                 ;    2833             unsigned char TTGE:1;
                                 ;    2834             unsigned char TTGE2:1;
                                 ;    2835             unsigned char TCIEU:1;
                                 ;    2836             unsigned char TCIEV:1;
                                 ;    2837             unsigned char TGIED:1;
                                 ;    2838             unsigned char TGIEC:1;
                                 ;    2839             unsigned char TGIEB:1;
                                 ;    2840             unsigned char TGIEA:1;
                                 ;    2841         } BIT;
                                 ;    2842     } TIER;
                                 ;    2843     unsigned char wk3[7];
                                 ;    2844     unsigned short TCNT;
                                 ;    2845     unsigned char wk4[6];
                                 ;    2846     unsigned short TGRA;
                                 ;    2847     unsigned short TGRB;
                                 ;    2848     unsigned char wk5[8];
                                 ;    2849     unsigned short TGRC;
                                 ;    2850     unsigned short TGRD;
                                 ;    2851     unsigned char wk6[4];
                                 ;    2852     union {
                                 ;    2853         unsigned char BYTE;
                                 ;    2854         struct {
                                 ;    2855             unsigned char TCFD:1;
                                 ;    2856             unsigned char :7;
                                 ;    2857         } BIT;
                                 ;    2858     } TSR;
                                 ;    2859     unsigned char wk7[11];
                                 ;    2860     union {
                                 ;    2861         unsigned char BYTE;
                                 ;    2862         struct {
                                 ;    2863             unsigned char :5;
                                 ;    2864             unsigned char TTSE:1;
                                 ;    2865             unsigned char TTSB:1;
                                 ;    2866             unsigned char TTSA:1;
                                 ;    2867         } BIT;
                                 ;    2868     } TBTM;
                                 ;    2869 };
                                 ;    2870 
                                 ;    2871 struct st_mtu4 {
                                 ;    2872     unsigned char DMMY;
                                 ;    2873     union {
                                 ;    2874         unsigned char BYTE;
                                 ;    2875         struct {
                                 ;    2876             unsigned char CCLR:3;
                                 ;    2877             unsigned char CKEG:2;
                                 ;    2878             unsigned char TPSC:3;
                                 ;    2879         } BIT;
                                 ;    2880     } TCR;
                                 ;    2881     unsigned char wk0[1];
                                 ;    2882     union {
                                 ;    2883         unsigned char BYTE;
                                 ;    2884         struct {
                                 ;    2885             unsigned char :1;
                                 ;    2886             unsigned char BFE:1;
                                 ;    2887             unsigned char BFB:1;
                                 ;    2888             unsigned char BFA:1;
                                 ;    2889             unsigned char MD:4;
                                 ;    2890         } BIT;
                                 ;    2891     } TMDR;
                                 ;    2892     unsigned char wk1[2];
                                 ;    2893     union {
                                 ;    2894         unsigned char BYTE;
                                 ;    2895         struct {
                                 ;    2896             unsigned char IOB:4;
                                 ;    2897             unsigned char IOA:4;
                                 ;    2898         } BIT;
                                 ;    2899     } TIORH;
                                 ;    2900     union {
                                 ;    2901         unsigned char BYTE;
                                 ;    2902         struct {
                                 ;    2903             unsigned char IOD:4;
                                 ;    2904             unsigned char IOC:4;
                                 ;    2905         } BIT;
                                 ;    2906     } TIORL;
                                 ;    2907     unsigned char wk2[1];
                                 ;    2908     union {
                                 ;    2909         unsigned char BYTE;
                                 ;    2910         struct {
                                 ;    2911             unsigned char TTGE:1;
                                 ;    2912             unsigned char TTGE2:1;
                                 ;    2913             unsigned char TCIEU:1;
                                 ;    2914             unsigned char TCIEV:1;
                                 ;    2915             unsigned char TGIED:1;
                                 ;    2916             unsigned char TGIEC:1;
                                 ;    2917             unsigned char TGIEB:1;
                                 ;    2918             unsigned char TGIEA:1;
                                 ;    2919         } BIT;
                                 ;    2920     } TIER;
                                 ;    2921     unsigned char wk3[8];
                                 ;    2922     unsigned short TCNT;
                                 ;    2923     unsigned char wk4[8];
                                 ;    2924     unsigned short TGRA;
                                 ;    2925     unsigned short TGRB;
                                 ;    2926     unsigned char wk5[8];
                                 ;    2927     unsigned short TGRC;
                                 ;    2928     unsigned short TGRD;
                                 ;    2929     unsigned char wk6[1];
                                 ;    2930     union {
                                 ;    2931         unsigned char BYTE;
                                 ;    2932         struct {
                                 ;    2933             unsigned char TCFD:1;
                                 ;    2934             unsigned char :7;
                                 ;    2935         } BIT;
                                 ;    2936     } TSR;
                                 ;    2937     unsigned char wk7[11];
                                 ;    2938     union {
                                 ;    2939         unsigned char BYTE;
                                 ;    2940         struct {
                                 ;    2941             unsigned char :5;
                                 ;    2942             unsigned char TTSE:1;
                                 ;    2943             unsigned char TTSB:1;
                                 ;    2944             unsigned char TTSA:1;
                                 ;    2945         } BIT;
                                 ;    2946     } TBTM;
                                 ;    2947     unsigned char wk8[6];
                                 ;    2948     union {
                                 ;    2949         unsigned short WORD;
                                 ;    2950         struct {
                                 ;    2951             unsigned short BF:2;
                                 ;    2952             unsigned short :6;
                                 ;    2953             unsigned short UT4AE:1;
                                 ;    2954             unsigned short DT4AE:1;
                                 ;    2955             unsigned short UT4BE:1;
                                 ;    2956             unsigned short DT4BE:1;
                                 ;    2957             unsigned short ITA3AE:1;
                                 ;    2958             unsigned short ITA4VE:1;
                                 ;    2959             unsigned short ITB3AE:1;
                                 ;    2960             unsigned short ITB4VE:1;
                                 ;    2961         } BIT;
                                 ;    2962     } TADCR;
                                 ;    2963     unsigned char wk9[2];
                                 ;    2964     unsigned short TADCORA;
                                 ;    2965     unsigned short TADCORB;
                                 ;    2966     unsigned short TADCOBRA;
                                 ;    2967     unsigned short TADCOBRB;
                                 ;    2968 };
                                 ;    2969 
                                 ;    2970 struct st_mtu5 {
                                 ;    2971     unsigned short TCNTU;
                                 ;    2972     unsigned short TGRU;
                                 ;    2973     union {
                                 ;    2974         unsigned char BYTE;
                                 ;    2975         struct {
                                 ;    2976             unsigned char CCLR:3;
                                 ;    2977             unsigned char CKEG:2;
                                 ;    2978             unsigned char TPSC:3;
                                 ;    2979         } BIT;
                                 ;    2980     } TCRU;
                                 ;    2981     unsigned char wk0[1];
                                 ;    2982     union {
                                 ;    2983         unsigned char BYTE;
                                 ;    2984         struct {
                                 ;    2985             unsigned char :3;
                                 ;    2986             unsigned char IOC:5;
                                 ;    2987         } BIT;
                                 ;    2988     } TIORU;
                                 ;    2989     unsigned char wk1[9];
                                 ;    2990     unsigned short TCNTV;
                                 ;    2991     unsigned short TGRV;
                                 ;    2992     union {
                                 ;    2993         unsigned char BYTE;
                                 ;    2994         struct {
                                 ;    2995             unsigned char CCLR:3;
                                 ;    2996             unsigned char CKEG:2;
                                 ;    2997             unsigned char TPSC:3;
                                 ;    2998         } BIT;
                                 ;    2999     } TCRV;
                                 ;    3000     union {
                                 ;    3001         unsigned char BYTE;
                                 ;    3002         struct {
                                 ;    3003             unsigned char :3;
                                 ;    3004             unsigned char IOC:5;
                                 ;    3005         } BIT;
                                 ;    3006     } TIORV;
                                 ;    3007     unsigned char wk2[9];
                                 ;    3008     unsigned short TCNTW;
                                 ;    3009     unsigned short TGRW;
                                 ;    3010     union {
                                 ;    3011         unsigned char BYTE;
                                 ;    3012         struct {
                                 ;    3013             unsigned char CCLR:3;
                                 ;    3014             unsigned char CKEG:2;
                                 ;    3015             unsigned char TPSC:3;
                                 ;    3016         } BIT;
                                 ;    3017     } TCRW;
                                 ;    3018     unsigned char wk3[1];
                                 ;    3019     union {
                                 ;    3020         unsigned char BYTE;
                                 ;    3021         struct {
                                 ;    3022             unsigned char :3;
                                 ;    3023             unsigned char IOC:5;
                                 ;    3024         } BIT;
                                 ;    3025     } TIORW;
                                 ;    3026     unsigned char wk4[11];
                                 ;    3027     union {
                                 ;    3028         unsigned char BYTE;
                                 ;    3029         struct {
                                 ;    3030             unsigned char :5;
                                 ;    3031             unsigned char TGIE5U:1;
                                 ;    3032             unsigned char TGIE5V:1;
                                 ;    3033             unsigned char TGIE5W:1;
                                 ;    3034         } BIT;
                                 ;    3035     } TIER;
                                 ;    3036     unsigned char wk5[1];
                                 ;    3037     union {
                                 ;    3038         unsigned char BYTE;
                                 ;    3039         struct {
                                 ;    3040             unsigned char :5;
                                 ;    3041             unsigned char CSTU5:1;
                                 ;    3042             unsigned char CSTV5:1;
                                 ;    3043             unsigned char CSTW5:1;
                                 ;    3044         } BIT;
                                 ;    3045     } TSTR;
                                 ;    3046     unsigned char wk6[1];
                                 ;    3047     union {
                                 ;    3048         unsigned char BYTE;
                                 ;    3049         struct {
                                 ;    3050             unsigned char :5;
                                 ;    3051             unsigned char CMPCLR5U:1;
                                 ;    3052             unsigned char CMPCLR5V:1;
                                 ;    3053             unsigned char CMPCLR5W:1;
                                 ;    3054         } BIT;
                                 ;    3055     } TCNTCMPCLR;
                                 ;    3056 };
                                 ;    3057 
                                 ;    3058 struct st_poe {
                                 ;    3059     union {
                                 ;    3060         unsigned short WORD;
                                 ;    3061         struct {
                                 ;    3062             unsigned short POE3F:1;
                                 ;    3063             unsigned short POE2F:1;
                                 ;    3064             unsigned short POE1F:1;
                                 ;    3065             unsigned short POE0F:1;
                                 ;    3066             unsigned short :3;
                                 ;    3067             unsigned short PIE1:1;
                                 ;    3068             unsigned short POE3M:2;
                                 ;    3069             unsigned short POE2M:2;
                                 ;    3070             unsigned short POE1M:2;
                                 ;    3071             unsigned short POE0M:2;
                                 ;    3072         } BIT;
                                 ;    3073     } ICSR1;
                                 ;    3074     union {
                                 ;    3075         unsigned short WORD;
                                 ;    3076         struct {
                                 ;    3077             unsigned short OSF1:1;
                                 ;    3078             unsigned short :5;
                                 ;    3079             unsigned short OCE1:1;
                                 ;    3080             unsigned short OIE1:1;
                                 ;    3081             unsigned short :8;
                                 ;    3082         } BIT;
                                 ;    3083     } OCSR1;
                                 ;    3084     union {
                                 ;    3085         unsigned short WORD;
                                 ;    3086         struct {
                                 ;    3087             unsigned short POE7F:1;
                                 ;    3088             unsigned short POE6F:1;
                                 ;    3089             unsigned short POE5F:1;
                                 ;    3090             unsigned short POE4F:1;
                                 ;    3091             unsigned short :3;
                                 ;    3092             unsigned short PIE2:1;
                                 ;    3093             unsigned short POE7M:2;
                                 ;    3094             unsigned short POE6M:2;
                                 ;    3095             unsigned short POE5M:2;
                                 ;    3096             unsigned short POE4M:2;
                                 ;    3097         } BIT;
                                 ;    3098     } ICSR2;
                                 ;    3099     union {
                                 ;    3100         unsigned short WORD;
                                 ;    3101         struct {
                                 ;    3102             unsigned short OSF2:1;
                                 ;    3103             unsigned short :5;
                                 ;    3104             unsigned short OCE2:1;
                                 ;    3105             unsigned short OIE2:1;
                                 ;    3106             unsigned short :8;
                                 ;    3107         } BIT;
                                 ;    3108     } OCSR2;
                                 ;    3109     union {
                                 ;    3110         unsigned short WORD;
                                 ;    3111         struct {
                                 ;    3112             unsigned short :3;
                                 ;    3113             unsigned short POE8F:1;
                                 ;    3114             unsigned short :2;
                                 ;    3115             unsigned short POE8E:1;
                                 ;    3116             unsigned short PIE3:1;
                                 ;    3117             unsigned short :6;
                                 ;    3118             unsigned short POE8M:2;
                                 ;    3119         } BIT;
                                 ;    3120     } ICSR3;
                                 ;    3121     union {
                                 ;    3122         unsigned char BYTE;
                                 ;    3123         struct {
                                 ;    3124             unsigned char :4;
                                 ;    3125             unsigned char CH6HIZ:1;
                                 ;    3126             unsigned char CH910HIZ:1;
                                 ;    3127             unsigned char CH0HIZ:1;
                                 ;    3128             unsigned char CH34HIZ:1;
                                 ;    3129         } BIT;
                                 ;    3130     } SPOER;
                                 ;    3131     union {
                                 ;    3132         unsigned char BYTE;
                                 ;    3133         struct {
                                 ;    3134             unsigned char PE7ZE:1;
                                 ;    3135             unsigned char PE6ZE:1;
                                 ;    3136             unsigned char PE5ZE:1;
                                 ;    3137             unsigned char PE4ZE:1;
                                 ;    3138             unsigned char PE3ZE:1;
                                 ;    3139             unsigned char PE2ZE:1;
                                 ;    3140             unsigned char PE1ZE:1;
                                 ;    3141             unsigned char PE0ZE:1;
                                 ;    3142         } BIT;
                                 ;    3143     } POECR1;
                                 ;    3144     union {
                                 ;    3145         unsigned short WORD;
                                 ;    3146         struct {
                                 ;    3147             unsigned short :1;
                                 ;    3148             unsigned short P1CZEA:1;
                                 ;    3149             unsigned short P2CZEA:1;
                                 ;    3150             unsigned short P3CZEA:1;
                                 ;    3151             unsigned short :1;
                                 ;    3152             unsigned short P1CZEB:1;
                                 ;    3153             unsigned short P2CZEB:1;
                                 ;    3154             unsigned short P3CZEB:1;
                                 ;    3155             unsigned short :1;
                                 ;    3156             unsigned short P4CZE:1;
                                 ;    3157             unsigned short P5CZE:1;
                                 ;    3158             unsigned short P6CZE:1;
                                 ;    3159             unsigned short :4;
                                 ;    3160         } BIT;
                                 ;    3161     } POECR2;
                                 ;    3162     union {
                                 ;    3163         unsigned short WORD;
                                 ;    3164         struct {
                                 ;    3165             unsigned short :3;
                                 ;    3166             unsigned short POE9F:1;
                                 ;    3167             unsigned short :2;
                                 ;    3168             unsigned short POE9E:1;
                                 ;    3169             unsigned short PIE4:1;
                                 ;    3170             unsigned short :6;
                                 ;    3171             unsigned short POE9M:2;
                                 ;    3172         } BIT;
                                 ;    3173     } ICSR4;
                                 ;    3174 };
                                 ;    3175 
                                 ;    3176 struct st_s12ad {
                                 ;    3177     union {
                                 ;    3178         unsigned char BYTE;
                                 ;    3179         struct {
                                 ;    3180             unsigned char ADST:1;
                                 ;    3181             unsigned char ADCS:1;
                                 ;    3182             unsigned char :1;
                                 ;    3183             unsigned char ADIE:1;
                                 ;    3184             unsigned char CKS:2;
                                 ;    3185             unsigned char TRGE:1;
                                 ;    3186             unsigned char EXTRG:1;
                                 ;    3187         } BIT;
                                 ;    3188     } ADCSR;
                                 ;    3189     unsigned char wk0[3];
                                 ;    3190     union {
                                 ;    3191         unsigned short WORD;
                                 ;    3192         struct {
                                 ;    3193             unsigned short :8;
                                 ;    3194             unsigned short ANS:8;
                                 ;    3195         } BIT;
                                 ;    3196     } ADANS;
                                 ;    3197     unsigned char wk1[2];
                                 ;    3198     union {
                                 ;    3199         unsigned short WORD;
                                 ;    3200         struct {
                                 ;    3201             unsigned short :8;
                                 ;    3202             unsigned short ADS:8;
                                 ;    3203         } BIT;
                                 ;    3204     } ADADS;
                                 ;    3205     unsigned char wk2[2];
                                 ;    3206     union {
                                 ;    3207         unsigned char BYTE;
                                 ;    3208         struct {
                                 ;    3209             unsigned char :6;
                                 ;    3210             unsigned char ADC:2;
                                 ;    3211         } BIT;
                                 ;    3212     } ADADC;
                                 ;    3213     unsigned char wk3[1];
                                 ;    3214     union {
                                 ;    3215         unsigned short WORD;
                                 ;    3216         struct {
                                 ;    3217             unsigned short ADRFMT:1;
                                 ;    3218             unsigned short :9;
                                 ;    3219             unsigned short ACE:1;
                                 ;    3220             unsigned short :5;
                                 ;    3221         } BIT;
                                 ;    3222     } ADCER;
                                 ;    3223     union {
                                 ;    3224         unsigned char BYTE;
                                 ;    3225         struct {
                                 ;    3226             unsigned char :4;
                                 ;    3227             unsigned char ADSTRS:4;
                                 ;    3228         } BIT;
                                 ;    3229     } ADSTRGR;
                                 ;    3230     unsigned char wk4[15];
                                 ;    3231     unsigned short ADDRA;
                                 ;    3232     unsigned short ADDRB;
                                 ;    3233     unsigned short ADDRC;
                                 ;    3234     unsigned short ADDRD;
                                 ;    3235     unsigned short ADDRE;
                                 ;    3236     unsigned short ADDRF;
                                 ;    3237     unsigned short ADDRG;
                                 ;    3238     unsigned short ADDRH;
                                 ;    3239 };
                                 ;    3240 
                                 ;    3241 struct st_port0 {
                                 ;    3242     union {
                                 ;    3243         unsigned char BYTE;
                                 ;    3244         struct {
                                 ;    3245             unsigned char B7:1;
                                 ;    3246             unsigned char :1;
                                 ;    3247             unsigned char B5:1;
                                 ;    3248             unsigned char :1;
                                 ;    3249             unsigned char B3:1;
                                 ;    3250             unsigned char B2:1;
                                 ;    3251             unsigned char B1:1;
                                 ;    3252             unsigned char B0:1;
                                 ;    3253         } BIT;
                                 ;    3254     } DDR;
                                 ;    3255     unsigned char wk0[31];
                                 ;    3256     union {
                                 ;    3257         unsigned char BYTE;
                                 ;    3258         struct {
                                 ;    3259             unsigned char B7:1;
                                 ;    3260             unsigned char :1;
                                 ;    3261             unsigned char B5:1;
                                 ;    3262             unsigned char :1;
                                 ;    3263             unsigned char B3:1;
                                 ;    3264             unsigned char B2:1;
                                 ;    3265             unsigned char B1:1;
                                 ;    3266             unsigned char B0:1;
                                 ;    3267         } BIT;
                                 ;    3268     } DR;
                                 ;    3269     unsigned char wk1[31];
                                 ;    3270     union {
                                 ;    3271         unsigned char BYTE;
                                 ;    3272         struct {
                                 ;    3273             unsigned char B7:1;
                                 ;    3274             unsigned char :1;
                                 ;    3275             unsigned char B5:1;
                                 ;    3276             unsigned char :1;
                                 ;    3277             unsigned char B3:1;
                                 ;    3278             unsigned char B2:1;
                                 ;    3279             unsigned char B1:1;
                                 ;    3280             unsigned char B0:1;
                                 ;    3281         } BIT;
                                 ;    3282     } PORT;
                                 ;    3283     unsigned char wk2[31];
                                 ;    3284     union {
                                 ;    3285         unsigned char BYTE;
                                 ;    3286         struct {
                                 ;    3287             unsigned char B7:1;
                                 ;    3288             unsigned char :1;
                                 ;    3289             unsigned char B5:1;
                                 ;    3290             unsigned char :1;
                                 ;    3291             unsigned char B3:1;
                                 ;    3292             unsigned char B2:1;
                                 ;    3293             unsigned char B1:1;
                                 ;    3294             unsigned char B0:1;
                                 ;    3295         } BIT;
                                 ;    3296     } ICR;
                                 ;    3297     unsigned char wk3[31];
                                 ;    3298     union {
                                 ;    3299         unsigned char BYTE;
                                 ;    3300         struct {
                                 ;    3301             unsigned char B7:1;
                                 ;    3302             unsigned char :1;
                                 ;    3303             unsigned char B5:1;
                                 ;    3304             unsigned char :1;
                                 ;    3305             unsigned char B3:1;
                                 ;    3306             unsigned char B2:1;
                                 ;    3307             unsigned char B1:1;
                                 ;    3308             unsigned char B0:1;
                                 ;    3309         } BIT;
                                 ;    3310     } ODR;
                                 ;    3311 };
                                 ;    3312 
                                 ;    3313 struct st_port1 {
                                 ;    3314     union {
                                 ;    3315         unsigned char BYTE;
                                 ;    3316         struct {
                                 ;    3317             unsigned char B7:1;
                                 ;    3318             unsigned char B6:1;
                                 ;    3319             unsigned char B5:1;
                                 ;    3320             unsigned char B4:1;
                                 ;    3321             unsigned char B3:1;
                                 ;    3322             unsigned char B2:1;
                                 ;    3323             unsigned char B1:1;
                                 ;    3324             unsigned char B0:1;
                                 ;    3325         } BIT;
                                 ;    3326     } DDR;
                                 ;    3327     unsigned char wk0[31];
                                 ;    3328     union {
                                 ;    3329         unsigned char BYTE;
                                 ;    3330         struct {
                                 ;    3331             unsigned char B7:1;
                                 ;    3332             unsigned char B6:1;
                                 ;    3333             unsigned char B5:1;
                                 ;    3334             unsigned char B4:1;
                                 ;    3335             unsigned char B3:1;
                                 ;    3336             unsigned char B2:1;
                                 ;    3337             unsigned char B1:1;
                                 ;    3338             unsigned char B0:1;
                                 ;    3339         } BIT;
                                 ;    3340     } DR;
                                 ;    3341     unsigned char wk1[31];
                                 ;    3342     union {
                                 ;    3343         unsigned char BYTE;
                                 ;    3344         struct {
                                 ;    3345             unsigned char B7:1;
                                 ;    3346             unsigned char B6:1;
                                 ;    3347             unsigned char B5:1;
                                 ;    3348             unsigned char B4:1;
                                 ;    3349             unsigned char B3:1;
                                 ;    3350             unsigned char B2:1;
                                 ;    3351             unsigned char B1:1;
                                 ;    3352             unsigned char B0:1;
                                 ;    3353         } BIT;
                                 ;    3354     } PORT;
                                 ;    3355     unsigned char wk2[31];
                                 ;    3356     union {
                                 ;    3357         unsigned char BYTE;
                                 ;    3358         struct {
                                 ;    3359             unsigned char B7:1;
                                 ;    3360             unsigned char B6:1;
                                 ;    3361             unsigned char B5:1;
                                 ;    3362             unsigned char B4:1;
                                 ;    3363             unsigned char B3:1;
                                 ;    3364             unsigned char B2:1;
                                 ;    3365             unsigned char B1:1;
                                 ;    3366             unsigned char B0:1;
                                 ;    3367         } BIT;
                                 ;    3368     } ICR;
                                 ;    3369     unsigned char wk3[31];
                                 ;    3370     union {
                                 ;    3371         unsigned char BYTE;
                                 ;    3372         struct {
                                 ;    3373             unsigned char B7:1;
                                 ;    3374             unsigned char B6:1;
                                 ;    3375             unsigned char B5:1;
                                 ;    3376             unsigned char B4:1;
                                 ;    3377             unsigned char B3:1;
                                 ;    3378             unsigned char B2:1;
                                 ;    3379             unsigned char B1:1;
                                 ;    3380             unsigned char B0:1;
                                 ;    3381         } BIT;
                                 ;    3382     } ODR;
                                 ;    3383 };
                                 ;    3384 
                                 ;    3385 struct st_port2 {
                                 ;    3386     union {
                                 ;    3387         unsigned char BYTE;
                                 ;    3388         struct {
                                 ;    3389             unsigned char B7:1;
                                 ;    3390             unsigned char B6:1;
                                 ;    3391             unsigned char B5:1;
                                 ;    3392             unsigned char B4:1;
                                 ;    3393             unsigned char B3:1;
                                 ;    3394             unsigned char B2:1;
                                 ;    3395             unsigned char B1:1;
                                 ;    3396             unsigned char B0:1;
                                 ;    3397         } BIT;
                                 ;    3398     } DDR;
                                 ;    3399     unsigned char wk0[31];
                                 ;    3400     union {
                                 ;    3401         unsigned char BYTE;
                                 ;    3402         struct {
                                 ;    3403             unsigned char B7:1;
                                 ;    3404             unsigned char B6:1;
                                 ;    3405             unsigned char B5:1;
                                 ;    3406             unsigned char B4:1;
                                 ;    3407             unsigned char B3:1;
                                 ;    3408             unsigned char B2:1;
                                 ;    3409             unsigned char B1:1;
                                 ;    3410             unsigned char B0:1;
                                 ;    3411         } BIT;
                                 ;    3412     } DR;
                                 ;    3413     unsigned char wk1[31];
                                 ;    3414     union {
                                 ;    3415         unsigned char BYTE;
                                 ;    3416         struct {
                                 ;    3417             unsigned char B7:1;
                                 ;    3418             unsigned char B6:1;
                                 ;    3419             unsigned char B5:1;
                                 ;    3420             unsigned char B4:1;
                                 ;    3421             unsigned char B3:1;
                                 ;    3422             unsigned char B2:1;
                                 ;    3423             unsigned char B1:1;
                                 ;    3424             unsigned char B0:1;
                                 ;    3425         } BIT;
                                 ;    3426     } PORT;
                                 ;    3427     unsigned char wk2[31];
                                 ;    3428     union {
                                 ;    3429         unsigned char BYTE;
                                 ;    3430         struct {
                                 ;    3431             unsigned char B7:1;
                                 ;    3432             unsigned char B6:1;
                                 ;    3433             unsigned char B5:1;
                                 ;    3434             unsigned char B4:1;
                                 ;    3435             unsigned char B3:1;
                                 ;    3436             unsigned char B2:1;
                                 ;    3437             unsigned char B1:1;
                                 ;    3438             unsigned char B0:1;
                                 ;    3439         } BIT;
                                 ;    3440     } ICR;
                                 ;    3441     unsigned char wk3[31];
                                 ;    3442     union {
                                 ;    3443         unsigned char BYTE;
                                 ;    3444         struct {
                                 ;    3445             unsigned char B7:1;
                                 ;    3446             unsigned char B6:1;
                                 ;    3447             unsigned char B5:1;
                                 ;    3448             unsigned char B4:1;
                                 ;    3449             unsigned char B3:1;
                                 ;    3450             unsigned char B2:1;
                                 ;    3451             unsigned char B1:1;
                                 ;    3452             unsigned char B0:1;
                                 ;    3453         } BIT;
                                 ;    3454     } ODR;
                                 ;    3455 };
                                 ;    3456 
                                 ;    3457 struct st_port3 {
                                 ;    3458     union {
                                 ;    3459         unsigned char BYTE;
                                 ;    3460         struct {
                                 ;    3461             unsigned char :3;
                                 ;    3462             unsigned char B4:1;
                                 ;    3463             unsigned char B3:1;
                                 ;    3464             unsigned char B2:1;
                                 ;    3465             unsigned char B1:1;
                                 ;    3466             unsigned char B0:1;
                                 ;    3467         } BIT;
                                 ;    3468     } DDR;
                                 ;    3469     unsigned char wk0[31];
                                 ;    3470     union {
                                 ;    3471         unsigned char BYTE;
                                 ;    3472         struct {
                                 ;    3473             unsigned char :3;
                                 ;    3474             unsigned char B4:1;
                                 ;    3475             unsigned char B3:1;
                                 ;    3476             unsigned char B2:1;
                                 ;    3477             unsigned char B1:1;
                                 ;    3478             unsigned char B0:1;
                                 ;    3479         } BIT;
                                 ;    3480     } DR;
                                 ;    3481     unsigned char wk1[31];
                                 ;    3482     union {
                                 ;    3483         unsigned char BYTE;
                                 ;    3484         struct {
                                 ;    3485             unsigned char :2;
                                 ;    3486             unsigned char B5:1;
                                 ;    3487             unsigned char B4:1;
                                 ;    3488             unsigned char B3:1;
                                 ;    3489             unsigned char B2:1;
                                 ;    3490             unsigned char B1:1;
                                 ;    3491             unsigned char B0:1;
                                 ;    3492         } BIT;
                                 ;    3493     } PORT;
                                 ;    3494     unsigned char wk2[31];
                                 ;    3495     union {
                                 ;    3496         unsigned char BYTE;
                                 ;    3497         struct {
                                 ;    3498             unsigned char :3;
                                 ;    3499             unsigned char B4:1;
                                 ;    3500             unsigned char B3:1;
                                 ;    3501             unsigned char B2:1;
                                 ;    3502             unsigned char B1:1;
                                 ;    3503             unsigned char B0:1;
                                 ;    3504         } BIT;
                                 ;    3505     } ICR;
                                 ;    3506     unsigned char wk3[31];
                                 ;    3507     union {
                                 ;    3508         unsigned char BYTE;
                                 ;    3509         struct {
                                 ;    3510             unsigned char :3;
                                 ;    3511             unsigned char B4:1;
                                 ;    3512             unsigned char B3:1;
                                 ;    3513             unsigned char B2:1;
                                 ;    3514             unsigned char B1:1;
                                 ;    3515             unsigned char B0:1;
                                 ;    3516         } BIT;
                                 ;    3517     } ODR;
                                 ;    3518 };
                                 ;    3519 
                                 ;    3520 struct st_port4 {
                                 ;    3521     union {
                                 ;    3522         unsigned char BYTE;
                                 ;    3523         struct {
                                 ;    3524             unsigned char B7:1;
                                 ;    3525             unsigned char B6:1;
                                 ;    3526             unsigned char B5:1;
                                 ;    3527             unsigned char B4:1;
                                 ;    3528             unsigned char B3:1;
                                 ;    3529             unsigned char B2:1;
                                 ;    3530             unsigned char B1:1;
                                 ;    3531             unsigned char B0:1;
                                 ;    3532         } BIT;
                                 ;    3533     } DDR;
                                 ;    3534     unsigned char wk0[31];
                                 ;    3535     union {
                                 ;    3536         unsigned char BYTE;
                                 ;    3537         struct {
                                 ;    3538             unsigned char B7:1;
                                 ;    3539             unsigned char B6:1;
                                 ;    3540             unsigned char B5:1;
                                 ;    3541             unsigned char B4:1;
                                 ;    3542             unsigned char B3:1;
                                 ;    3543             unsigned char B2:1;
                                 ;    3544             unsigned char B1:1;
                                 ;    3545             unsigned char B0:1;
                                 ;    3546         } BIT;
                                 ;    3547     } DR;
                                 ;    3548     unsigned char wk1[31];
                                 ;    3549     union {
                                 ;    3550         unsigned char BYTE;
                                 ;    3551         struct {
                                 ;    3552             unsigned char B7:1;
                                 ;    3553             unsigned char B6:1;
                                 ;    3554             unsigned char B5:1;
                                 ;    3555             unsigned char B4:1;
                                 ;    3556             unsigned char B3:1;
                                 ;    3557             unsigned char B2:1;
                                 ;    3558             unsigned char B1:1;
                                 ;    3559             unsigned char B0:1;
                                 ;    3560         } BIT;
                                 ;    3561     } PORT;
                                 ;    3562     unsigned char wk2[31];
                                 ;    3563     union {
                                 ;    3564         unsigned char BYTE;
                                 ;    3565         struct {
                                 ;    3566             unsigned char B7:1;
                                 ;    3567             unsigned char B6:1;
                                 ;    3568             unsigned char B5:1;
                                 ;    3569             unsigned char B4:1;
                                 ;    3570             unsigned char B3:1;
                                 ;    3571             unsigned char B2:1;
                                 ;    3572             unsigned char B1:1;
                                 ;    3573             unsigned char B0:1;
                                 ;    3574         } BIT;
                                 ;    3575     } ICR;
                                 ;    3576 };
                                 ;    3577 
                                 ;    3578 struct st_port5 {
                                 ;    3579     union {
                                 ;    3580         unsigned char BYTE;
                                 ;    3581         struct {
                                 ;    3582             unsigned char B7:1;
                                 ;    3583             unsigned char B6:1;
                                 ;    3584             unsigned char B5:1;
                                 ;    3585             unsigned char B4:1;
                                 ;    3586             unsigned char B3:1;
                                 ;    3587             unsigned char B2:1;
                                 ;    3588             unsigned char B1:1;
                                 ;    3589             unsigned char B0:1;
                                 ;    3590         } BIT;
                                 ;    3591     } DDR;
                                 ;    3592     unsigned char wk0[31];
                                 ;    3593     union {
                                 ;    3594         unsigned char BYTE;
                                 ;    3595         struct {
                                 ;    3596             unsigned char B7:1;
                                 ;    3597             unsigned char B6:1;
                                 ;    3598             unsigned char B5:1;
                                 ;    3599             unsigned char B4:1;
                                 ;    3600             unsigned char B3:1;
                                 ;    3601             unsigned char B2:1;
                                 ;    3602             unsigned char B1:1;
                                 ;    3603             unsigned char B0:1;
                                 ;    3604         } BIT;
                                 ;    3605     } DR;
                                 ;    3606     unsigned char wk1[31];
                                 ;    3607     union {
                                 ;    3608         unsigned char BYTE;
                                 ;    3609         struct {
                                 ;    3610             unsigned char B7:1;
                                 ;    3611             unsigned char B6:1;
                                 ;    3612             unsigned char B5:1;
                                 ;    3613             unsigned char B4:1;
                                 ;    3614             unsigned char B3:1;
                                 ;    3615             unsigned char B2:1;
                                 ;    3616             unsigned char B1:1;
                                 ;    3617             unsigned char B0:1;
                                 ;    3618         } BIT;
                                 ;    3619     } PORT;
                                 ;    3620     unsigned char wk2[31];
                                 ;    3621     union {
                                 ;    3622         unsigned char BYTE;
                                 ;    3623         struct {
                                 ;    3624             unsigned char B7:1;
                                 ;    3625             unsigned char B6:1;
                                 ;    3626             unsigned char B5:1;
                                 ;    3627             unsigned char B4:1;
                                 ;    3628             unsigned char B3:1;
                                 ;    3629             unsigned char B2:1;
                                 ;    3630             unsigned char B1:1;
                                 ;    3631             unsigned char B0:1;
                                 ;    3632         } BIT;
                                 ;    3633     } ICR;
                                 ;    3634 };
                                 ;    3635 
                                 ;    3636 struct st_port6 {
                                 ;    3637     union {
                                 ;    3638         unsigned char BYTE;
                                 ;    3639         struct {
                                 ;    3640             unsigned char B7:1;
                                 ;    3641             unsigned char B6:1;
                                 ;    3642             unsigned char B5:1;
                                 ;    3643             unsigned char B4:1;
                                 ;    3644             unsigned char B3:1;
                                 ;    3645             unsigned char B2:1;
                                 ;    3646             unsigned char B1:1;
                                 ;    3647             unsigned char B0:1;
                                 ;    3648         } BIT;
                                 ;    3649     } DDR;
                                 ;    3650     unsigned char wk0[31];
                                 ;    3651     union {
                                 ;    3652         unsigned char BYTE;
                                 ;    3653         struct {
                                 ;    3654             unsigned char B7:1;
                                 ;    3655             unsigned char B6:1;
                                 ;    3656             unsigned char B5:1;
                                 ;    3657             unsigned char B4:1;
                                 ;    3658             unsigned char B3:1;
                                 ;    3659             unsigned char B2:1;
                                 ;    3660             unsigned char B1:1;
                                 ;    3661             unsigned char B0:1;
                                 ;    3662         } BIT;
                                 ;    3663     } DR;
                                 ;    3664     unsigned char wk1[31];
                                 ;    3665     union {
                                 ;    3666         unsigned char BYTE;
                                 ;    3667         struct {
                                 ;    3668             unsigned char B7:1;
                                 ;    3669             unsigned char B6:1;
                                 ;    3670             unsigned char B5:1;
                                 ;    3671             unsigned char B4:1;
                                 ;    3672             unsigned char B3:1;
                                 ;    3673             unsigned char B2:1;
                                 ;    3674             unsigned char B1:1;
                                 ;    3675             unsigned char B0:1;
                                 ;    3676         } BIT;
                                 ;    3677     } PORT;
                                 ;    3678     unsigned char wk2[31];
                                 ;    3679     union {
                                 ;    3680         unsigned char BYTE;
                                 ;    3681         struct {
                                 ;    3682             unsigned char B7:1;
                                 ;    3683             unsigned char B6:1;
                                 ;    3684             unsigned char B5:1;
                                 ;    3685             unsigned char B4:1;
                                 ;    3686             unsigned char B3:1;
                                 ;    3687             unsigned char B2:1;
                                 ;    3688             unsigned char B1:1;
                                 ;    3689             unsigned char B0:1;
                                 ;    3690         } BIT;
                                 ;    3691     } ICR;
                                 ;    3692 };
                                 ;    3693 
                                 ;    3694 struct st_port7 {
                                 ;    3695     union {
                                 ;    3696         unsigned char BYTE;
                                 ;    3697         struct {
                                 ;    3698             unsigned char B7:1;
                                 ;    3699             unsigned char B6:1;
                                 ;    3700             unsigned char B5:1;
                                 ;    3701             unsigned char B4:1;
                                 ;    3702             unsigned char B3:1;
                                 ;    3703             unsigned char B2:1;
                                 ;    3704             unsigned char B1:1;
                                 ;    3705             unsigned char B0:1;
                                 ;    3706         } BIT;
                                 ;    3707     } DDR;
                                 ;    3708     unsigned char wk0[31];
                                 ;    3709     union {
                                 ;    3710         unsigned char BYTE;
                                 ;    3711         struct {
                                 ;    3712             unsigned char B7:1;
                                 ;    3713             unsigned char B6:1;
                                 ;    3714             unsigned char B5:1;
                                 ;    3715             unsigned char B4:1;
                                 ;    3716             unsigned char B3:1;
                                 ;    3717             unsigned char B2:1;
                                 ;    3718             unsigned char B1:1;
                                 ;    3719             unsigned char B0:1;
                                 ;    3720         } BIT;
                                 ;    3721     } DR;
                                 ;    3722     unsigned char wk1[31];
                                 ;    3723     union {
                                 ;    3724         unsigned char BYTE;
                                 ;    3725         struct {
                                 ;    3726             unsigned char B7:1;
                                 ;    3727             unsigned char B6:1;
                                 ;    3728             unsigned char B5:1;
                                 ;    3729             unsigned char B4:1;
                                 ;    3730             unsigned char B3:1;
                                 ;    3731             unsigned char B2:1;
                                 ;    3732             unsigned char B1:1;
                                 ;    3733             unsigned char B0:1;
                                 ;    3734         } BIT;
                                 ;    3735     } PORT;
                                 ;    3736     unsigned char wk2[31];
                                 ;    3737     union {
                                 ;    3738         unsigned char BYTE;
                                 ;    3739         struct {
                                 ;    3740             unsigned char B7:1;
                                 ;    3741             unsigned char B6:1;
                                 ;    3742             unsigned char B5:1;
                                 ;    3743             unsigned char B4:1;
                                 ;    3744             unsigned char B3:1;
                                 ;    3745             unsigned char B2:1;
                                 ;    3746             unsigned char B1:1;
                                 ;    3747             unsigned char B0:1;
                                 ;    3748         } BIT;
                                 ;    3749     } ICR;
                                 ;    3750 };
                                 ;    3751 
                                 ;    3752 struct st_port8 {
                                 ;    3753     union {
                                 ;    3754         unsigned char BYTE;
                                 ;    3755         struct {
                                 ;    3756             unsigned char :2;
                                 ;    3757             unsigned char B5:1;
                                 ;    3758             unsigned char B4:1;
                                 ;    3759             unsigned char B3:1;
                                 ;    3760             unsigned char B2:1;
                                 ;    3761             unsigned char B1:1;
                                 ;    3762             unsigned char B0:1;
                                 ;    3763         } BIT;
                                 ;    3764     } DDR;
                                 ;    3765     unsigned char wk0[31];
                                 ;    3766     union {
                                 ;    3767         unsigned char BYTE;
                                 ;    3768         struct {
                                 ;    3769             unsigned char :2;
                                 ;    3770             unsigned char B5:1;
                                 ;    3771             unsigned char B4:1;
                                 ;    3772             unsigned char B3:1;
                                 ;    3773             unsigned char B2:1;
                                 ;    3774             unsigned char B1:1;
                                 ;    3775             unsigned char B0:1;
                                 ;    3776         } BIT;
                                 ;    3777     } DR;
                                 ;    3778     unsigned char wk1[31];
                                 ;    3779     union {
                                 ;    3780         unsigned char BYTE;
                                 ;    3781         struct {
                                 ;    3782             unsigned char :2;
                                 ;    3783             unsigned char B5:1;
                                 ;    3784             unsigned char B4:1;
                                 ;    3785             unsigned char B3:1;
                                 ;    3786             unsigned char B2:1;
                                 ;    3787             unsigned char B1:1;
                                 ;    3788             unsigned char B0:1;
                                 ;    3789         } BIT;
                                 ;    3790     } PORT;
                                 ;    3791     unsigned char wk2[31];
                                 ;    3792     union {
                                 ;    3793         unsigned char BYTE;
                                 ;    3794         struct {
                                 ;    3795             unsigned char :2;
                                 ;    3796             unsigned char B5:1;
                                 ;    3797             unsigned char B4:1;
                                 ;    3798             unsigned char B3:1;
                                 ;    3799             unsigned char B2:1;
                                 ;    3800             unsigned char B1:1;
                                 ;    3801             unsigned char B0:1;
                                 ;    3802         } BIT;
                                 ;    3803     } ICR;
                                 ;    3804 };
                                 ;    3805 
                                 ;    3806 struct st_port9 {
                                 ;    3807     union {
                                 ;    3808         unsigned char BYTE;
                                 ;    3809         struct {
                                 ;    3810             unsigned char B7:1;
                                 ;    3811             unsigned char B6:1;
                                 ;    3812             unsigned char B5:1;
                                 ;    3813             unsigned char B4:1;
                                 ;    3814             unsigned char B3:1;
                                 ;    3815             unsigned char B2:1;
                                 ;    3816             unsigned char B1:1;
                                 ;    3817             unsigned char B0:1;
                                 ;    3818         } BIT;
                                 ;    3819     } DDR;
                                 ;    3820     unsigned char wk0[31];
                                 ;    3821     union {
                                 ;    3822         unsigned char BYTE;
                                 ;    3823         struct {
                                 ;    3824             unsigned char B7:1;
                                 ;    3825             unsigned char B6:1;
                                 ;    3826             unsigned char B5:1;
                                 ;    3827             unsigned char B4:1;
                                 ;    3828             unsigned char B3:1;
                                 ;    3829             unsigned char B2:1;
                                 ;    3830             unsigned char B1:1;
                                 ;    3831             unsigned char B0:1;
                                 ;    3832         } BIT;
                                 ;    3833     } DR;
                                 ;    3834     unsigned char wk1[31];
                                 ;    3835     union {
                                 ;    3836         unsigned char BYTE;
                                 ;    3837         struct {
                                 ;    3838             unsigned char B7:1;
                                 ;    3839             unsigned char B6:1;
                                 ;    3840             unsigned char B5:1;
                                 ;    3841             unsigned char B4:1;
                                 ;    3842             unsigned char B3:1;
                                 ;    3843             unsigned char B2:1;
                                 ;    3844             unsigned char B1:1;
                                 ;    3845             unsigned char B0:1;
                                 ;    3846         } BIT;
                                 ;    3847     } PORT;
                                 ;    3848     unsigned char wk2[31];
                                 ;    3849     union {
                                 ;    3850         unsigned char BYTE;
                                 ;    3851         struct {
                                 ;    3852             unsigned char B7:1;
                                 ;    3853             unsigned char B6:1;
                                 ;    3854             unsigned char B5:1;
                                 ;    3855             unsigned char B4:1;
                                 ;    3856             unsigned char B3:1;
                                 ;    3857             unsigned char B2:1;
                                 ;    3858             unsigned char B1:1;
                                 ;    3859             unsigned char B0:1;
                                 ;    3860         } BIT;
                                 ;    3861     } ICR;
                                 ;    3862     unsigned char wk3[95];
                                 ;    3863     union {
                                 ;    3864         unsigned char BYTE;
                                 ;    3865         struct {
                                 ;    3866             unsigned char B7:1;
                                 ;    3867             unsigned char B6:1;
                                 ;    3868             unsigned char B5:1;
                                 ;    3869             unsigned char B4:1;
                                 ;    3870             unsigned char B3:1;
                                 ;    3871             unsigned char B2:1;
                                 ;    3872             unsigned char B1:1;
                                 ;    3873             unsigned char B0:1;
                                 ;    3874         } BIT;
                                 ;    3875     } PCR;
                                 ;    3876 };
                                 ;    3877 
                                 ;    3878 struct st_porta {
                                 ;    3879     union {
                                 ;    3880         unsigned char BYTE;
                                 ;    3881         struct {
                                 ;    3882             unsigned char B7:1;
                                 ;    3883             unsigned char B6:1;
                                 ;    3884             unsigned char B5:1;
                                 ;    3885             unsigned char B4:1;
                                 ;    3886             unsigned char B3:1;
                                 ;    3887             unsigned char B2:1;
                                 ;    3888             unsigned char B1:1;
                                 ;    3889             unsigned char B0:1;
                                 ;    3890         } BIT;
                                 ;    3891     } DDR;
                                 ;    3892     unsigned char wk0[31];
                                 ;    3893     union {
                                 ;    3894         unsigned char BYTE;
                                 ;    3895         struct {
                                 ;    3896             unsigned char B7:1;
                                 ;    3897             unsigned char B6:1;
                                 ;    3898             unsigned char B5:1;
                                 ;    3899             unsigned char B4:1;
                                 ;    3900             unsigned char B3:1;
                                 ;    3901             unsigned char B2:1;
                                 ;    3902             unsigned char B1:1;
                                 ;    3903             unsigned char B0:1;
                                 ;    3904         } BIT;
                                 ;    3905     } DR;
                                 ;    3906     unsigned char wk1[31];
                                 ;    3907     union {
                                 ;    3908         unsigned char BYTE;
                                 ;    3909         struct {
                                 ;    3910             unsigned char B7:1;
                                 ;    3911             unsigned char B6:1;
                                 ;    3912             unsigned char B5:1;
                                 ;    3913             unsigned char B4:1;
                                 ;    3914             unsigned char B3:1;
                                 ;    3915             unsigned char B2:1;
                                 ;    3916             unsigned char B1:1;
                                 ;    3917             unsigned char B0:1;
                                 ;    3918         } BIT;
                                 ;    3919     } PORT;
                                 ;    3920     unsigned char wk2[31];
                                 ;    3921     union {
                                 ;    3922         unsigned char BYTE;
                                 ;    3923         struct {
                                 ;    3924             unsigned char B7:1;
                                 ;    3925             unsigned char B6:1;
                                 ;    3926             unsigned char B5:1;
                                 ;    3927             unsigned char B4:1;
                                 ;    3928             unsigned char B3:1;
                                 ;    3929             unsigned char B2:1;
                                 ;    3930             unsigned char B1:1;
                                 ;    3931             unsigned char B0:1;
                                 ;    3932         } BIT;
                                 ;    3933     } ICR;
                                 ;    3934     unsigned char wk3[95];
                                 ;    3935     union {
                                 ;    3936         unsigned char BYTE;
                                 ;    3937         struct {
                                 ;    3938             unsigned char B7:1;
                                 ;    3939             unsigned char B6:1;
                                 ;    3940             unsigned char B5:1;
                                 ;    3941             unsigned char B4:1;
                                 ;    3942             unsigned char B3:1;
                                 ;    3943             unsigned char B2:1;
                                 ;    3944             unsigned char B1:1;
                                 ;    3945             unsigned char B0:1;
                                 ;    3946         } BIT;
                                 ;    3947     } PCR;
                                 ;    3948 };
                                 ;    3949 
                                 ;    3950 struct st_portb {
                                 ;    3951     union {
                                 ;    3952         unsigned char BYTE;
                                 ;    3953         struct {
                                 ;    3954             unsigned char B7:1;
                                 ;    3955             unsigned char B6:1;
                                 ;    3956             unsigned char B5:1;
                                 ;    3957             unsigned char B4:1;
                                 ;    3958             unsigned char B3:1;
                                 ;    3959             unsigned char B2:1;
                                 ;    3960             unsigned char B1:1;
                                 ;    3961             unsigned char B0:1;
                                 ;    3962         } BIT;
                                 ;    3963     } DDR;
                                 ;    3964     unsigned char wk0[31];
                                 ;    3965     union {
                                 ;    3966         unsigned char BYTE;
                                 ;    3967         struct {
                                 ;    3968             unsigned char B7:1;
                                 ;    3969             unsigned char B6:1;
                                 ;    3970             unsigned char B5:1;
                                 ;    3971             unsigned char B4:1;
                                 ;    3972             unsigned char B3:1;
                                 ;    3973             unsigned char B2:1;
                                 ;    3974             unsigned char B1:1;
                                 ;    3975             unsigned char B0:1;
                                 ;    3976         } BIT;
                                 ;    3977     } DR;
                                 ;    3978     unsigned char wk1[31];
                                 ;    3979     union {
                                 ;    3980         unsigned char BYTE;
                                 ;    3981         struct {
                                 ;    3982             unsigned char B7:1;
                                 ;    3983             unsigned char B6:1;
                                 ;    3984             unsigned char B5:1;
                                 ;    3985             unsigned char B4:1;
                                 ;    3986             unsigned char B3:1;
                                 ;    3987             unsigned char B2:1;
                                 ;    3988             unsigned char B1:1;
                                 ;    3989             unsigned char B0:1;
                                 ;    3990         } BIT;
                                 ;    3991     } PORT;
                                 ;    3992     unsigned char wk2[31];
                                 ;    3993     union {
                                 ;    3994         unsigned char BYTE;
                                 ;    3995         struct {
                                 ;    3996             unsigned char B7:1;
                                 ;    3997             unsigned char B6:1;
                                 ;    3998             unsigned char B5:1;
                                 ;    3999             unsigned char B4:1;
                                 ;    4000             unsigned char B3:1;
                                 ;    4001             unsigned char B2:1;
                                 ;    4002             unsigned char B1:1;
                                 ;    4003             unsigned char B0:1;
                                 ;    4004         } BIT;
                                 ;    4005     } ICR;
                                 ;    4006     unsigned char wk3[95];
                                 ;    4007     union {
                                 ;    4008         unsigned char BYTE;
                                 ;    4009         struct {
                                 ;    4010             unsigned char B7:1;
                                 ;    4011             unsigned char B6:1;
                                 ;    4012             unsigned char B5:1;
                                 ;    4013             unsigned char B4:1;
                                 ;    4014             unsigned char B3:1;
                                 ;    4015             unsigned char B2:1;
                                 ;    4016             unsigned char B1:1;
                                 ;    4017             unsigned char B0:1;
                                 ;    4018         } BIT;
                                 ;    4019     } PCR;
                                 ;    4020 };
                                 ;    4021 
                                 ;    4022 struct st_portc {
                                 ;    4023     union {
                                 ;    4024         unsigned char BYTE;
                                 ;    4025         struct {
                                 ;    4026             unsigned char B7:1;
                                 ;    4027             unsigned char B6:1;
                                 ;    4028             unsigned char B5:1;
                                 ;    4029             unsigned char B4:1;
                                 ;    4030             unsigned char B3:1;
                                 ;    4031             unsigned char B2:1;
                                 ;    4032             unsigned char B1:1;
                                 ;    4033             unsigned char B0:1;
                                 ;    4034         } BIT;
                                 ;    4035     } DDR;
                                 ;    4036     unsigned char wk0[31];
                                 ;    4037     union {
                                 ;    4038         unsigned char BYTE;
                                 ;    4039         struct {
                                 ;    4040             unsigned char B7:1;
                                 ;    4041             unsigned char B6:1;
                                 ;    4042             unsigned char B5:1;
                                 ;    4043             unsigned char B4:1;
                                 ;    4044             unsigned char B3:1;
                                 ;    4045             unsigned char B2:1;
                                 ;    4046             unsigned char B1:1;
                                 ;    4047             unsigned char B0:1;
                                 ;    4048         } BIT;
                                 ;    4049     } DR;
                                 ;    4050     unsigned char wk1[31];
                                 ;    4051     union {
                                 ;    4052         unsigned char BYTE;
                                 ;    4053         struct {
                                 ;    4054             unsigned char B7:1;
                                 ;    4055             unsigned char B6:1;
                                 ;    4056             unsigned char B5:1;
                                 ;    4057             unsigned char B4:1;
                                 ;    4058             unsigned char B3:1;
                                 ;    4059             unsigned char B2:1;
                                 ;    4060             unsigned char B1:1;
                                 ;    4061             unsigned char B0:1;
                                 ;    4062         } BIT;
                                 ;    4063     } PORT;
                                 ;    4064     unsigned char wk2[31];
                                 ;    4065     union {
                                 ;    4066         unsigned char BYTE;
                                 ;    4067         struct {
                                 ;    4068             unsigned char B7:1;
                                 ;    4069             unsigned char B6:1;
                                 ;    4070             unsigned char B5:1;
                                 ;    4071             unsigned char B4:1;
                                 ;    4072             unsigned char B3:1;
                                 ;    4073             unsigned char B2:1;
                                 ;    4074             unsigned char B1:1;
                                 ;    4075             unsigned char B0:1;
                                 ;    4076         } BIT;
                                 ;    4077     } ICR;
                                 ;    4078     unsigned char wk3[31];
                                 ;    4079     union {
                                 ;    4080         unsigned char BYTE;
                                 ;    4081         struct {
                                 ;    4082             unsigned char B7:1;
                                 ;    4083             unsigned char B6:1;
                                 ;    4084             unsigned char B5:1;
                                 ;    4085             unsigned char B4:1;
                                 ;    4086             unsigned char B3:1;
                                 ;    4087             unsigned char B2:1;
                                 ;    4088             unsigned char B1:1;
                                 ;    4089             unsigned char B0:1;
                                 ;    4090         } BIT;
                                 ;    4091     } ODR;
                                 ;    4092     unsigned char wk4[63];
                                 ;    4093     union {
                                 ;    4094         unsigned char BYTE;
                                 ;    4095         struct {
                                 ;    4096             unsigned char B7:1;
                                 ;    4097             unsigned char B6:1;
                                 ;    4098             unsigned char B5:1;
                                 ;    4099             unsigned char B4:1;
                                 ;    4100             unsigned char B3:1;
                                 ;    4101             unsigned char B2:1;
                                 ;    4102             unsigned char B1:1;
                                 ;    4103             unsigned char B0:1;
                                 ;    4104         } BIT;
                                 ;    4105     } PCR;
                                 ;    4106 };
                                 ;    4107 
                                 ;    4108 struct st_portd {
                                 ;    4109     union {
                                 ;    4110         unsigned char BYTE;
                                 ;    4111         struct {
                                 ;    4112             unsigned char B7:1;
                                 ;    4113             unsigned char B6:1;
                                 ;    4114             unsigned char B5:1;
                                 ;    4115             unsigned char B4:1;
                                 ;    4116             unsigned char B3:1;
                                 ;    4117             unsigned char B2:1;
                                 ;    4118             unsigned char B1:1;
                                 ;    4119             unsigned char B0:1;
                                 ;    4120         } BIT;
                                 ;    4121     } DDR;
                                 ;    4122     unsigned char wk0[31];
                                 ;    4123     union {
                                 ;    4124         unsigned char BYTE;
                                 ;    4125         struct {
                                 ;    4126             unsigned char B7:1;
                                 ;    4127             unsigned char B6:1;
                                 ;    4128             unsigned char B5:1;
                                 ;    4129             unsigned char B4:1;
                                 ;    4130             unsigned char B3:1;
                                 ;    4131             unsigned char B2:1;
                                 ;    4132             unsigned char B1:1;
                                 ;    4133             unsigned char B0:1;
                                 ;    4134         } BIT;
                                 ;    4135     } DR;
                                 ;    4136     unsigned char wk1[31];
                                 ;    4137     union {
                                 ;    4138         unsigned char BYTE;
                                 ;    4139         struct {
                                 ;    4140             unsigned char B7:1;
                                 ;    4141             unsigned char B6:1;
                                 ;    4142             unsigned char B5:1;
                                 ;    4143             unsigned char B4:1;
                                 ;    4144             unsigned char B3:1;
                                 ;    4145             unsigned char B2:1;
                                 ;    4146             unsigned char B1:1;
                                 ;    4147             unsigned char B0:1;
                                 ;    4148         } BIT;
                                 ;    4149     } PORT;
                                 ;    4150     unsigned char wk2[31];
                                 ;    4151     union {
                                 ;    4152         unsigned char BYTE;
                                 ;    4153         struct {
                                 ;    4154             unsigned char B7:1;
                                 ;    4155             unsigned char B6:1;
                                 ;    4156             unsigned char B5:1;
                                 ;    4157             unsigned char B4:1;
                                 ;    4158             unsigned char B3:1;
                                 ;    4159             unsigned char B2:1;
                                 ;    4160             unsigned char B1:1;
                                 ;    4161             unsigned char B0:1;
                                 ;    4162         } BIT;
                                 ;    4163     } ICR;
                                 ;    4164     unsigned char wk3[95];
                                 ;    4165     union {
                                 ;    4166         unsigned char BYTE;
                                 ;    4167         struct {
                                 ;    4168             unsigned char B7:1;
                                 ;    4169             unsigned char B6:1;
                                 ;    4170             unsigned char B5:1;
                                 ;    4171             unsigned char B4:1;
                                 ;    4172             unsigned char B3:1;
                                 ;    4173             unsigned char B2:1;
                                 ;    4174             unsigned char B1:1;
                                 ;    4175             unsigned char B0:1;
                                 ;    4176         } BIT;
                                 ;    4177     } PCR;
                                 ;    4178 };
                                 ;    4179 
                                 ;    4180 struct st_porte {
                                 ;    4181     union {
                                 ;    4182         unsigned char BYTE;
                                 ;    4183         struct {
                                 ;    4184             unsigned char B7:1;
                                 ;    4185             unsigned char B6:1;
                                 ;    4186             unsigned char B5:1;
                                 ;    4187             unsigned char B4:1;
                                 ;    4188             unsigned char B3:1;
                                 ;    4189             unsigned char B2:1;
                                 ;    4190             unsigned char B1:1;
                                 ;    4191             unsigned char B0:1;
                                 ;    4192         } BIT;
                                 ;    4193     } DDR;
                                 ;    4194     unsigned char wk0[31];
                                 ;    4195     union {
                                 ;    4196         unsigned char BYTE;
                                 ;    4197         struct {
                                 ;    4198             unsigned char B7:1;
                                 ;    4199             unsigned char B6:1;
                                 ;    4200             unsigned char B5:1;
                                 ;    4201             unsigned char B4:1;
                                 ;    4202             unsigned char B3:1;
                                 ;    4203             unsigned char B2:1;
                                 ;    4204             unsigned char B1:1;
                                 ;    4205             unsigned char B0:1;
                                 ;    4206         } BIT;
                                 ;    4207     } DR;
                                 ;    4208     unsigned char wk1[31];
                                 ;    4209     union {
                                 ;    4210         unsigned char BYTE;
                                 ;    4211         struct {
                                 ;    4212             unsigned char B7:1;
                                 ;    4213             unsigned char B6:1;
                                 ;    4214             unsigned char B5:1;
                                 ;    4215             unsigned char B4:1;
                                 ;    4216             unsigned char B3:1;
                                 ;    4217             unsigned char B2:1;
                                 ;    4218             unsigned char B1:1;
                                 ;    4219             unsigned char B0:1;
                                 ;    4220         } BIT;
                                 ;    4221     } PORT;
                                 ;    4222     unsigned char wk2[31];
                                 ;    4223     union {
                                 ;    4224         unsigned char BYTE;
                                 ;    4225         struct {
                                 ;    4226             unsigned char B7:1;
                                 ;    4227             unsigned char B6:1;
                                 ;    4228             unsigned char B5:1;
                                 ;    4229             unsigned char B4:1;
                                 ;    4230             unsigned char B3:1;
                                 ;    4231             unsigned char B2:1;
                                 ;    4232             unsigned char B1:1;
                                 ;    4233             unsigned char B0:1;
                                 ;    4234         } BIT;
                                 ;    4235     } ICR;
                                 ;    4236     unsigned char wk3[95];
                                 ;    4237     union {
                                 ;    4238         unsigned char BYTE;
                                 ;    4239         struct {
                                 ;    4240             unsigned char B7:1;
                                 ;    4241             unsigned char B6:1;
                                 ;    4242             unsigned char B5:1;
                                 ;    4243             unsigned char B4:1;
                                 ;    4244             unsigned char B3:1;
                                 ;    4245             unsigned char B2:1;
                                 ;    4246             unsigned char B1:1;
                                 ;    4247             unsigned char B0:1;
                                 ;    4248         } BIT;
                                 ;    4249     } PCR;
                                 ;    4250 };
                                 ;    4251 
                                 ;    4252 struct st_portf {
                                 ;    4253     union {
                                 ;    4254         unsigned char BYTE;
                                 ;    4255         struct {
                                 ;    4256             unsigned char :3;
                                 ;    4257             unsigned char B4:1;
                                 ;    4258             unsigned char B3:1;
                                 ;    4259             unsigned char B2:1;
                                 ;    4260             unsigned char B1:1;
                                 ;    4261             unsigned char B0:1;
                                 ;    4262         } BIT;
                                 ;    4263     } DDR;
                                 ;    4264     unsigned char wk0[31];
                                 ;    4265     union {
                                 ;    4266         unsigned char BYTE;
                                 ;    4267         struct {
                                 ;    4268             unsigned char :3;
                                 ;    4269             unsigned char B4:1;
                                 ;    4270             unsigned char B3:1;
                                 ;    4271             unsigned char B2:1;
                                 ;    4272             unsigned char B1:1;
                                 ;    4273             unsigned char B0:1;
                                 ;    4274         } BIT;
                                 ;    4275     } DR;
                                 ;    4276     unsigned char wk1[31];
                                 ;    4277     union {
                                 ;    4278         unsigned char BYTE;
                                 ;    4279         struct {
                                 ;    4280             unsigned char :3;
                                 ;    4281             unsigned char B4:1;
                                 ;    4282             unsigned char B3:1;
                                 ;    4283             unsigned char B2:1;
                                 ;    4284             unsigned char B1:1;
                                 ;    4285             unsigned char B0:1;
                                 ;    4286         } BIT;
                                 ;    4287     } PORT;
                                 ;    4288     unsigned char wk2[31];
                                 ;    4289     union {
                                 ;    4290         unsigned char BYTE;
                                 ;    4291         struct {
                                 ;    4292             unsigned char :3;
                                 ;    4293             unsigned char B4:1;
                                 ;    4294             unsigned char B3:1;
                                 ;    4295             unsigned char B2:1;
                                 ;    4296             unsigned char B1:1;
                                 ;    4297             unsigned char B0:1;
                                 ;    4298         } BIT;
                                 ;    4299     } ICR;
                                 ;    4300 };
                                 ;    4301 
                                 ;    4302 struct st_portg {
                                 ;    4303     union {
                                 ;    4304         unsigned char BYTE;
                                 ;    4305         struct {
                                 ;    4306             unsigned char B7:1;
                                 ;    4307             unsigned char B6:1;
                                 ;    4308             unsigned char B5:1;
                                 ;    4309             unsigned char B4:1;
                                 ;    4310             unsigned char B3:1;
                                 ;    4311             unsigned char B2:1;
                                 ;    4312             unsigned char B1:1;
                                 ;    4313             unsigned char B0:1;
                                 ;    4314         } BIT;
                                 ;    4315     } DDR;
                                 ;    4316     unsigned char wk0[31];
                                 ;    4317     union {
                                 ;    4318         unsigned char BYTE;
                                 ;    4319         struct {
                                 ;    4320             unsigned char B7:1;
                                 ;    4321             unsigned char B6:1;
                                 ;    4322             unsigned char B5:1;
                                 ;    4323             unsigned char B4:1;
                                 ;    4324             unsigned char B3:1;
                                 ;    4325             unsigned char B2:1;
                                 ;    4326             unsigned char B1:1;
                                 ;    4327             unsigned char B0:1;
                                 ;    4328         } BIT;
                                 ;    4329     } DR;
                                 ;    4330     unsigned char wk1[31];
                                 ;    4331     union {
                                 ;    4332         unsigned char BYTE;
                                 ;    4333         struct {
                                 ;    4334             unsigned char B7:1;
                                 ;    4335             unsigned char B6:1;
                                 ;    4336             unsigned char B5:1;
                                 ;    4337             unsigned char B4:1;
                                 ;    4338             unsigned char B3:1;
                                 ;    4339             unsigned char B2:1;
                                 ;    4340             unsigned char B1:1;
                                 ;    4341             unsigned char B0:1;
                                 ;    4342         } BIT;
                                 ;    4343     } PORT;
                                 ;    4344     unsigned char wk2[31];
                                 ;    4345     union {
                                 ;    4346         unsigned char BYTE;
                                 ;    4347         struct {
                                 ;    4348             unsigned char B7:1;
                                 ;    4349             unsigned char B6:1;
                                 ;    4350             unsigned char B5:1;
                                 ;    4351             unsigned char B4:1;
                                 ;    4352             unsigned char B3:1;
                                 ;    4353             unsigned char B2:1;
                                 ;    4354             unsigned char B1:1;
                                 ;    4355             unsigned char B0:1;
                                 ;    4356         } BIT;
                                 ;    4357     } ICR;
                                 ;    4358     unsigned char wk3[95];
                                 ;    4359     union {
                                 ;    4360         unsigned char BYTE;
                                 ;    4361         struct {
                                 ;    4362             unsigned char B7:1;
                                 ;    4363             unsigned char B6:1;
                                 ;    4364             unsigned char B5:1;
                                 ;    4365             unsigned char B4:1;
                                 ;    4366             unsigned char B3:1;
                                 ;    4367             unsigned char B2:1;
                                 ;    4368             unsigned char B1:1;
                                 ;    4369             unsigned char B0:1;
                                 ;    4370         } BIT;
                                 ;    4371     } PCR;
                                 ;    4372 };
                                 ;    4373 
                                 ;    4374 struct st_ioport {
                                 ;    4375     union {
                                 ;    4376         unsigned char BYTE;
                                 ;    4377         struct {
                                 ;    4378             unsigned char CS7E:1;
                                 ;    4379             unsigned char CS6E:1;
                                 ;    4380             unsigned char CS5E:1;
                                 ;    4381             unsigned char CS4E:1;
                                 ;    4382             unsigned char CS3E:1;
                                 ;    4383             unsigned char CS2E:1;
                                 ;    4384             unsigned char CS1E:1;
                                 ;    4385             unsigned char CS0E:1;
                                 ;    4386         } BIT;
                                 ;    4387     } PF0CSE;
                                 ;    4388     union {
                                 ;    4389         unsigned char BYTE;
                                 ;    4390         struct {
                                 ;    4391             unsigned char CS7S:2;
                                 ;    4392             unsigned char CS6S:2;
                                 ;    4393             unsigned char CS5S:2;
                                 ;    4394             unsigned char CS4S:2;
                                 ;    4395         } BIT;
                                 ;    4396     } PF1CSS;
                                 ;    4397     union {
                                 ;    4398         unsigned char BYTE;
                                 ;    4399         struct {
                                 ;    4400             unsigned char CS3S:2;
                                 ;    4401             unsigned char CS2S:2;
                                 ;    4402             unsigned char CS1S:2;
                                 ;    4403             unsigned char :1;
                                 ;    4404             unsigned char CS0S:1;
                                 ;    4405         } BIT;
                                 ;    4406     } PF2CSS;
                                 ;    4407     union {
                                 ;    4408         unsigned char BYTE;
                                 ;    4409         struct {
                                 ;    4410             unsigned char A23E:1;
                                 ;    4411             unsigned char A22E:1;
                                 ;    4412             unsigned char A21E:1;
                                 ;    4413             unsigned char A20E:1;
                                 ;    4414             unsigned char A19E:1;
                                 ;    4415             unsigned char A18E:1;
                                 ;    4416             unsigned char A17E:1;
                                 ;    4417             unsigned char A16E:1;
                                 ;    4418         } BIT;
                                 ;    4419     } PF3BUS;
                                 ;    4420     union {
                                 ;    4421         unsigned char BYTE;
                                 ;    4422         struct {
                                 ;    4423             unsigned char A15E:1;
                                 ;    4424             unsigned char A14E:1;
                                 ;    4425             unsigned char A13E:1;
                                 ;    4426             unsigned char A12E:1;
                                 ;    4427             unsigned char A11E:1;
                                 ;    4428             unsigned char A10E:1;
                                 ;    4429             unsigned char ADRLE:2;
                                 ;    4430         } BIT;
                                 ;    4431     } PF4BUS;
                                 ;    4432     union {
                                 ;    4433         unsigned char BYTE;
                                 ;    4434         struct {
                                 ;    4435             unsigned char WR32BC32E:1;
                                 ;    4436             unsigned char WR1BC1E:1;
                                 ;    4437             unsigned char DH32E:1;
                                 ;    4438             unsigned char DHE:1;
                                 ;    4439             unsigned char :2;
                                 ;    4440             unsigned char ADRHMS:1;
                                 ;    4441             unsigned char :1;
                                 ;    4442         } BIT;
                                 ;    4443     } PF5BUS;
                                 ;    4444     union {
                                 ;    4445         unsigned char BYTE;
                                 ;    4446         struct {
                                 ;    4447             unsigned char SDCLKE:1;
                                 ;    4448             unsigned char DQM1E:1;
                                 ;    4449             unsigned char :1;
                                 ;    4450             unsigned char MDSDE:1;
                                 ;    4451             unsigned char :2;
                                 ;    4452             unsigned char WAITS:2;
                                 ;    4453         } BIT;
                                 ;    4454     } PF6BUS;
                                 ;    4455     union {
                                 ;    4456         unsigned char BYTE;
                                 ;    4457         struct {
                                 ;    4458             unsigned char EDMA1S:2;
                                 ;    4459             unsigned char EDMA0S:2;
                                 ;    4460             unsigned char :4;
                                 ;    4461         } BIT;
                                 ;    4462     } PF7DMA;
                                 ;    4463     union {
                                 ;    4464         unsigned char BYTE;
                                 ;    4465         struct {
                                 ;    4466             unsigned char ITS15:1;
                                 ;    4467             unsigned char :1;
                                 ;    4468             unsigned char ITS13:1;
                                 ;    4469             unsigned char :1;
                                 ;    4470             unsigned char ITS11:1;
                                 ;    4471             unsigned char ITS10:1;
                                 ;    4472             unsigned char ITS9:1;
                                 ;    4473             unsigned char ITS8:1;
                                 ;    4474         } BIT;
                                 ;    4475     } PF8IRQ;
                                 ;    4476     union {
                                 ;    4477         unsigned char BYTE;
                                 ;    4478         struct {
                                 ;    4479             unsigned char ITS7:1;
                                 ;    4480             unsigned char ITS6:1;
                                 ;    4481             unsigned char ITS5:1;
                                 ;    4482             unsigned char ITS4:1;
                                 ;    4483             unsigned char ITS3:1;
                                 ;    4484             unsigned char ITS2:1;
                                 ;    4485             unsigned char ITS1:1;
                                 ;    4486             unsigned char ITS0:1;
                                 ;    4487         } BIT;
                                 ;    4488     } PF9IRQ;
                                 ;    4489     union {
                                 ;    4490         unsigned char BYTE;
                                 ;    4491         struct {
                                 ;    4492             unsigned char :7;
                                 ;    4493             unsigned char ADTRG0S:1;
                                 ;    4494         } BIT;
                                 ;    4495     } PFAADC;
                                 ;    4496     union {
                                 ;    4497         unsigned char BYTE;
                                 ;    4498         struct {
                                 ;    4499             unsigned char :4;
                                 ;    4500             unsigned char TMR3S:1;
                                 ;    4501             unsigned char TMR2S:1;
                                 ;    4502             unsigned char :2;
                                 ;    4503         } BIT;
                                 ;    4504     } PFBTMR;
                                 ;    4505     union {
                                 ;    4506         unsigned char BYTE;
                                 ;    4507         struct {
                                 ;    4508             unsigned char TCLKS:1;
                                 ;    4509             unsigned char MTUS6:1;
                                 ;    4510             unsigned char MTUS5:1;
                                 ;    4511             unsigned char MTUS4:1;
                                 ;    4512             unsigned char MTUS3:1;
                                 ;    4513             unsigned char MTUS2:1;
                                 ;    4514             unsigned char MTUS1:1;
                                 ;    4515             unsigned char MTUS0:1;
                                 ;    4516         } BIT;
                                 ;    4517     } PFCMTU;
                                 ;    4518     union {
                                 ;    4519         unsigned char BYTE;
                                 ;    4520         struct {
                                 ;    4521             unsigned char TCLKS:1;
                                 ;    4522             unsigned char MTUS6:1;
                                 ;    4523             unsigned char :6;
                                 ;    4524         } BIT;
                                 ;    4525     } PFDMTU;
                                 ;    4526     union {
                                 ;    4527         unsigned char BYTE;
                                 ;    4528         struct {
                                 ;    4529             unsigned char EE:1;
                                 ;    4530             unsigned char :2;
                                 ;    4531             unsigned char PHYMODE:1;
                                 ;    4532             unsigned char ENETE3:1;
                                 ;    4533             unsigned char ENETE2:1;
                                 ;    4534             unsigned char ENETE1:1;
                                 ;    4535             unsigned char ENETE0:1;
                                 ;    4536         } BIT;
                                 ;    4537     } PFENET;
                                 ;    4538     union {
                                 ;    4539         unsigned char BYTE;
                                 ;    4540         struct {
                                 ;    4541             unsigned char :1;
                                 ;    4542             unsigned char SCI6S:1;
                                 ;    4543             unsigned char :2;
                                 ;    4544             unsigned char SCI3S:1;
                                 ;    4545             unsigned char SCI2S:1;
                                 ;    4546             unsigned char SCI1S:1;
                                 ;    4547             unsigned char :1;
                                 ;    4548         } BIT;
                                 ;    4549     } PFFSCI;
                                 ;    4550     union {
                                 ;    4551         unsigned char BYTE;
                                 ;    4552         struct {
                                 ;    4553             unsigned char SSL3E:1;
                                 ;    4554             unsigned char SSL2E:1;
                                 ;    4555             unsigned char SSL1E:1;
                                 ;    4556             unsigned char SSL0E:1;
                                 ;    4557             unsigned char MISOE:1;
                                 ;    4558             unsigned char MOSIE:1;
                                 ;    4559             unsigned char RSPCKE:1;
                                 ;    4560             unsigned char RSPIS:1;
                                 ;    4561         } BIT;
                                 ;    4562     } PFGSPI;
                                 ;    4563     union {
                                 ;    4564         unsigned char BYTE;
                                 ;    4565         struct {
                                 ;    4566             unsigned char SSL3E:1;
                                 ;    4567             unsigned char SSL2E:1;
                                 ;    4568             unsigned char SSL1E:1;
                                 ;    4569             unsigned char SSL0E:1;
                                 ;    4570             unsigned char MISOE:1;
                                 ;    4571             unsigned char MOSIE:1;
                                 ;    4572             unsigned char RSPCKE:1;
                                 ;    4573             unsigned char RSPIS:1;
                                 ;    4574         } BIT;
                                 ;    4575     } PFHSPI;
                                 ;    4576     unsigned char wk0[1];
                                 ;    4577     union {
                                 ;    4578         unsigned char BYTE;
                                 ;    4579         struct {
                                 ;    4580             unsigned char :7;
                                 ;    4581             unsigned char CAN0E:1;
                                 ;    4582         } BIT;
                                 ;    4583     } PFJCAN;
                                 ;    4584     union {
                                 ;    4585         unsigned char BYTE;
                                 ;    4586         struct {
                                 ;    4587             unsigned char :3;
                                 ;    4588             unsigned char USBE:1;
                                 ;    4589             unsigned char PDHZS:1;
                                 ;    4590             unsigned char PUPHZS:1;
                                 ;    4591             unsigned char USBMD:2;
                                 ;    4592         } BIT;
                                 ;    4593     } PFKUSB;
                                 ;    4594     union {
                                 ;    4595         unsigned char BYTE;
                                 ;    4596         struct {
                                 ;    4597             unsigned char :3;
                                 ;    4598             unsigned char USBE:1;
                                 ;    4599             unsigned char PDHZS:1;
                                 ;    4600             unsigned char PUPHZS:1;
                                 ;    4601             unsigned char USBMD:2;
                                 ;    4602         } BIT;
                                 ;    4603     } PFLUSB;
                                 ;    4604     union {
                                 ;    4605         unsigned char BYTE;
                                 ;    4606         struct {
                                 ;    4607             unsigned char POE7E:1;
                                 ;    4608             unsigned char POE6E:1;
                                 ;    4609             unsigned char POE5E:1;
                                 ;    4610             unsigned char POE4E:1;
                                 ;    4611             unsigned char POE3E:1;
                                 ;    4612             unsigned char POE2E:1;
                                 ;    4613             unsigned char POE1E:1;
                                 ;    4614             unsigned char POE0E:1;
                                 ;    4615         } BIT;
                                 ;    4616     } PFMPOE;
                                 ;    4617     union {
                                 ;    4618         unsigned char BYTE;
                                 ;    4619         struct {
                                 ;    4620             unsigned char :6;
                                 ;    4621             unsigned char POE9E:1;
                                 ;    4622             unsigned char POE8E:1;
                                 ;    4623         } BIT;
                                 ;    4624     } PFNPOE;
                                 ;    4625 };
                                 ;    4626 
                                 ;    4627 struct st_flash {
                                 ;    4628     unsigned char DMMY;
                                 ;    4629     union {
                                 ;    4630         unsigned char BYTE;
                                 ;    4631         struct {
                                 ;    4632             unsigned char :6;
                                 ;    4633             unsigned char FLWE:2;
                                 ;    4634         } BIT;
                                 ;    4635     } FWEPROR;
                                 ;    4636     unsigned char wk0[7799160];
                                 ;    4637     union {
                                 ;    4638         unsigned char BYTE;
                                 ;    4639         struct {
                                 ;    4640             unsigned char :3;
                                 ;    4641             unsigned char FRDMD:1;
                                 ;    4642             unsigned char :4;
                                 ;    4643         } BIT;
                                 ;    4644     } FMODR;
                                 ;    4645     unsigned char wk1[13];
                                 ;    4646     union {
                                 ;    4647         unsigned char BYTE;
                                 ;    4648         struct {
                                 ;    4649             unsigned char ROMAE:1;
                                 ;    4650             unsigned char :2;
                                 ;    4651             unsigned char CMDLK:1;
                                 ;    4652             unsigned char DFLAE:1;
                                 ;    4653             unsigned char :1;
                                 ;    4654             unsigned char DFLRPE:1;
                                 ;    4655             unsigned char DFLWPE:1;
                                 ;    4656         } BIT;
                                 ;    4657     } FASTAT;
                                 ;    4658     union {
                                 ;    4659         unsigned char BYTE;
                                 ;    4660         struct {
                                 ;    4661             unsigned char ROMAEIE:1;
                                 ;    4662             unsigned char :2;
                                 ;    4663             unsigned char CMDLKIE:1;
                                 ;    4664             unsigned char DFLAEIE:1;
                                 ;    4665             unsigned char :1;
                                 ;    4666             unsigned char DFLRPEIE:1;
                                 ;    4667             unsigned char DFLWPEIE:1;
                                 ;    4668         } BIT;
                                 ;    4669     } FAEINT;
                                 ;    4670     union {
                                 ;    4671         unsigned char BYTE;
                                 ;    4672         struct {
                                 ;    4673             unsigned char :7;
                                 ;    4674             unsigned char FRDYIE:1;
                                 ;    4675         } BIT;
                                 ;    4676     } FRDYIE;
                                 ;    4677     unsigned char wk2[45];
                                 ;    4678     union {
                                 ;    4679         unsigned short WORD;
                                 ;    4680         struct {
                                 ;    4681             unsigned short KEY:8;
                                 ;    4682             unsigned short DBRE07:1;
                                 ;    4683             unsigned short DBRE06:1;
                                 ;    4684             unsigned short DBRE05:1;
                                 ;    4685             unsigned short DBRE04:1;
                                 ;    4686             unsigned short DBRE03:1;
                                 ;    4687             unsigned short DBRE02:1;
                                 ;    4688             unsigned short DBRE01:1;
                                 ;    4689             unsigned short DBRE00:1;
                                 ;    4690         } BIT;
                                 ;    4691     } DFLRE0;
                                 ;    4692     union {
                                 ;    4693         unsigned short WORD;
                                 ;    4694         struct {
                                 ;    4695             unsigned short KEY:8;
                                 ;    4696             unsigned short DBRE15:1;
                                 ;    4697             unsigned short DBRE14:1;
                                 ;    4698             unsigned short DBRE13:1;
                                 ;    4699             unsigned short DBRE12:1;
                                 ;    4700             unsigned short DBRE11:1;
                                 ;    4701             unsigned short DBRE10:1;
                                 ;    4702             unsigned short DBRE09:1;
                                 ;    4703             unsigned short DBRE08:1;
                                 ;    4704         } BIT;
                                 ;    4705     } DFLRE1;
                                 ;    4706     unsigned char wk3[12];
                                 ;    4707     union {
                                 ;    4708         unsigned short WORD;
                                 ;    4709         struct {
                                 ;    4710             unsigned short KEY:8;
                                 ;    4711             unsigned short DBWE07:1;
                                 ;    4712             unsigned short DBWE06:1;
                                 ;    4713             unsigned short DBWE05:1;
                                 ;    4714             unsigned short DBWE04:1;
                                 ;    4715             unsigned short DBWE03:1;
                                 ;    4716             unsigned short DBWE02:1;
                                 ;    4717             unsigned short DBWE01:1;
                                 ;    4718             unsigned short DBWE00:1;
                                 ;    4719         } BIT;
                                 ;    4720     } DFLWE0;
                                 ;    4721     union {
                                 ;    4722         unsigned short WORD;
                                 ;    4723         struct {
                                 ;    4724             unsigned short KEY:8;
                                 ;    4725             unsigned short DBWE15:1;
                                 ;    4726             unsigned short DBWE14:1;
                                 ;    4727             unsigned short DBWE13:1;
                                 ;    4728             unsigned short DBWE12:1;
                                 ;    4729             unsigned short DBWE11:1;
                                 ;    4730             unsigned short DBWE10:1;
                                 ;    4731             unsigned short DBWE09:1;
                                 ;    4732             unsigned short DBWE08:1;
                                 ;    4733         } BIT;
                                 ;    4734     } DFLWE1;
                                 ;    4735     union {
                                 ;    4736         unsigned short WORD;
                                 ;    4737         struct {
                                 ;    4738             unsigned short KEY:8;
                                 ;    4739             unsigned short :7;
                                 ;    4740             unsigned short FCRME:1;
                                 ;    4741         } BIT;
                                 ;    4742     } FCURAME;
                                 ;    4743     unsigned char wk4[15194];
                                 ;    4744     union {
                                 ;    4745         unsigned char BYTE;
                                 ;    4746         struct {
                                 ;    4747             unsigned char FRDY:1;
                                 ;    4748             unsigned char ILGLERR:1;
                                 ;    4749             unsigned char ERSERR:1;
                                 ;    4750             unsigned char PRGERR:1;
                                 ;    4751             unsigned char SUSRDY:1;
                                 ;    4752             unsigned char :1;
                                 ;    4753             unsigned char ERSSPD:1;
                                 ;    4754             unsigned char PRGSPD:1;
                                 ;    4755         } BIT;
                                 ;    4756     } FSTATR0;
                                 ;    4757     union {
                                 ;    4758         unsigned char BYTE;
                                 ;    4759         struct {
                                 ;    4760             unsigned char FCUERR:1;
                                 ;    4761             unsigned char :2;
                                 ;    4762             unsigned char FLOCKST:1;
                                 ;    4763             unsigned char :4;
                                 ;    4764         } BIT;
                                 ;    4765     } FSTATR1;
                                 ;    4766     union {
                                 ;    4767         unsigned short WORD;
                                 ;    4768         struct {
                                 ;    4769             unsigned short FEKEY:8;
                                 ;    4770             unsigned short FENTRYD:1;
                                 ;    4771             unsigned short :6;
                                 ;    4772             unsigned short FENTRY0:1;
                                 ;    4773         } BIT;
                                 ;    4774     } FENTRYR;
                                 ;    4775     union {
                                 ;    4776         unsigned short WORD;
                                 ;    4777         struct {
                                 ;    4778             unsigned short FPKEY:8;
                                 ;    4779             unsigned short :7;
                                 ;    4780             unsigned short FPROTCN:1;
                                 ;    4781         } BIT;
                                 ;    4782     } FPROTR;
                                 ;    4783     union {
                                 ;    4784         unsigned short WORD;
                                 ;    4785         struct {
                                 ;    4786             unsigned short FPKEY:8;
                                 ;    4787             unsigned short :7;
                                 ;    4788             unsigned short FRESET:1;
                                 ;    4789         } BIT;
                                 ;    4790     } FRESETR;
                                 ;    4791     unsigned char wk5[2];
                                 ;    4792     union {
                                 ;    4793         unsigned short WORD;
                                 ;    4794         struct {
                                 ;    4795             unsigned short CMDR:8;
                                 ;    4796             unsigned short PCMDR:8;
                                 ;    4797         } BIT;
                                 ;    4798     } FCMDR;
                                 ;    4799     unsigned char wk6[12];
                                 ;    4800     union {
                                 ;    4801         unsigned short WORD;
                                 ;    4802         struct {
                                 ;    4803             unsigned short :15;
                                 ;    4804             unsigned short ESUSPMD:1;
                                 ;    4805         } BIT;
                                 ;    4806     } FCPSR;
                                 ;    4807     union {
                                 ;    4808         unsigned short WORD;
                                 ;    4809         struct {
                                 ;    4810             unsigned short :5;
                                 ;    4811             unsigned short BCADR:8;
                                 ;    4812             unsigned short :2;
                                 ;    4813             unsigned short BCSIZE:1;
                                 ;    4814         } BIT;
                                 ;    4815     } DFLBCCNT;
                                 ;    4816     union {
                                 ;    4817         unsigned short WORD;
                                 ;    4818         struct {
                                 ;    4819             unsigned short :8;
                                 ;    4820             unsigned short PEERRST:8;
                                 ;    4821         } BIT;
                                 ;    4822     } FPESTAT;
                                 ;    4823     union {
                                 ;    4824         unsigned short WORD;
                                 ;    4825         struct {
                                 ;    4826             unsigned short :15;
                                 ;    4827             unsigned short BCST:1;
                                 ;    4828         } BIT;
                                 ;    4829     } DFLBCSTAT;
                                 ;    4830     unsigned char wk7[24];
                                 ;    4831     union {
                                 ;    4832         unsigned short WORD;
                                 ;    4833         struct {
                                 ;    4834             unsigned short :8;
                                 ;    4835             unsigned short PCKA:8;
                                 ;    4836         } BIT;
                                 ;    4837     } PCKAR;
                                 ;    4838 };
                                 ;    4839 
                                 ;    4840 struct st_rtc {
                                 ;    4841     union {
                                 ;    4842         unsigned char BYTE;
                                 ;    4843         struct {
                                 ;    4844             unsigned char F64HZ:1;
                                 ;    4845             unsigned char F32HZ:1;
                                 ;    4846             unsigned char F16HZ:1;
                                 ;    4847             unsigned char F8HZ:1;
                                 ;    4848             unsigned char F4HZ:1;
                                 ;    4849             unsigned char F2HZ:1;
                                 ;    4850             unsigned char F1HZ:1;
                                 ;    4851             unsigned char :1;
                                 ;    4852         } BIT;
                                 ;    4853     } R64CNT;
                                 ;    4854     unsigned char wk0[1];
                                 ;    4855     union {
                                 ;    4856         unsigned char BYTE;
                                 ;    4857         struct {
                                 ;    4858             unsigned char :1;
                                 ;    4859             unsigned char SEC10:3;
                                 ;    4860             unsigned char SEC1:4;
                                 ;    4861         } BIT;
                                 ;    4862     } RSECCNT;
                                 ;    4863     unsigned char wk1[1];
                                 ;    4864     union {
                                 ;    4865         unsigned char BYTE;
                                 ;    4866         struct {
                                 ;    4867             unsigned char :1;
                                 ;    4868             unsigned char MIN10:3;
                                 ;    4869             unsigned char MIN1:4;
                                 ;    4870         } BIT;
                                 ;    4871     } RMINCNT;
                                 ;    4872     unsigned char wk2[1];
                                 ;    4873     union {
                                 ;    4874         unsigned char BYTE;
                                 ;    4875         struct {
                                 ;    4876             unsigned char :2;
                                 ;    4877             unsigned char HOUR10:2;
                                 ;    4878             unsigned char HOUR1:4;
                                 ;    4879         } BIT;
                                 ;    4880     } RHRCNT;
                                 ;    4881     unsigned char wk3[1];
                                 ;    4882     union {
                                 ;    4883         unsigned char BYTE;
                                 ;    4884         struct {
                                 ;    4885             unsigned char :5;
                                 ;    4886             unsigned char DAY:3;
                                 ;    4887         } BIT;
                                 ;    4888     } RWKCNT;
                                 ;    4889     unsigned char wk4[1];
                                 ;    4890     union {
                                 ;    4891         unsigned char BYTE;
                                 ;    4892         struct {
                                 ;    4893             unsigned char :2;
                                 ;    4894             unsigned char DAY10:2;
                                 ;    4895             unsigned char DAY1:4;
                                 ;    4896         } BIT;
                                 ;    4897     } RDAYCNT;
                                 ;    4898     unsigned char wk5[1];
                                 ;    4899     union {
                                 ;    4900         unsigned char BYTE;
                                 ;    4901         struct {
                                 ;    4902             unsigned char :3;
                                 ;    4903             unsigned char MON10:1;
                                 ;    4904             unsigned char MON1:4;
                                 ;    4905         } BIT;
                                 ;    4906     } RMONCNT;
                                 ;    4907     unsigned char wk6[1];
                                 ;    4908     union {
                                 ;    4909         unsigned short WORD;
                                 ;    4910         struct {
                                 ;    4911             unsigned short YEAR1000:4;
                                 ;    4912             unsigned short YEAR100:4;
                                 ;    4913             unsigned short YEAR10:4;
                                 ;    4914             unsigned short YEAR1:4;
                                 ;    4915         } BIT;
                                 ;    4916     } RYRCNT;
                                 ;    4917     union {
                                 ;    4918         unsigned char BYTE;
                                 ;    4919         struct {
                                 ;    4920             unsigned char ENB:1;
                                 ;    4921             unsigned char SEC10:3;
                                 ;    4922             unsigned char SEC1:4;
                                 ;    4923         } BIT;
                                 ;    4924     } RSECAR;
                                 ;    4925     unsigned char wk7[1];
                                 ;    4926     union {
                                 ;    4927         unsigned char BYTE;
                                 ;    4928         struct {
                                 ;    4929             unsigned char ENB:1;
                                 ;    4930             unsigned char MIN10:3;
                                 ;    4931             unsigned char MIN1:4;
                                 ;    4932         } BIT;
                                 ;    4933     } RMINAR;
                                 ;    4934     unsigned char wk8[1];
                                 ;    4935     union {
                                 ;    4936         unsigned char BYTE;
                                 ;    4937         struct {
                                 ;    4938             unsigned char ENB:1;
                                 ;    4939             unsigned char :1;
                                 ;    4940             unsigned char HOUR10:2;
                                 ;    4941             unsigned char HOUR1:4;
                                 ;    4942         } BIT;
                                 ;    4943     } RHRAR;
                                 ;    4944     unsigned char wk9[1];
                                 ;    4945     union {
                                 ;    4946         unsigned char BYTE;
                                 ;    4947         struct {
                                 ;    4948             unsigned char ENB:1;
                                 ;    4949             unsigned char :4;
                                 ;    4950             unsigned char DAY:3;
                                 ;    4951         } BIT;
                                 ;    4952     } RWKAR;
                                 ;    4953     unsigned char wk10[1];
                                 ;    4954     union {
                                 ;    4955         unsigned char BYTE;
                                 ;    4956         struct {
                                 ;    4957             unsigned char ENB:1;
                                 ;    4958             unsigned char :1;
                                 ;    4959             unsigned char DAY10:2;
                                 ;    4960             unsigned char DAY1:4;
                                 ;    4961         } BIT;
                                 ;    4962     } RDAYAR;
                                 ;    4963     unsigned char wk11[1];
                                 ;    4964     union {
                                 ;    4965         unsigned char BYTE;
                                 ;    4966         struct {
                                 ;    4967             unsigned char ENB:1;
                                 ;    4968             unsigned char :2;
                                 ;    4969             unsigned char MON10:1;
                                 ;    4970             unsigned char MON1:4;
                                 ;    4971         } BIT;
                                 ;    4972     } RMONAR;
                                 ;    4973     unsigned char wk12[1];
                                 ;    4974     union {
                                 ;    4975         unsigned short WORD;
                                 ;    4976         struct {
                                 ;    4977             unsigned short YEAR1000:4;
                                 ;    4978             unsigned short YEAR100:4;
                                 ;    4979             unsigned short YEAR10:4;
                                 ;    4980             unsigned short YEAR1:4;
                                 ;    4981         } BIT;
                                 ;    4982     } RYRAR;
                                 ;    4983     union {
                                 ;    4984         unsigned char BYTE;
                                 ;    4985         struct {
                                 ;    4986             unsigned char ENB:1;
                                 ;    4987             unsigned char :7;
                                 ;    4988         } BIT;
                                 ;    4989     } RYRAREN;
                                 ;    4990     unsigned char wk13[3];
                                 ;    4991     union {
                                 ;    4992         unsigned char BYTE;
                                 ;    4993         struct {
                                 ;    4994             unsigned char :1;
                                 ;    4995             unsigned char PES:3;
                                 ;    4996             unsigned char :1;
                                 ;    4997             unsigned char PIE:1;
                                 ;    4998             unsigned char CIE:1;
                                 ;    4999             unsigned char AIE:1;
                                 ;    5000         } BIT;
                                 ;    5001     } RCR1;
                                 ;    5002     unsigned char wk14[1];
                                 ;    5003     union {
                                 ;    5004         unsigned char BYTE;
                                 ;    5005         struct {
                                 ;    5006             unsigned char :4;
                                 ;    5007             unsigned char RTCOE:1;
                                 ;    5008             unsigned char ADJ:1;
                                 ;    5009             unsigned char RESET:1;
                                 ;    5010             unsigned char START:1;
                                 ;    5011         } BIT;
                                 ;    5012     } RCR2;
                                 ;    5013 };
                                 ;    5014 
                                 ;    5015 struct st_can {
                                 ;    5016     struct {
                                 ;    5017         union {
                                 ;    5018             unsigned long LONG;
                                 ;    5019             union {
                                 ;    5020                 unsigned short H;
                                 ;    5021                 unsigned short L;
                                 ;    5022             } WORD;
                                 ;    5023             struct {
                                 ;    5024                 unsigned char HH;
                                 ;    5025                 unsigned char HL;
                                 ;    5026                 unsigned char LH;
                                 ;    5027                 unsigned char LL;
                                 ;    5028             } BYTE;
                                 ;    5029             struct {
                                 ;    5030                 unsigned long IDE:1;
                                 ;    5031                 unsigned long RTR:1;
                                 ;    5032                 unsigned long :1;
                                 ;    5033                 unsigned long SID:11;
                                 ;    5034                 unsigned long EID:18;
                                 ;    5035             } BIT;
                                 ;    5036         } ID;
                                 ;    5037         union {
                                 ;    5038             unsigned short WORD;
                                 ;    5039             struct {
                                 ;    5040                 unsigned char :8;
                                 ;    5041                 unsigned char :4;
                                 ;    5042                 unsigned char DLC:4;
                                 ;    5043             } BIT;
                                 ;    5044         } DLC;
                                 ;    5045         unsigned char DATA[8];
                                 ;    5046         union{ 
                                 ;    5047             unsigned short WORD;
                                 ;    5048             struct {
                                 ;    5049                 unsigned char TSH;
                                 ;    5050                 unsigned char TSL;
                                 ;    5051             } BYTE;
                                 ;    5052         } TS;
                                 ;    5053     } MB[32];
                                 ;    5054     union {
                                 ;    5055         unsigned long LONG;
                                 ;    5056         struct {
                                 ;    5057             unsigned short H;
                                 ;    5058             unsigned short L;
                                 ;    5059         } WORD;
                                 ;    5060         struct {
                                 ;    5061             unsigned char HH;
                                 ;    5062             unsigned char HL;
                                 ;    5063             unsigned char LH;
                                 ;    5064             unsigned char LL;
                                 ;    5065         } BYTE;
                                 ;    5066         struct {
                                 ;    5067             unsigned long :3;
                                 ;    5068             unsigned long SID:11;
                                 ;    5069             unsigned long EID:18;
                                 ;    5070         } BIT;
                                 ;    5071     } MKR[8];
                                 ;    5072     union {
                                 ;    5073         unsigned long LONG;
                                 ;    5074         struct {
                                 ;    5075             unsigned short H;
                                 ;    5076             unsigned short L;
                                 ;    5077         } WORD;
                                 ;    5078         struct {
                                 ;    5079             unsigned char HH;
                                 ;    5080             unsigned char HL;
                                 ;    5081             unsigned char LH;
                                 ;    5082             unsigned char LL;
                                 ;    5083         } BYTE;
                                 ;    5084         struct {
                                 ;    5085             unsigned long IDE:1;
                                 ;    5086             unsigned long RTR:1;
                                 ;    5087             unsigned long :1;
                                 ;    5088             unsigned long SID:11;
                                 ;    5089             unsigned long EID:18;
                                 ;    5090         } BIT;
                                 ;    5091     } FIDCR0;
                                 ;    5092     union {
                                 ;    5093         unsigned long LONG;
                                 ;    5094         struct {
                                 ;    5095             unsigned short H;
                                 ;    5096             unsigned short L;
                                 ;    5097         } WORD;
                                 ;    5098         struct {
                                 ;    5099             unsigned char HH;
                                 ;    5100             unsigned char HL;
                                 ;    5101             unsigned char LH;
                                 ;    5102             unsigned char LL;
                                 ;    5103         } BYTE;
                                 ;    5104         struct {
                                 ;    5105             unsigned long IDE:1;
                                 ;    5106             unsigned long RTR:1;
                                 ;    5107             unsigned long :1;
                                 ;    5108             unsigned long SID:11;
                                 ;    5109             unsigned long EID:18;
                                 ;    5110         } BIT;
                                 ;    5111     } FIDCR1;
                                 ;    5112     unsigned long MKIVLR;
                                 ;    5113     unsigned long MIER;
                                 ;    5114     unsigned char wk32[1008];
                                 ;    5115     union {
                                 ;    5116         unsigned char BYTE;
                                 ;    5117         union {
                                 ;    5118             struct {
                                 ;    5119                 unsigned char TRMREQ:1;
                                 ;    5120                 unsigned char RECREQ:1;
                                 ;    5121                 unsigned char :1;
                                 ;    5122                 unsigned char ONESHOT:1;
                                 ;    5123                 unsigned char :1;
                                 ;    5124                 unsigned char TRMABT:1;
                                 ;    5125                 unsigned char TRMACTIVE:1;
                                 ;    5126                 unsigned char SENTDATA:1;
                                 ;    5127             } TX;
                                 ;    5128             struct {
                                 ;    5129                 unsigned char TRMREQ:1;
                                 ;    5130                 unsigned char RECREQ:1;
                                 ;    5131                 unsigned char :1;
                                 ;    5132                 unsigned char ONESHOT:1;
                                 ;    5133                 unsigned char :1;
                                 ;    5134                 unsigned char MSGLOST:1;
                                 ;    5135                 unsigned char INVALDATA:1;
                                 ;    5136                 unsigned char NEWDATA:1;
                                 ;    5137             } RX;
                                 ;    5138         } BIT;
                                 ;    5139     } MCTL[32];
                                 ;    5140     union {
                                 ;    5141         unsigned short WORD;
                                 ;    5142         struct {
                                 ;    5143             unsigned char H;
                                 ;    5144             unsigned char L;
                                 ;    5145         } BYTE;
                                 ;    5146         struct {
                                 ;    5147             unsigned char :2;
                                 ;    5148             unsigned char RBOC:1;
                                 ;    5149             unsigned char BOM:2;
                                 ;    5150             unsigned char SLPM:1;
                                 ;    5151             unsigned char CANM:2;
                                 ;    5152             unsigned char TSPS:2;
                                 ;    5153             unsigned char TSRC:1;
                                 ;    5154             unsigned char TPM:1;
                                 ;    5155             unsigned char MLM:1;
                                 ;    5156             unsigned char IDFM:2;
                                 ;    5157             unsigned char MBM:1;
                                 ;    5158         } BIT;
                                 ;    5159     } CTLR;
                                 ;    5160     union {
                                 ;    5161         unsigned short WORD;
                                 ;    5162         struct {
                                 ;    5163             unsigned char H;
                                 ;    5164             unsigned char L;
                                 ;    5165         } BYTE;
                                 ;    5166         struct {
                                 ;    5167             unsigned char :1;
                                 ;    5168             unsigned char RECST:1;
                                 ;    5169             unsigned char TRMST:1;
                                 ;    5170             unsigned char BOST:1;
                                 ;    5171             unsigned char EPST:1;
                                 ;    5172             unsigned char SLPST:1;
                                 ;    5173             unsigned char HLTST:1;
                                 ;    5174             unsigned char RSTST:1;
                                 ;    5175             unsigned char EST:1;
                                 ;    5176             unsigned char TABST:1;
                                 ;    5177             unsigned char FMLST:1;
                                 ;    5178             unsigned char NMLST:1;
                                 ;    5179             unsigned char TFST:1;
                                 ;    5180             unsigned char RFST:1;
                                 ;    5181             unsigned char SDST:1;
                                 ;    5182             unsigned char NDST:1;
                                 ;    5183         } BIT;
                                 ;    5184     } STR;
                                 ;    5185     union {
                                 ;    5186         unsigned long LONG;
                                 ;    5187         struct {
                                 ;    5188             unsigned short H;
                                 ;    5189             unsigned short L;
                                 ;    5190         } WORD;
                                 ;    5191         struct {
                                 ;    5192             unsigned char HH;
                                 ;    5193             unsigned char HL;
                                 ;    5194             unsigned char LH;
                                 ;    5195             unsigned char LL;
                                 ;    5196         } BYTE;
                                 ;    5197         struct {
                                 ;    5198             unsigned long TSEG1:4;
                                 ;    5199             unsigned long :2;
                                 ;    5200             unsigned long BRP:10;
                                 ;    5201             unsigned long :2;
                                 ;    5202             unsigned long SJW:2;
                                 ;    5203             unsigned long :1;
                                 ;    5204             unsigned long TSEG2:3;
                                 ;    5205             unsigned long :8;
                                 ;    5206         } BIT;
                                 ;    5207     } BCR;
                                 ;    5208     union {
                                 ;    5209         unsigned char BYTE;
                                 ;    5210         struct {
                                 ;    5211             unsigned char RFEST:1;
                                 ;    5212             unsigned char RFWST:1;
                                 ;    5213             unsigned char RFFST:1;
                                 ;    5214             unsigned char RFMLF:1;
                                 ;    5215             unsigned char RFUST:3;
                                 ;    5216             unsigned char RFE:1;
                                 ;    5217         } BIT;
                                 ;    5218     } RFCR;
                                 ;    5219     unsigned char RFPCR;
                                 ;    5220     union {
                                 ;    5221         unsigned char BYTE;
                                 ;    5222         struct {
                                 ;    5223             unsigned char TFEST:1;
                                 ;    5224             unsigned char TFFST:1;
                                 ;    5225             unsigned char :2;
                                 ;    5226             unsigned char TFUST:3;
                                 ;    5227             unsigned char TFE:1;
                                 ;    5228         } BIT;
                                 ;    5229     } TFCR;
                                 ;    5230     unsigned char TFPCR;
                                 ;    5231     union {
                                 ;    5232         unsigned char BYTE;
                                 ;    5233         struct {
                                 ;    5234             unsigned char BLIE:1;
                                 ;    5235             unsigned char OLIE:1;
                                 ;    5236             unsigned char ORIE:1;
                                 ;    5237             unsigned char BORIE:1;
                                 ;    5238             unsigned char BOEIE:1;
                                 ;    5239             unsigned char EPIE:1;
                                 ;    5240             unsigned char EWIE:1;
                                 ;    5241             unsigned char BEIE:1;
                                 ;    5242         } BIT;
                                 ;    5243     } EIER;
                                 ;    5244     union {
                                 ;    5245         unsigned char BYTE;
                                 ;    5246         struct {
                                 ;    5247             unsigned char BLIF:1;
                                 ;    5248             unsigned char OLIF:1;
                                 ;    5249             unsigned char ORIF:1;
                                 ;    5250             unsigned char BORIF:1;
                                 ;    5251             unsigned char BOEIF:1;
                                 ;    5252             unsigned char EPIF:1;
                                 ;    5253             unsigned char EWIF:1;
                                 ;    5254             unsigned char BEIF:1;
                                 ;    5255         } BIT;
                                 ;    5256     } EIFR;
                                 ;    5257     unsigned char RECR;
                                 ;    5258     unsigned char TECR;
                                 ;    5259     union {
                                 ;    5260         unsigned char BYTE;
                                 ;    5261         struct {
                                 ;    5262             unsigned char EDPM:1;
                                 ;    5263             unsigned char ADEF:1;
                                 ;    5264             unsigned char BE0F:1;
                                 ;    5265             unsigned char BE1F:1;
                                 ;    5266             unsigned char CEF:1;
                                 ;    5267             unsigned char AEF:1;
                                 ;    5268             unsigned char FEF:1;
                                 ;    5269             unsigned char SEF:1;
                                 ;    5270         } BIT;
                                 ;    5271     } ECSR;
                                 ;    5272     unsigned char CSSR;
                                 ;    5273     union {
                                 ;    5274         unsigned char BYTE;
                                 ;    5275         struct {
                                 ;    5276             unsigned char SEST:1;
                                 ;    5277             unsigned char :2;
                                 ;    5278             unsigned char MBNST:5;
                                 ;    5279         } BIT;
                                 ;    5280     } MSSR;
                                 ;    5281     union {
                                 ;    5282         unsigned char BYTE;
                                 ;    5283         struct {
                                 ;    5284             unsigned char :6;
                                 ;    5285             unsigned char MBSM:2;
                                 ;    5286         } BIT;
                                 ;    5287     } MSMR;
                                 ;    5288     unsigned short TSR;
                                 ;    5289     unsigned short AFSR;
                                 ;    5290     union {
                                 ;    5291         unsigned char BYTE;
                                 ;    5292         struct {
                                 ;    5293             unsigned char :5;
                                 ;    5294             unsigned char TSTM:2;
                                 ;    5295             unsigned char TSTE:1;
                                 ;    5296         } BIT;
                                 ;    5297     } TCR;
                                 ;    5298 };
                                 ;    5299 
                                 ;    5300 struct st_usb0 {
                                 ;    5301     union {
                                 ;    5302         unsigned short WORD;
                                 ;    5303         struct {
                                 ;    5304             unsigned short :5;
                                 ;    5305             unsigned short SCKE:1;
                                 ;    5306             unsigned short :3;
                                 ;    5307             unsigned short DCFM:1;
                                 ;    5308             unsigned short DRPD:1;
                                 ;    5309             unsigned short DPRPU:1;
                                 ;    5310             unsigned short :3;
                                 ;    5311             unsigned short USBE:1;
                                 ;    5312         } BIT;
                                 ;    5313     } SYSCFG;
                                 ;    5314     unsigned char wk0[2];
                                 ;    5315     union {
                                 ;    5316         unsigned short WORD;
                                 ;    5317         struct {
                                 ;    5318             unsigned short OVCMON:2;
                                 ;    5319             unsigned short :7;
                                 ;    5320             unsigned short HTACT:1;
                                 ;    5321             unsigned short :3;
                                 ;    5322             unsigned short IDMON:1;
                                 ;    5323             unsigned short LNST:2;
                                 ;    5324         } BIT;
                                 ;    5325     } SYSSTS0;
                                 ;    5326     unsigned char wk1[2];
                                 ;    5327     union {
                                 ;    5328         unsigned short WORD;
                                 ;    5329         struct {
                                 ;    5330             unsigned short :4;
                                 ;    5331             unsigned short HNPBTOA:1;
                                 ;    5332             unsigned short EXICEN:1;
                                 ;    5333             unsigned short VBUSEN:1;
                                 ;    5334             unsigned short WKUP:1;
                                 ;    5335             unsigned short RWUPE:1;
                                 ;    5336             unsigned short USBRST:1;
                                 ;    5337             unsigned short RESUME:1;
                                 ;    5338             unsigned short UACT:1;
                                 ;    5339             unsigned short :1;
                                 ;    5340             unsigned short RHST:3;
                                 ;    5341         } BIT;
                                 ;    5342     } DVSTCTR0;
                                 ;    5343     unsigned char wk2[10];
                                 ;    5344     union {
                                 ;    5345         unsigned short WORD;
                                 ;    5346         struct {
                                 ;    5347             unsigned char L;
                                 ;    5348             unsigned char H;
                                 ;    5349         } BYTE;
                                 ;    5350     } CFIFO;
                                 ;    5351     unsigned char wk3[2];
                                 ;    5352     union {
                                 ;    5353         unsigned short WORD;
                                 ;    5354         struct {
                                 ;    5355             unsigned char L;
                                 ;    5356             unsigned char H;
                                 ;    5357         } BYTE;
                                 ;    5358     } D0FIFO;
                                 ;    5359     unsigned char wk4[2];
                                 ;    5360     union {
                                 ;    5361         unsigned short WORD;
                                 ;    5362         struct {
                                 ;    5363             unsigned char L;
                                 ;    5364             unsigned char H;
                                 ;    5365         } BYTE;
                                 ;    5366     } D1FIFO;
                                 ;    5367     unsigned char wk5[2];
                                 ;    5368     union {
                                 ;    5369         unsigned short WORD;
                                 ;    5370         struct {
                                 ;    5371             unsigned short RCNT:1;
                                 ;    5372             unsigned short REW:1;
                                 ;    5373             unsigned short :3;
                                 ;    5374             unsigned short MBW:1;
                                 ;    5375             unsigned short :1;
                                 ;    5376             unsigned short BIGEND:1;
                                 ;    5377             unsigned short :2;
                                 ;    5378             unsigned short ISEL:1;
                                 ;    5379             unsigned short :1;
                                 ;    5380             unsigned short CURPIPE:4;
                                 ;    5381         } BIT;
                                 ;    5382     } CFIFOSEL;
                                 ;    5383     union {
                                 ;    5384         unsigned short WORD;
                                 ;    5385         struct {
                                 ;    5386             unsigned short BVAL:1;
                                 ;    5387             unsigned short BCLR:1;
                                 ;    5388             unsigned short FRDY:1;
                                 ;    5389             unsigned short :4;
                                 ;    5390             unsigned short TLN:1;
                                 ;    5391             unsigned short DTLN:8;
                                 ;    5392         } BIT;
                                 ;    5393     } CFIFOCTR;
                                 ;    5394     unsigned char wk6[4];
                                 ;    5395     union {
                                 ;    5396         unsigned short WORD;
                                 ;    5397         struct {
                                 ;    5398             unsigned short RCNT:1;
                                 ;    5399             unsigned short REW:1;
                                 ;    5400             unsigned short DCLRM:1;
                                 ;    5401             unsigned short DREQE:1;
                                 ;    5402             unsigned short :1;
                                 ;    5403             unsigned short MBW:1;
                                 ;    5404             unsigned short :1;
                                 ;    5405             unsigned short BIGEND:1;
                                 ;    5406             unsigned short :4;
                                 ;    5407             unsigned short CURPIPE:4;
                                 ;    5408         } BIT;
                                 ;    5409     } D0FIFOSEL;
                                 ;    5410     union {
                                 ;    5411         unsigned short WORD;
                                 ;    5412         struct {
                                 ;    5413             unsigned short BVAL:1;
                                 ;    5414             unsigned short BCLR:1;
                                 ;    5415             unsigned short FRDY:1;
                                 ;    5416             unsigned short :4;
                                 ;    5417             unsigned short TLN:1;
                                 ;    5418             unsigned short DTLN:8;
                                 ;    5419         } BIT;
                                 ;    5420     } D0FIFOCTR;
                                 ;    5421     union {
                                 ;    5422         unsigned short WORD;
                                 ;    5423         struct {
                                 ;    5424             unsigned short RCNT:1;
                                 ;    5425             unsigned short REW:1;
                                 ;    5426             unsigned short DCLRM:1;
                                 ;    5427             unsigned short DREQE:1;
                                 ;    5428             unsigned short :1;
                                 ;    5429             unsigned short MBW:1;
                                 ;    5430             unsigned short :1;
                                 ;    5431             unsigned short BIGEND:1;
                                 ;    5432             unsigned short :4;
                                 ;    5433             unsigned short CURPIPE:4;
                                 ;    5434         } BIT;
                                 ;    5435     } D1FIFOSEL;
                                 ;    5436     union {
                                 ;    5437         unsigned short WORD;
                                 ;    5438         struct {
                                 ;    5439             unsigned short BVAL:1;
                                 ;    5440             unsigned short BCLR:1;
                                 ;    5441             unsigned short FRDY:1;
                                 ;    5442             unsigned short :4;
                                 ;    5443             unsigned short TLN:1;
                                 ;    5444             unsigned short DTLN:8;
                                 ;    5445         } BIT;
                                 ;    5446     } D1FIFOCTR;
                                 ;    5447     union {
                                 ;    5448         unsigned short WORD;
                                 ;    5449         struct {
                                 ;    5450             unsigned short VBSE:1;
                                 ;    5451             unsigned short RSME:1;
                                 ;    5452             unsigned short SOFE:1;
                                 ;    5453             unsigned short DVSE:1;
                                 ;    5454             unsigned short CTRE:1;
                                 ;    5455             unsigned short BEMPE:1;
                                 ;    5456             unsigned short NRDYE:1;
                                 ;    5457             unsigned short BRDYE:1;
                                 ;    5458             unsigned short :8;
                                 ;    5459         } BIT;
                                 ;    5460     } INTENB0;
                                 ;    5461     union {
                                 ;    5462         unsigned short WORD;
                                 ;    5463         struct {
                                 ;    5464             unsigned short OVRCRE:1;
                                 ;    5465             unsigned short BCHGE:1;
                                 ;    5466             unsigned short :1;
                                 ;    5467             unsigned short DTCHE:1;
                                 ;    5468             unsigned short ATTCHE:1;
                                 ;    5469             unsigned short :4;
                                 ;    5470             unsigned short EOFERRE:1;
                                 ;    5471             unsigned short SIGNE:1;
                                 ;    5472             unsigned short SACKE:1;
                                 ;    5473             unsigned short :4;
                                 ;    5474         } BIT;
                                 ;    5475     } INTENB1;
                                 ;    5476     unsigned char wk7[2];
                                 ;    5477     union {
                                 ;    5478         unsigned short WORD;
                                 ;    5479         struct {
                                 ;    5480             unsigned short :6;
                                 ;    5481             unsigned short PIPE9BRDYE:1;
                                 ;    5482             unsigned short PIPE8BRDYE:1;
                                 ;    5483             unsigned short PIPE7BRDYE:1;
                                 ;    5484             unsigned short PIPE6BRDYE:1;
                                 ;    5485             unsigned short PIPE5BRDYE:1;
                                 ;    5486             unsigned short PIPE4BRDYE:1;
                                 ;    5487             unsigned short PIPE3BRDYE:1;
                                 ;    5488             unsigned short PIPE2BRDYE:1;
                                 ;    5489             unsigned short PIPE1BRDYE:1;
                                 ;    5490             unsigned short PIPE0BRDYE:1;
                                 ;    5491         } BIT;
                                 ;    5492     } BRDYENB;
                                 ;    5493     union {
                                 ;    5494         unsigned short WORD;
                                 ;    5495         struct {
                                 ;    5496             unsigned short :6;
                                 ;    5497             unsigned short PIPE9BRDYE:1;
                                 ;    5498             unsigned short PIPE8BRDYE:1;
                                 ;    5499             unsigned short PIPE7BRDYE:1;
                                 ;    5500             unsigned short PIPE6BRDYE:1;
                                 ;    5501             unsigned short PIPE5BRDYE:1;
                                 ;    5502             unsigned short PIPE4BRDYE:1;
                                 ;    5503             unsigned short PIPE3BRDYE:1;
                                 ;    5504             unsigned short PIPE2BRDYE:1;
                                 ;    5505             unsigned short PIPE1BRDYE:1;
                                 ;    5506             unsigned short PIPE0BRDYE:1;
                                 ;    5507         } BIT;
                                 ;    5508     } NRDYENB;
                                 ;    5509     union {
                                 ;    5510         unsigned short WORD;
                                 ;    5511         struct {
                                 ;    5512             unsigned short :6;
                                 ;    5513             unsigned short PIPE9BEMPE:1;
                                 ;    5514             unsigned short PIPE8BEMPE:1;
                                 ;    5515             unsigned short PIPE7BEMPE:1;
                                 ;    5516             unsigned short PIPE6BEMPE:1;
                                 ;    5517             unsigned short PIPE5BEMPE:1;
                                 ;    5518             unsigned short PIPE4BEMPE:1;
                                 ;    5519             unsigned short PIPE3BEMPE:1;
                                 ;    5520             unsigned short PIPE2BEMPE:1;
                                 ;    5521             unsigned short PIPE1BEMPE:1;
                                 ;    5522             unsigned short PIPE0BEMPE:1;
                                 ;    5523         } BIT;
                                 ;    5524     } BEMPENB;
                                 ;    5525     union {
                                 ;    5526         unsigned short WORD;
                                 ;    5527         struct {
                                 ;    5528             unsigned short :7;
                                 ;    5529             unsigned short TRNENSEL:1;
                                 ;    5530             unsigned short :1;
                                 ;    5531             unsigned short BRDYM:1;
                                 ;    5532             unsigned short :1;
                                 ;    5533             unsigned short EDGESTS:1;
                                 ;    5534             unsigned short :4;
                                 ;    5535         } BIT;
                                 ;    5536     } SOFCFG;
                                 ;    5537     unsigned char wk8[2];
                                 ;    5538     union {
                                 ;    5539         unsigned short WORD;
                                 ;    5540         struct {
                                 ;    5541             unsigned short VBINT:1;
                                 ;    5542             unsigned short RESM:1;
                                 ;    5543             unsigned short SOFR:1;
                                 ;    5544             unsigned short DVST:1;
                                 ;    5545             unsigned short CTRT:1;
                                 ;    5546             unsigned short BEMP:1;
                                 ;    5547             unsigned short NRDY:1;
                                 ;    5548             unsigned short BRDY:1;
                                 ;    5549             unsigned short VBSTS:1;
                                 ;    5550             unsigned short DVSQ:3;
                                 ;    5551             unsigned short VALID:1;
                                 ;    5552             unsigned short CTSQ:3;
                                 ;    5553         } BIT;
                                 ;    5554     } INTSTS0;
                                 ;    5555     union {
                                 ;    5556         unsigned short WORD;
                                 ;    5557         struct {
                                 ;    5558             unsigned short OVRCR:1;
                                 ;    5559             unsigned short BCHG:1;
                                 ;    5560             unsigned short :1;
                                 ;    5561             unsigned short DTCH:1;
                                 ;    5562             unsigned short ATTCH:1;
                                 ;    5563             unsigned short :4;
                                 ;    5564             unsigned short EOFERR:1;
                                 ;    5565             unsigned short SIGN:1;
                                 ;    5566             unsigned short SACK:1;
                                 ;    5567             unsigned short :4;
                                 ;    5568         } BIT;
                                 ;    5569     } INTSTS1;
                                 ;    5570     unsigned char wk9[2];
                                 ;    5571     union {
                                 ;    5572         unsigned short WORD;
                                 ;    5573         struct {
                                 ;    5574             unsigned short :6;
                                 ;    5575             unsigned short PIPE9BRDY:1;
                                 ;    5576             unsigned short PIPE8BRDY:1;
                                 ;    5577             unsigned short PIPE7BRDY:1;
                                 ;    5578             unsigned short PIPE6BRDY:1;
                                 ;    5579             unsigned short PIPE5BRDY:1;
                                 ;    5580             unsigned short PIPE4BRDY:1;
                                 ;    5581             unsigned short PIPE3BRDY:1;
                                 ;    5582             unsigned short PIPE2BRDY:1;
                                 ;    5583             unsigned short PIPE1BRDY:1;
                                 ;    5584             unsigned short PIPE0BRDY:1;
                                 ;    5585         } BIT;
                                 ;    5586     } BRDYSTS;
                                 ;    5587     union {
                                 ;    5588         unsigned short WORD;
                                 ;    5589         struct {
                                 ;    5590             unsigned short :6;
                                 ;    5591             unsigned short PIPE9BRDY:1;
                                 ;    5592             unsigned short PIPE8BRDY:1;
                                 ;    5593             unsigned short PIPE7BRDY:1;
                                 ;    5594             unsigned short PIPE6BRDY:1;
                                 ;    5595             unsigned short PIPE5BRDY:1;
                                 ;    5596             unsigned short PIPE4BRDY:1;
                                 ;    5597             unsigned short PIPE3BRDY:1;
                                 ;    5598             unsigned short PIPE2BRDY:1;
                                 ;    5599             unsigned short PIPE1BRDY:1;
                                 ;    5600             unsigned short PIPE0BRDY:1;
                                 ;    5601         } BIT;
                                 ;    5602     } NRDYSTS;
                                 ;    5603     union {
                                 ;    5604         unsigned short WORD;
                                 ;    5605         struct {
                                 ;    5606             unsigned short :6;
                                 ;    5607             unsigned short PIPE9BENP:1;
                                 ;    5608             unsigned short PIPE8BENP:1;
                                 ;    5609             unsigned short PIPE7BENP:1;
                                 ;    5610             unsigned short PIPE6BENP:1;
                                 ;    5611             unsigned short PIPE5BENP:1;
                                 ;    5612             unsigned short PIPE4BENP:1;
                                 ;    5613             unsigned short PIPE3BENP:1;
                                 ;    5614             unsigned short PIPE2BENP:1;
                                 ;    5615             unsigned short PIPE1BENP:1;
                                 ;    5616             unsigned short PIPE0BENP:1;
                                 ;    5617         } BIT;
                                 ;    5618     } BEMPSTS;
                                 ;    5619     union {
                                 ;    5620         unsigned short WORD;
                                 ;    5621         struct {
                                 ;    5622             unsigned short OVRN:1;
                                 ;    5623             unsigned short CRCE:1;
                                 ;    5624             unsigned short :3;
                                 ;    5625             unsigned short FRNM:11;
                                 ;    5626         } BIT;
                                 ;    5627     } FRMNUM;
                                 ;    5628     union {
                                 ;    5629         unsigned short WORD;
                                 ;    5630         struct {
                                 ;    5631             unsigned short DVCHG:1;
                                 ;    5632             unsigned short :15;
                                 ;    5633         } BIT;
                                 ;    5634     } DVCHGR;
                                 ;    5635     union {
                                 ;    5636         unsigned short WORD;
                                 ;    5637         struct {
                                 ;    5638             unsigned short :4;
                                 ;    5639             unsigned short STSRECOV:4;
                                 ;    5640             unsigned short :1;
                                 ;    5641             unsigned short USBADDR:7;
                                 ;    5642         } BIT;
                                 ;    5643     } USBADDR;
                                 ;    5644     unsigned char wk10[2];
                                 ;    5645     union {
                                 ;    5646         unsigned short WORD;
                                 ;    5647         struct {
                                 ;    5648             unsigned short BREQUEST:8;
                                 ;    5649             unsigned short BMREQUESTTYPE:8;
                                 ;    5650         } BIT;
                                 ;    5651     } USBREQ;
                                 ;    5652     unsigned short USBVAL;
                                 ;    5653     unsigned short USBINDX;
                                 ;    5654     unsigned short USBLENG;
                                 ;    5655     union {
                                 ;    5656         unsigned short WORD;
                                 ;    5657         struct {
                                 ;    5658             unsigned short :8;
                                 ;    5659             unsigned short SHTNAK:1;
                                 ;    5660             unsigned short :2;
                                 ;    5661             unsigned short DIR:1;
                                 ;    5662             unsigned short :4;
                                 ;    5663         } BIT;
                                 ;    5664     } DCPCFG;
                                 ;    5665     union {
                                 ;    5666         unsigned short WORD;
                                 ;    5667         struct {
                                 ;    5668             unsigned short DEVSEL:4;
                                 ;    5669             unsigned short :5;
                                 ;    5670             unsigned short MXPS:7;
                                 ;    5671         } BIT;
                                 ;    5672     } DCPMAXP;
                                 ;    5673     union {
                                 ;    5674         unsigned short WORD;
                                 ;    5675         struct {
                                 ;    5676             unsigned short BSTS:1;
                                 ;    5677             unsigned short SUREQ:1;
                                 ;    5678             unsigned short :2;
                                 ;    5679             unsigned short SUREQCLR:1;
                                 ;    5680             unsigned short :2;
                                 ;    5681             unsigned short SQCLR:1;
                                 ;    5682             unsigned short SQSET:1;
                                 ;    5683             unsigned short SQMON:1;
                                 ;    5684             unsigned short PBUSY:1;
                                 ;    5685             unsigned short :2;
                                 ;    5686             unsigned short CCPL:1;
                                 ;    5687             unsigned short PID:2;
                                 ;    5688         } BIT;
                                 ;    5689     } DCPCTR;
                                 ;    5690     unsigned char wk11[2];
                                 ;    5691     union {
                                 ;    5692         unsigned short WORD;
                                 ;    5693         struct {
                                 ;    5694             unsigned short :12;
                                 ;    5695             unsigned short PIPESEL:4;
                                 ;    5696         } BIT;
                                 ;    5697     } PIPESEL;
                                 ;    5698     unsigned char wk12[2];
                                 ;    5699     union {
                                 ;    5700         unsigned short WORD;
                                 ;    5701         struct {
                                 ;    5702             unsigned short TYPE:2;
                                 ;    5703             unsigned short :3;
                                 ;    5704             unsigned short BFRE:1;
                                 ;    5705             unsigned short DBLB:1;
                                 ;    5706             unsigned short :1;
                                 ;    5707             unsigned short SHTNAK:1;
                                 ;    5708             unsigned short :2;
                                 ;    5709             unsigned short DIR:1;
                                 ;    5710             unsigned short EPNUM:4;
                                 ;    5711         } BIT;
                                 ;    5712     } PIPECFG;
                                 ;    5713     unsigned char wk13[2];
                                 ;    5714     union {
                                 ;    5715         unsigned short WORD;
                                 ;    5716         struct {
                                 ;    5717             unsigned short DEVSEL:4;
                                 ;    5718             unsigned short :3;
                                 ;    5719             unsigned short XPS:1;
                                 ;    5720             unsigned short MXPS:8;
                                 ;    5721         } BIT;
                                 ;    5722     } PIPEMAXP;
                                 ;    5723     union {
                                 ;    5724         unsigned short WORD;
                                 ;    5725         struct {
                                 ;    5726             unsigned short :3;
                                 ;    5727             unsigned short IFIS:1;
                                 ;    5728             unsigned short :9;
                                 ;    5729             unsigned short IITV:3;
                                 ;    5730         } BIT;
                                 ;    5731     } PIPEPERI;
                                 ;    5732     union {
                                 ;    5733         unsigned short WORD;
                                 ;    5734         struct {
                                 ;    5735             unsigned short BSTS:1;
                                 ;    5736             unsigned short INBUFM:1;
                                 ;    5737             unsigned short :3;
                                 ;    5738             unsigned short ATREPM:1;
                                 ;    5739             unsigned short ACLRM:1;
                                 ;    5740             unsigned short SQCLR:1;
                                 ;    5741             unsigned short SQSET:1;
                                 ;    5742             unsigned short SQMON:1;
                                 ;    5743             unsigned short PBUSY:1;
                                 ;    5744             unsigned short :3;
                                 ;    5745             unsigned short PID:2;
                                 ;    5746         } BIT;
                                 ;    5747     } PIPE1CTR;
                                 ;    5748     union {
                                 ;    5749         unsigned short WORD;
                                 ;    5750         struct {
                                 ;    5751             unsigned short BSTS:1;
                                 ;    5752             unsigned short INBUFM:1;
                                 ;    5753             unsigned short :3;
                                 ;    5754             unsigned short ATREPM:1;
                                 ;    5755             unsigned short ACLRM:1;
                                 ;    5756             unsigned short SQCLR:1;
                                 ;    5757             unsigned short SQSET:1;
                                 ;    5758             unsigned short SQMON:1;
                                 ;    5759             unsigned short PBUSY:1;
                                 ;    5760             unsigned short :3;
                                 ;    5761             unsigned short PID:2;
                                 ;    5762         } BIT;
                                 ;    5763     } PIPE2CTR;
                                 ;    5764     union {
                                 ;    5765         unsigned short WORD;
                                 ;    5766         struct {
                                 ;    5767             unsigned short BSTS:1;
                                 ;    5768             unsigned short INBUFM:1;
                                 ;    5769             unsigned short :3;
                                 ;    5770             unsigned short ATREPM:1;
                                 ;    5771             unsigned short ACLRM:1;
                                 ;    5772             unsigned short SQCLR:1;
                                 ;    5773             unsigned short SQSET:1;
                                 ;    5774             unsigned short SQMON:1;
                                 ;    5775             unsigned short PBUSY:1;
                                 ;    5776             unsigned short :3;
                                 ;    5777             unsigned short PID:2;
                                 ;    5778         } BIT;
                                 ;    5779     } PIPE3CTR;
                                 ;    5780     union {
                                 ;    5781         unsigned short WORD;
                                 ;    5782         struct {
                                 ;    5783             unsigned short BSTS:1;
                                 ;    5784             unsigned short INBUFM:1;
                                 ;    5785             unsigned short :3;
                                 ;    5786             unsigned short ATREPM:1;
                                 ;    5787             unsigned short ACLRM:1;
                                 ;    5788             unsigned short SQCLR:1;
                                 ;    5789             unsigned short SQSET:1;
                                 ;    5790             unsigned short SQMON:1;
                                 ;    5791             unsigned short PBUSY:1;
                                 ;    5792             unsigned short :3;
                                 ;    5793             unsigned short PID:2;
                                 ;    5794         } BIT;
                                 ;    5795     } PIPE4CTR;
                                 ;    5796     union {
                                 ;    5797         unsigned short WORD;
                                 ;    5798         struct {
                                 ;    5799             unsigned short BSTS:1;
                                 ;    5800             unsigned short INBUFM:1;
                                 ;    5801             unsigned short :3;
                                 ;    5802             unsigned short ATREPM:1;
                                 ;    5803             unsigned short ACLRM:1;
                                 ;    5804             unsigned short SQCLR:1;
                                 ;    5805             unsigned short SQSET:1;
                                 ;    5806             unsigned short SQMON:1;
                                 ;    5807             unsigned short PBUSY:1;
                                 ;    5808             unsigned short :3;
                                 ;    5809             unsigned short PID:2;
                                 ;    5810         } BIT;
                                 ;    5811     } PIPE5CTR;
                                 ;    5812     union {
                                 ;    5813         unsigned short WORD;
                                 ;    5814         struct {
                                 ;    5815             unsigned short BSTS:1;
                                 ;    5816             unsigned short :5;
                                 ;    5817             unsigned short ACLRM:1;
                                 ;    5818             unsigned short SQCLR:1;
                                 ;    5819             unsigned short SQSET:1;
                                 ;    5820             unsigned short SQMON:1;
                                 ;    5821             unsigned short PBUSY:1;
                                 ;    5822             unsigned short :3;
                                 ;    5823             unsigned short PID:2;
                                 ;    5824         } BIT;
                                 ;    5825     } PIPE6CTR;
                                 ;    5826     union {
                                 ;    5827         unsigned short WORD;
                                 ;    5828         struct {
                                 ;    5829             unsigned short BSTS:1;
                                 ;    5830             unsigned short :5;
                                 ;    5831             unsigned short ACLRM:1;
                                 ;    5832             unsigned short SQCLR:1;
                                 ;    5833             unsigned short SQSET:1;
                                 ;    5834             unsigned short SQMON:1;
                                 ;    5835             unsigned short PBUSY:1;
                                 ;    5836             unsigned short :3;
                                 ;    5837             unsigned short PID:2;
                                 ;    5838         } BIT;
                                 ;    5839     } PIPE7CTR;
                                 ;    5840     union {
                                 ;    5841         unsigned short WORD;
                                 ;    5842         struct {
                                 ;    5843             unsigned short BSTS:1;
                                 ;    5844             unsigned short :5;
                                 ;    5845             unsigned short ACLRM:1;
                                 ;    5846             unsigned short SQCLR:1;
                                 ;    5847             unsigned short SQSET:1;
                                 ;    5848             unsigned short SQMON:1;
                                 ;    5849             unsigned short PBUSY:1;
                                 ;    5850             unsigned short :3;
                                 ;    5851             unsigned short PID:2;
                                 ;    5852         } BIT;
                                 ;    5853     } PIPE8CTR;
                                 ;    5854     union {
                                 ;    5855         unsigned short WORD;
                                 ;    5856         struct {
                                 ;    5857             unsigned short BSTS:1;
                                 ;    5858             unsigned short :5;
                                 ;    5859             unsigned short ACLRM:1;
                                 ;    5860             unsigned short SQCLR:1;
                                 ;    5861             unsigned short SQSET:1;
                                 ;    5862             unsigned short SQMON:1;
                                 ;    5863             unsigned short PBUSY:1;
                                 ;    5864             unsigned short :3;
                                 ;    5865             unsigned short PID:2;
                                 ;    5866         } BIT;
                                 ;    5867     } PIPE9CTR;
                                 ;    5868     unsigned char wk14[14];
                                 ;    5869     union {
                                 ;    5870         unsigned short WORD;
                                 ;    5871         struct {
                                 ;    5872             unsigned short :6;
                                 ;    5873             unsigned short TRENB:1;
                                 ;    5874             unsigned short TRCLR:1;
                                 ;    5875             unsigned short :8;
                                 ;    5876         } BIT;
                                 ;    5877     } PIPE1TRE;
                                 ;    5878     unsigned short PIPE1TRN;
                                 ;    5879     union {
                                 ;    5880         unsigned short WORD;
                                 ;    5881         struct {
                                 ;    5882             unsigned short :6;
                                 ;    5883             unsigned short TRENB:1;
                                 ;    5884             unsigned short TRCLR:1;
                                 ;    5885             unsigned short :8;
                                 ;    5886         } BIT;
                                 ;    5887     } PIPE2TRE;
                                 ;    5888     unsigned short PIPE2TRN;
                                 ;    5889     union {
                                 ;    5890         unsigned short WORD;
                                 ;    5891         struct {
                                 ;    5892             unsigned short :6;
                                 ;    5893             unsigned short TRENB:1;
                                 ;    5894             unsigned short TRCLR:1;
                                 ;    5895             unsigned short :8;
                                 ;    5896         } BIT;
                                 ;    5897     } PIPE3TRE;
                                 ;    5898     unsigned short PIPE3TRN;
                                 ;    5899     union {
                                 ;    5900         unsigned short WORD;
                                 ;    5901         struct {
                                 ;    5902             unsigned short :6;
                                 ;    5903             unsigned short TRENB:1;
                                 ;    5904             unsigned short TRCLR:1;
                                 ;    5905             unsigned short :8;
                                 ;    5906         } BIT;
                                 ;    5907     } PIPE4TRE;
                                 ;    5908     unsigned short PIPE4TRN;
                                 ;    5909     union {
                                 ;    5910         unsigned short WORD;
                                 ;    5911         struct {
                                 ;    5912             unsigned short :6;
                                 ;    5913             unsigned short TRENB:1;
                                 ;    5914             unsigned short TRCLR:1;
                                 ;    5915             unsigned short :8;
                                 ;    5916         } BIT;
                                 ;    5917     } PIPE5TRE;
                                 ;    5918     unsigned short PIPE5TRN;
                                 ;    5919     unsigned char wk15[44];
                                 ;    5920     union {
                                 ;    5921         unsigned short WORD;
                                 ;    5922         struct {
                                 ;    5923             unsigned short :8;
                                 ;    5924             unsigned short USBSPD:2;
                                 ;    5925             unsigned short :6;
                                 ;    5926         } BIT;
                                 ;    5927     } DEVADD0;
                                 ;    5928     union {
                                 ;    5929         unsigned short WORD;
                                 ;    5930         struct {
                                 ;    5931             unsigned short :8;
                                 ;    5932             unsigned short USBSPD:2;
                                 ;    5933             unsigned short :6;
                                 ;    5934         } BIT;
                                 ;    5935     } DEVADD1;
                                 ;    5936     union {
                                 ;    5937         unsigned short WORD;
                                 ;    5938         struct {
                                 ;    5939             unsigned short :8;
                                 ;    5940             unsigned short USBSPD:2;
                                 ;    5941             unsigned short :6;
                                 ;    5942         } BIT;
                                 ;    5943     } DEVADD2;
                                 ;    5944     union {
                                 ;    5945         unsigned short WORD;
                                 ;    5946         struct {
                                 ;    5947             unsigned short :8;
                                 ;    5948             unsigned short USBSPD:2;
                                 ;    5949             unsigned short :6;
                                 ;    5950         } BIT;
                                 ;    5951     } DEVADD3;
                                 ;    5952     union {
                                 ;    5953         unsigned short WORD;
                                 ;    5954         struct {
                                 ;    5955             unsigned short :8;
                                 ;    5956             unsigned short USBSPD:2;
                                 ;    5957             unsigned short :6;
                                 ;    5958         } BIT;
                                 ;    5959     } DEVADD4;
                                 ;    5960     union {
                                 ;    5961         unsigned short WORD;
                                 ;    5962         struct {
                                 ;    5963             unsigned short :8;
                                 ;    5964             unsigned short USBSPD:2;
                                 ;    5965             unsigned short :6;
                                 ;    5966         } BIT;
                                 ;    5967     } DEVADD5;
                                 ;    5968 };
                                 ;    5969 
                                 ;    5970 struct st_usb {
                                 ;    5971     union {
                                 ;    5972         unsigned long LONG;
                                 ;    5973         struct {
                                 ;    5974             unsigned long DVSTS1:1;
                                 ;    5975             unsigned long :1;
                                 ;    5976             unsigned long DOVCB1:1;
                                 ;    5977             unsigned long DOVCA1:1;
                                 ;    5978             unsigned long :2;
                                 ;    5979             unsigned long DM1:1;
                                 ;    5980             unsigned long DP1:1;
                                 ;    5981             unsigned long DVBSTS0:1;
                                 ;    5982             unsigned long :1;
                                 ;    5983             unsigned long DOVCB0:1;
                                 ;    5984             unsigned long DOVCA0:1;
                                 ;    5985             unsigned long :2;
                                 ;    5986             unsigned long DM0:1;
                                 ;    5987             unsigned long DP0:1;
                                 ;    5988             unsigned long :3;
                                 ;    5989             unsigned long FIXPHY1:1;
                                 ;    5990             unsigned long :3;
                                 ;    5991             unsigned long SRPC1:1;
                                 ;    5992             unsigned long :3;
                                 ;    5993             unsigned long FIXPHY0:1;
                                 ;    5994             unsigned long :3;
                                 ;    5995             unsigned long SRPC0:1;
                                 ;    5996         } BIT;
                                 ;    5997     } DPUSR0R;
                                 ;    5998     union {
                                 ;    5999         unsigned long LONG;
                                 ;    6000         struct {
                                 ;    6001             unsigned long DVBINT1:1;
                                 ;    6002             unsigned long :1;
                                 ;    6003             unsigned long DOVRCRB1:1;
                                 ;    6004             unsigned long DOVRCRA1:1;
                                 ;    6005             unsigned long :2;
                                 ;    6006             unsigned long DMINT1:1;
                                 ;    6007             unsigned long DPINT1:1;
                                 ;    6008             unsigned long DVBINT0:1;
                                 ;    6009             unsigned long :1;
                                 ;    6010             unsigned long DOVRCRB0:1;
                                 ;    6011             unsigned long DOVRCRA0:1;
                                 ;    6012             unsigned long :2;
                                 ;    6013             unsigned long DMINT0:1;
                                 ;    6014             unsigned long DPINT0:1;
                                 ;    6015             unsigned long DVBSE1:1;
                                 ;    6016             unsigned long :1;
                                 ;    6017             unsigned long DOVRCRBE1:1;
                                 ;    6018             unsigned long DOVRCRAE1:1;
                                 ;    6019             unsigned long :2;
                                 ;    6020             unsigned long DMINTE1:1;
                                 ;    6021             unsigned long DPINTE1:1;
                                 ;    6022             unsigned long DVBSE0:1;
                                 ;    6023             unsigned long :1;
                                 ;    6024             unsigned long DOVRCRBE0:1;
                                 ;    6025             unsigned long DOVRCRAE0:1;
                                 ;    6026             unsigned long :2;
                                 ;    6027             unsigned long DMINTE0:1;
                                 ;    6028             unsigned long DPINTE0:1;
                                 ;    6029         } BIT;
                                 ;    6030     } DPUSR1R;
                                 ;    6031 };
                                 ;    6032 
                                 ;    6033 struct st_edmac {
                                 ;    6034     union {
                                 ;    6035         unsigned long LONG;
                                 ;    6036         struct {
                                 ;    6037             unsigned long :25;
                                 ;    6038             unsigned long DE:1;
                                 ;    6039             unsigned long DL:2;
                                 ;    6040             unsigned long :3;
                                 ;    6041             unsigned long SWR:1;
                                 ;    6042         } BIT;
                                 ;    6043     } EDMR;
                                 ;    6044     unsigned char wk0[4];
                                 ;    6045     union {
                                 ;    6046         unsigned long LONG;
                                 ;    6047         struct {
                                 ;    6048             unsigned long :31;
                                 ;    6049             unsigned long TR:1;
                                 ;    6050         } BIT;
                                 ;    6051     } EDTRR;
                                 ;    6052     unsigned char wk1[4];
                                 ;    6053     union {
                                 ;    6054         unsigned long LONG;
                                 ;    6055         struct {
                                 ;    6056             unsigned long :31;
                                 ;    6057             unsigned long RR:1;
                                 ;    6058         } BIT;
                                 ;    6059     } EDRRR;
                                 ;    6060     unsigned char wk2[4];
                                 ;    6061     void *TDLAR;
                                 ;    6062     unsigned char wk3[4];
                                 ;    6063     void *RDLAR;
                                 ;    6064     unsigned char wk4[4];
                                 ;    6065     union {
                                 ;    6066         unsigned long LONG;
                                 ;    6067         struct {
                                 ;    6068             unsigned long :1;
                                 ;    6069             unsigned long TWB:1;
                                 ;    6070             unsigned long :3;
                                 ;    6071             unsigned long TABT:1;
                                 ;    6072             unsigned long RABT:1;
                                 ;    6073             unsigned long RFCOF:1;
                                 ;    6074             unsigned long ADE:1;
                                 ;    6075             unsigned long ECI:1;
                                 ;    6076             unsigned long TC:1;
                                 ;    6077             unsigned long TDE:1;
                                 ;    6078             unsigned long TFUF:1;
                                 ;    6079             unsigned long FR:1;
                                 ;    6080             unsigned long RDE:1;
                                 ;    6081             unsigned long RFOF:1;
                                 ;    6082             unsigned long :4;
                                 ;    6083             unsigned long CND:1;
                                 ;    6084             unsigned long DLC:1;
                                 ;    6085             unsigned long CD:1;
                                 ;    6086             unsigned long TRO:1;
                                 ;    6087             unsigned long RMAF:1;
                                 ;    6088             unsigned long :2;
                                 ;    6089             unsigned long RRF:1;
                                 ;    6090             unsigned long RTLF:1;
                                 ;    6091             unsigned long RTSF:1;
                                 ;    6092             unsigned long PRE:1;
                                 ;    6093             unsigned long CERF:1;
                                 ;    6094         } BIT;
                                 ;    6095     } EESR;
                                 ;    6096     unsigned char wk5[4];
                                 ;    6097     union {
                                 ;    6098         unsigned long LONG;
                                 ;    6099         struct {
                                 ;    6100             unsigned long :1;
                                 ;    6101             unsigned long TWBIP:1;
                                 ;    6102             unsigned long :3;
                                 ;    6103             unsigned long TABTIP:1;
                                 ;    6104             unsigned long RABTIP:1;
                                 ;    6105             unsigned long RFCOFIP:1;
                                 ;    6106             unsigned long ADEIP:1;
                                 ;    6107             unsigned long ECIIP:1;
                                 ;    6108             unsigned long TCIP:1;
                                 ;    6109             unsigned long TDEIP:1;
                                 ;    6110             unsigned long TFUFIP:1;
                                 ;    6111             unsigned long FRIP:1;
                                 ;    6112             unsigned long RDEIP:1;
                                 ;    6113             unsigned long RFOFIP:1;
                                 ;    6114             unsigned long :4;
                                 ;    6115             unsigned long CNDIP:1;
                                 ;    6116             unsigned long DLCIP:1;
                                 ;    6117             unsigned long CDIP:1;
                                 ;    6118             unsigned long TROIP:1;
                                 ;    6119             unsigned long RMAFIP:1;
                                 ;    6120             unsigned long :2;
                                 ;    6121             unsigned long RRFIP:1;
                                 ;    6122             unsigned long RTLFIP:1;
                                 ;    6123             unsigned long RTSFIP:1;
                                 ;    6124             unsigned long PREIP:1;
                                 ;    6125             unsigned long CERFIP:1;
                                 ;    6126         } BIT;
                                 ;    6127     } EESIPR;
                                 ;    6128     unsigned char wk6[4];
                                 ;    6129     union {
                                 ;    6130         unsigned long LONG;
                                 ;    6131         struct {
                                 ;    6132             unsigned long :20;
                                 ;    6133             unsigned long CNDCE:1;
                                 ;    6134             unsigned long DLCCE:1;
                                 ;    6135             unsigned long CDCE:1;
                                 ;    6136             unsigned long TROCE:1;
                                 ;    6137             unsigned long RMAFCE:1;
                                 ;    6138             unsigned long :2;
                                 ;    6139             unsigned long RRFCE:1;
                                 ;    6140             unsigned long RTLFCE:1;
                                 ;    6141             unsigned long RTSFCE:1;
                                 ;    6142             unsigned long PRECE:1;
                                 ;    6143             unsigned long CERFCE:1;
                                 ;    6144         } BIT;
                                 ;    6145     } TRSCER;
                                 ;    6146     unsigned char wk7[4];
                                 ;    6147     union {
                                 ;    6148         unsigned long LONG;
                                 ;    6149         struct {
                                 ;    6150             unsigned long :16;
                                 ;    6151             unsigned long MFC:16;
                                 ;    6152         } BIT;
                                 ;    6153     } RMFCR;
                                 ;    6154     unsigned char wk8[4];
                                 ;    6155     union {
                                 ;    6156         unsigned long LONG;
                                 ;    6157         struct {
                                 ;    6158             unsigned long :21;
                                 ;    6159             unsigned long TFT:11;
                                 ;    6160         } BIT;
                                 ;    6161     } TFTR;
                                 ;    6162     unsigned char wk9[4];
                                 ;    6163     union {
                                 ;    6164         unsigned long LONG;
                                 ;    6165         struct {
                                 ;    6166             unsigned long :19;
                                 ;    6167             unsigned long TFD:5;
                                 ;    6168             unsigned long :3;
                                 ;    6169             unsigned long RFD:5;
                                 ;    6170         } BIT;
                                 ;    6171     } FDR;
                                 ;    6172     unsigned char wk10[4];
                                 ;    6173     union {
                                 ;    6174         unsigned long LONG;
                                 ;    6175         struct {
                                 ;    6176             unsigned long :30;
                                 ;    6177             unsigned long RNC:1;
                                 ;    6178             unsigned long RNR:1;
                                 ;    6179         } BIT;
                                 ;    6180     } RMCR;
                                 ;    6181     unsigned char wk11[8];
                                 ;    6182     union {
                                 ;    6183         unsigned long LONG;
                                 ;    6184         struct {
                                 ;    6185             unsigned long :16;
                                 ;    6186             unsigned long UNDER:16;
                                 ;    6187         } BIT;
                                 ;    6188     } TFUCR;
                                 ;    6189     union {
                                 ;    6190         unsigned long LONG;
                                 ;    6191         struct {
                                 ;    6192             unsigned long :16;
                                 ;    6193             unsigned long OVER:16;
                                 ;    6194         } BIT;
                                 ;    6195     } RFOCR;
                                 ;    6196     union {
                                 ;    6197         unsigned long LONG;
                                 ;    6198         struct {
                                 ;    6199             unsigned long :31;
                                 ;    6200             unsigned long TLB:1;
                                 ;    6201         } BIT;
                                 ;    6202     } IOSR;
                                 ;    6203     union {
                                 ;    6204         unsigned long LONG;
                                 ;    6205         struct {
                                 ;    6206             unsigned long :13;
                                 ;    6207             unsigned long RFFO:3;
                                 ;    6208             unsigned long :13;
                                 ;    6209             unsigned long RFDO:3;
                                 ;    6210         } BIT;
                                 ;    6211     } FCFTR;
                                 ;    6212     unsigned char wk12[4];
                                 ;    6213     union {
                                 ;    6214         unsigned long LONG;
                                 ;    6215         struct {
                                 ;    6216             unsigned long :14;
                                 ;    6217             unsigned long PADS:2;
                                 ;    6218             unsigned long :10;
                                 ;    6219             unsigned long PADR:6;
                                 ;    6220         } BIT;
                                 ;    6221     } RPADIR;
                                 ;    6222     union {
                                 ;    6223         unsigned long LONG;
                                 ;    6224         struct {
                                 ;    6225             unsigned long :27;
                                 ;    6226             unsigned long TIM:1;
                                 ;    6227             unsigned long :3;
                                 ;    6228             unsigned long TIS:1;
                                 ;    6229         } BIT;
                                 ;    6230     } TRIMD;
                                 ;    6231     unsigned char wk13[72];
                                 ;    6232     void *RBWAR;
                                 ;    6233     void *RDFAR;
                                 ;    6234     unsigned char wk14[4];
                                 ;    6235     void *TBRAR;
                                 ;    6236     void *TDFAR;
                                 ;    6237 };
                                 ;    6238 
                                 ;    6239 struct st_etherc {
                                 ;    6240     union {
                                 ;    6241         unsigned long LONG;
                                 ;    6242         struct {
                                 ;    6243             unsigned long :11;
                                 ;    6244             unsigned long TPC:1;
                                 ;    6245             unsigned long ZPE:1;
                                 ;    6246             unsigned long PFR:1;
                                 ;    6247             unsigned long RXF:1;
                                 ;    6248             unsigned long TXF:1;
                                 ;    6249             unsigned long :3;
                                 ;    6250             unsigned long PRCEF:1;
                                 ;    6251             unsigned long :2;
                                 ;    6252             unsigned long MPDE:1;
                                 ;    6253             unsigned long :2;
                                 ;    6254             unsigned long RE:1;
                                 ;    6255             unsigned long TE:1;
                                 ;    6256             unsigned long :1;
                                 ;    6257             unsigned long ILB:1;
                                 ;    6258             unsigned long RTM:1;
                                 ;    6259             unsigned long DM:1;
                                 ;    6260             unsigned long PRM:1;
                                 ;    6261         } BIT;
                                 ;    6262     } ECMR;
                                 ;    6263     unsigned char wk0[4];
                                 ;    6264     union {
                                 ;    6265         unsigned long LONG;
                                 ;    6266         struct {
                                 ;    6267             unsigned long :20;
                                 ;    6268             unsigned long RFL:12;
                                 ;    6269         } BIT;
                                 ;    6270     } RFLR;
                                 ;    6271     unsigned char wk1[4];
                                 ;    6272     union {
                                 ;    6273         unsigned long LONG;
                                 ;    6274         struct {
                                 ;    6275             unsigned long :26;
                                 ;    6276             unsigned long BFR:1;
                                 ;    6277             unsigned long PSRTO:1;
                                 ;    6278             unsigned long :1;
                                 ;    6279             unsigned long LCHNG:1;
                                 ;    6280             unsigned long MPD:1;
                                 ;    6281             unsigned long ICD:1;
                                 ;    6282         } BIT;
                                 ;    6283     } ECSR;
                                 ;    6284     unsigned char wk2[4];
                                 ;    6285     union {
                                 ;    6286         unsigned long LONG;
                                 ;    6287         struct {
                                 ;    6288             unsigned long :26;
                                 ;    6289             unsigned long BFSIPR:1;
                                 ;    6290             unsigned long PSRTOIP:1;
                                 ;    6291             unsigned long :1;
                                 ;    6292             unsigned long LCHNGIP:1;
                                 ;    6293             unsigned long MPDIP:1;
                                 ;    6294             unsigned long ICDIP:1;
                                 ;    6295         } BIT;
                                 ;    6296     } ECSIPR;
                                 ;    6297     unsigned char wk3[4];
                                 ;    6298     union {
                                 ;    6299         unsigned long LONG;
                                 ;    6300         struct {
                                 ;    6301             unsigned long :28;
                                 ;    6302             unsigned long MDI:1;
                                 ;    6303             unsigned long MDO:1;
                                 ;    6304             unsigned long MMD:1;
                                 ;    6305             unsigned long MDC:1;
                                 ;    6306         } BIT;
                                 ;    6307     } PIR;
                                 ;    6308     unsigned char wk4[4];
                                 ;    6309     union {
                                 ;    6310         unsigned long LONG;
                                 ;    6311         struct {
                                 ;    6312             unsigned long :31;
                                 ;    6313             unsigned long LMON:1;
                                 ;    6314         } BIT;
                                 ;    6315     } PSR;
                                 ;    6316     unsigned char wk5[20];
                                 ;    6317     union {
                                 ;    6318         unsigned long LONG;
                                 ;    6319         struct {
                                 ;    6320             unsigned long :12;
                                 ;    6321             unsigned long RMD:20;
                                 ;    6322         } BIT;
                                 ;    6323     } RDMLR;
                                 ;    6324     unsigned char wk6[12];
                                 ;    6325     union {
                                 ;    6326         unsigned long LONG;
                                 ;    6327         struct {
                                 ;    6328             unsigned long :27;
                                 ;    6329             unsigned long IPG:5;
                                 ;    6330         } BIT;
                                 ;    6331     } IPGR;
                                 ;    6332     union {
                                 ;    6333         unsigned long LONG;
                                 ;    6334         struct {
                                 ;    6335             unsigned long :16;
                                 ;    6336             unsigned long AP:16;
                                 ;    6337         } BIT;
                                 ;    6338     } APR;
                                 ;    6339     union {
                                 ;    6340         unsigned long LONG;
                                 ;    6341         struct {
                                 ;    6342             unsigned long :16;
                                 ;    6343             unsigned long MP:16;
                                 ;    6344         } BIT;
                                 ;    6345     } MPR;
                                 ;    6346     unsigned char wk7[4];
                                 ;    6347     union {
                                 ;    6348         unsigned long LONG;
                                 ;    6349         struct {
                                 ;    6350             unsigned long :24;
                                 ;    6351             unsigned long RPAUSE:8;
                                 ;    6352         } BIT;
                                 ;    6353     } RFCF;
                                 ;    6354     union {
                                 ;    6355         unsigned long LONG;
                                 ;    6356         struct {
                                 ;    6357             unsigned long :16;
                                 ;    6358             unsigned long TPAUSE:16;
                                 ;    6359         } BIT;
                                 ;    6360     } TPAUSER;
                                 ;    6361     union {
                                 ;    6362         unsigned long LONG;
                                 ;    6363         struct {
                                 ;    6364             unsigned long :24;
                                 ;    6365             unsigned long TXP:8;
                                 ;    6366         } BIT;
                                 ;    6367     } TPAUSECR;
                                 ;    6368     union {
                                 ;    6369         unsigned long LONG;
                                 ;    6370         struct {
                                 ;    6371             unsigned long :16;
                                 ;    6372             unsigned long BCF:16;
                                 ;    6373         } BIT;
                                 ;    6374     } BCFRR;
                                 ;    6375     unsigned char wk8[80];
                                 ;    6376     unsigned long MAHR;
                                 ;    6377     unsigned char wk9[4];
                                 ;    6378     union {
                                 ;    6379         unsigned long LONG;
                                 ;    6380         struct {
                                 ;    6381             unsigned long :16;
                                 ;    6382             unsigned long MA:16;
                                 ;    6383         } BIT;
                                 ;    6384     } MALR;
                                 ;    6385     unsigned char wk10[4];
                                 ;    6386     unsigned long TROCR;
                                 ;    6387     unsigned long CDCR;
                                 ;    6388     unsigned long LCCR;
                                 ;    6389     unsigned long CNDCR;
                                 ;    6390     unsigned char wk11[4];
                                 ;    6391     unsigned long CEFCR;
                                 ;    6392     unsigned long FRECR;
                                 ;    6393     unsigned long TSFRCR;
                                 ;    6394     unsigned long TLFRCR;
                                 ;    6395     unsigned long RFCR;
                                 ;    6396     unsigned long MAFCR;
                                 ;    6397 };
                                 ;    6398 
                                 ;    6399 enum enum_ir {
                                 ;    6400 IR_BSC_BUSERR=16,
                                 ;    6401 IR_FCU_FIFERR=21,IR_FCU_FRDYI=23,
                                 ;    6402 IR_ICU_SWINT=27,
                                 ;    6403 IR_CMT0_CMI0,
                                 ;    6404 IR_CMT1_CMI1,
                                 ;    6405 IR_CMT2_CMI2,
                                 ;    6406 IR_CMT3_CMI3,
                                 ;    6407 IR_ETHER_EINT,
                                 ;    6408 IR_USB0_D0FIFO0=36,IR_USB0_D1FIFO0,IR_USB0_USBI0,
                                 ;    6409 IR_USB1_D0FIFO1=40,IR_USB1_D1FIFO1,IR_USB1_USBI1,
                                 ;    6410 IR_RSPI0_SPEI0=44,IR_RSPI0_SPRI0,IR_RSPI0_SPTI0,IR_RSPI0_SPII0,
                                 ;    6411 IR_RSPI1_SPEI1,IR_RSPI1_SPRI1,IR_RSPI1_SPTI1,IR_RSPI1_SPII1,
                                 ;    6412 IR_CAN0_ERS0=56,IR_CAN0_RXF0,IR_CAN0_TXF0,IR_CAN0_RXM0,IR_CAN0_TXM0,
                                 ;    6413 IR_RTC_PRD=62,IR_RTC_CUP,
                                 ;    6414 IR_ICU_IRQ0,IR_ICU_IRQ1,IR_ICU_IRQ2,IR_ICU_IRQ3,IR_ICU_IRQ4,IR_ICU_IRQ5,IR_ICU_IRQ6,IR_ICU_IRQ7,IR_ICU_IRQ8,IR_ICU_IRQ9,IR_ICU_IRQ10,IR_ICU_IRQ11,IR_ICU_IRQ1
                                 ;    6415 IR_USB_USBR0=90,IR_USB_USBR1,
                                 ;    6416 IR_RTC_ALM,
                                 ;    6417 IR_WDT_WOVI=96,
                                 ;    6418 IR_AD0_ADI0=98,
                                 ;    6419 IR_AD1_ADI1,
                                 ;    6420 IR_S12AD_ADI=102,
                                 ;    6421 IR_MTU0_TGIA0=114,IR_MTU0_TGIB0,IR_MTU0_TGIC0,IR_MTU0_TGID0,IR_MTU0_TCIV0,IR_MTU0_TGIE0,IR_MTU0_TGIF0,
                                 ;    6422 IR_MTU1_TGIA1,IR_MTU1_TGIB1,IR_MTU1_TCIV1,IR_MTU1_TCIU1,
                                 ;    6423 IR_MTU2_TGIA2,IR_MTU2_TGIB2,IR_MTU2_TCIV2,IR_MTU2_TCIU2,
                                 ;    6424 IR_MTU3_TGIA3,IR_MTU3_TGIB3,IR_MTU3_TGIC3,IR_MTU3_TGID3,IR_MTU3_TCIV3,
                                 ;    6425 IR_MTU4_TGIA4,IR_MTU4_TGIB4,IR_MTU4_TGIC4,IR_MTU4_TGID4,IR_MTU4_TCIV4,
                                 ;    6426 IR_MTU5_TGIU5,IR_MTU5_TGIV5,IR_MTU5_TGIW5,
                                 ;    6427 IR_MTU6_TGIA6,IR_MTU6_TGIB6,IR_MTU6_TGIC6,IR_MTU6_TGID6,IR_MTU6_TCIV6,IR_MTU6_TGIE6,IR_MTU6_TGIF6,
                                 ;    6428 IR_MTU7_TGIA7,IR_MTU7_TGIB7,IR_MTU7_TCIV7,IR_MTU7_TCIU7,
                                 ;    6429 IR_MTU8_TGIA8,IR_MTU8_TGIB8,IR_MTU8_TCIV8,IR_MTU8_TCIU8,
                                 ;    6430 IR_MTU9_TGIA9,IR_MTU9_TGIB9,IR_MTU9_TGIC9,IR_MTU9_TGID9,IR_MTU9_TCIV9,
                                 ;    6431 IR_MTU10_TGIA10,IR_MTU10_TGIB10,IR_MTU10_TGIC10,IR_MTU10_TGID10,IR_MTU10_TCIV10,
                                 ;    6432 IR_MTU11_TGIU11,IR_MTU11_TGIV11,IR_MTU11_TGIW11,
                                 ;    6433 IR_POE_OEI1,IR_POE_OEI2,IR_POE_OEI3,IR_POE_OEI4,
                                 ;    6434 IR_TMR0_CMIA0,IR_TMR0_CMIB0,IR_TMR0_OVI0,
                                 ;    6435 IR_TMR1_CMIA1,IR_TMR1_CMIB1,IR_TMR1_OVI1,
                                 ;    6436 IR_TMR2_CMIA2,IR_TMR2_CMIB2,IR_TMR2_OVI2,
                                 ;    6437 IR_TMR3_CMIA3,IR_TMR3_CMIB3,IR_TMR3_OVI3,
                                 ;    6438 IR_DMACA_DMAC0I=198,IR_DMACA_DMAC1I,IR_DMACA_DMAC2I,IR_DMACA_DMAC3I,
                                 ;    6439 IR_EXDMAC_EXDMAC0I,IR_EXDMAC_EXDMAC1I,
                                 ;    6440 IR_SCI0_ERI0=214,IR_SCI0_RXI0,IR_SCI0_TXI0,IR_SCI0_TEI0,
                                 ;    6441 IR_SCI1_ERI1,IR_SCI1_RXI1,IR_SCI1_TXI1,IR_SCI1_TEI1,
                                 ;    6442 IR_SCI2_ERI2,IR_SCI2_RXI2,IR_SCI2_TXI2,IR_SCI2_TEI2,
                                 ;    6443 IR_SCI3_ERI3,IR_SCI3_RXI3,IR_SCI3_TXI3,IR_SCI3_TEI3,
                                 ;    6444 IR_SCI5_ERI5=234,IR_SCI5_RXI5,IR_SCI5_TXI5,IR_SCI5_TEI5,
                                 ;    6445 IR_SCI6_ERI6,IR_SCI6_RXI6,IR_SCI6_TXI6,IR_SCI6_TEI6,
                                 ;    6446 IR_RIIC0_ICEEI0=246,IR_RIIC0_ICRXI0,IR_RIIC0_ICTXI0,IR_RIIC0_ICTEI0,
                                 ;    6447 IR_RIIC1_ICEEI1,IR_RIIC1_ICRXI1,IR_RIIC1_ICTXI1,IR_RIIC1_ICTEI1
                                 ;    6448 };
                                 ;    6449 
                                 ;    6450 enum enum_dtce {
                                 ;    6451 DTCE_BSC_BUSERR=16,
                                 ;    6452 DTCE_FCU_FIFERR=21,DTCE_FCU_FRDYI=23,
                                 ;    6453 DTCE_ICU_SWINT=27,
                                 ;    6454 DTCE_CMT0_CMI0,
                                 ;    6455 DTCE_CMT1_CMI1,
                                 ;    6456 DTCE_CMT2_CMI2,
                                 ;    6457 DTCE_CMT3_CMI3,
                                 ;    6458 DTCE_ETHER_EINT,
                                 ;    6459 DTCE_USB0_D0FIFO0=36,DTCE_USB0_D1FIFO0,DTCE_USB0_USBI0,
                                 ;    6460 DTCE_USB1_D0FIFO1=40,DTCE_USB1_D1FIFO1,DTCE_USB1_USBI1,
                                 ;    6461 DTCE_RSPI0_SPEI0=44,DTCE_RSPI0_SPRI0,DTCE_RSPI0_SPTI0,DTCE_RSPI0_SPII0,
                                 ;    6462 DTCE_RSPI1_SPEI1,DTCE_RSPI1_SPRI1,DTCE_RSPI1_SPTI1,DTCE_RSPI1_SPII1,
                                 ;    6463 DTCE_CAN0_ERS0=56,DTCE_CAN0_RXF0,DTCE_CAN0_TXF0,DTCE_CAN0_RXM0,DTCE_CAN0_TXM0,
                                 ;    6464 DTCE_RTC_PRD=62,DTCE_RTC_CUP,
                                 ;    6465 DTCE_ICU_IRQ0,DTCE_ICU_IRQ1,DTCE_ICU_IRQ2,DTCE_ICU_IRQ3,DTCE_ICU_IRQ4,DTCE_ICU_IRQ5,DTCE_ICU_IRQ6,DTCE_ICU_IRQ7,DTCE_ICU_IRQ8,DTCE_ICU_IRQ9,DTCE_ICU_IRQ10,DT
                                 ;    6466 DTCE_USB_USBR0=90,DTCE_USB_USBR1,
                                 ;    6467 DTCE_RTC_ALM,
                                 ;    6468 DTCE_WDT_WOVI=96,
                                 ;    6469 DTCE_AD0_ADI0=98,
                                 ;    6470 DTCE_AD1_ADI1,
                                 ;    6471 DTCE_S12AD_ADI=102,
                                 ;    6472 DTCE_MTU0_TGIA0=114,DTCE_MTU0_TGIB0,DTCE_MTU0_TGIC0,DTCE_MTU0_TGID0,DTCE_MTU0_TCIV0,DTCE_MTU0_TGIE0,DTCE_MTU0_TGIF0,
                                 ;    6473 DTCE_MTU1_TGIA1,DTCE_MTU1_TGIB1,DTCE_MTU1_TCIV1,DTCE_MTU1_TCIU1,
                                 ;    6474 DTCE_MTU2_TGIA2,DTCE_MTU2_TGIB2,DTCE_MTU2_TCIV2,DTCE_MTU2_TCIU2,
                                 ;    6475 DTCE_MTU3_TGIA3,DTCE_MTU3_TGIB3,DTCE_MTU3_TGIC3,DTCE_MTU3_TGID3,DTCE_MTU3_TCIV3,
                                 ;    6476 DTCE_MTU4_TGIA4,DTCE_MTU4_TGIB4,DTCE_MTU4_TGIC4,DTCE_MTU4_TGID4,DTCE_MTU4_TCIV4,
                                 ;    6477 DTCE_MTU5_TGIU5,DTCE_MTU5_TGIV5,DTCE_MTU5_TGIW5,
                                 ;    6478 DTCE_MTU6_TGIA6,DTCE_MTU6_TGIB6,DTCE_MTU6_TGIC6,DTCE_MTU6_TGID6,DTCE_MTU6_TCIV6,DTCE_MTU6_TGIE6,DTCE_MTU6_TGIF6,
                                 ;    6479 DTCE_MTU7_TGIA7,DTCE_MTU7_TGIB7,DTCE_MTU7_TCIV7,DTCE_MTU7_TCIU7,
                                 ;    6480 DTCE_MTU8_TGIA8,DTCE_MTU8_TGIB8,DTCE_MTU8_TCIV8,DTCE_MTU8_TCIU8,
                                 ;    6481 DTCE_MTU9_TGIA9,DTCE_MTU9_TGIB9,DTCE_MTU9_TGIC9,DTCE_MTU9_TGID9,DTCE_MTU9_TCIV9,
                                 ;    6482 DTCE_MTU10_TGIA10,DTCE_MTU10_TGIB10,DTCE_MTU10_TGIC10,DTCE_MTU10_TGID10,DTCE_MTU10_TCIV10,
                                 ;    6483 DTCE_MTU11_TGIU11,DTCE_MTU11_TGIV11,DTCE_MTU11_TGIW11,
                                 ;    6484 DTCE_POE_OEI1,DTCE_POE_OEI2,DTCE_POE_OEI3,DTCE_POE_OEI4,
                                 ;    6485 DTCE_TMR0_CMIA0,DTCE_TMR0_CMIB0,DTCE_TMR0_OVI0,
                                 ;    6486 DTCE_TMR1_CMIA1,DTCE_TMR1_CMIB1,DTCE_TMR1_OVI1,
                                 ;    6487 DTCE_TMR2_CMIA2,DTCE_TMR2_CMIB2,DTCE_TMR2_OVI2,
                                 ;    6488 DTCE_TMR3_CMIA3,DTCE_TMR3_CMIB3,DTCE_TMR3_OVI3,
                                 ;    6489 DTCE_DMACA_DMAC0I=198,DTCE_DMACA_DMAC1I,DTCE_DMACA_DMAC2I,DTCE_DMACA_DMAC3I,
                                 ;    6490 DTCE_EXDMAC_EXDMAC0I,DTCE_EXDMAC_EXDMAC1I,
                                 ;    6491 DTCE_SCI0_ERI0=214,DTCE_SCI0_RXI0,DTCE_SCI0_TXI0,DTCE_SCI0_TEI0,
                                 ;    6492 DTCE_SCI1_ERI1,DTCE_SCI1_RXI1,DTCE_SCI1_TXI1,DTCE_SCI1_TEI1,
                                 ;    6493 DTCE_SCI2_ERI2,DTCE_SCI2_RXI2,DTCE_SCI2_TXI2,DTCE_SCI2_TEI2,
                                 ;    6494 DTCE_SCI3_ERI3,DTCE_SCI3_RXI3,DTCE_SCI3_TXI3,DTCE_SCI3_TEI3,
                                 ;    6495 DTCE_SCI5_ERI5=234,DTCE_SCI5_RXI5,DTCE_SCI5_TXI5,DTCE_SCI5_TEI5,
                                 ;    6496 DTCE_SCI6_ERI6,DTCE_SCI6_RXI6,DTCE_SCI6_TXI6,DTCE_SCI6_TEI6,
                                 ;    6497 DTCE_RIIC0_ICEEI0=246,DTCE_RIIC0_ICRXI0,DTCE_RIIC0_ICTXI0,DTCE_RIIC0_ICTEI0,
                                 ;    6498 DTCE_RIIC1_ICEEI1,DTCE_RIIC1_ICRXI1,DTCE_RIIC1_ICTXI1,DTCE_RIIC1_ICTEI1
                                 ;    6499 };
                                 ;    6500 
                                 ;    6501 enum enum_ier {
                                 ;    6502 IER_BSC_BUSERR=0x02,
                                 ;    6503 IER_FCU_FIFERR=0x02,IER_FCU_FRDYI=0x02,
                                 ;    6504 IER_ICU_SWINT=0x03,
                                 ;    6505 IER_CMT0_CMI0=0x03,
                                 ;    6506 IER_CMT1_CMI1=0x03,
                                 ;    6507 IER_CMT2_CMI2=0x03,
                                 ;    6508 IER_CMT3_CMI3=0x03,
                                 ;    6509 IER_ETHER_EINT=0x04,
                                 ;    6510 IER_USB0_D0FIFO0=0x04,IER_USB0_D1FIFO0=0x04,IER_USB0_USBI0=0x04,
                                 ;    6511 IER_USB1_D0FIFO1=0x05,IER_USB1_D1FIFO1=0x05,IER_USB1_USBI1=0x05,
                                 ;    6512 IER_RSPI0_SPEI0=0x05,IER_RSPI0_SPRI0=0x05,IER_RSPI0_SPTI0=0x05,IER_RSPI0_SPII0=0x05,
                                 ;    6513 IER_RSPI1_SPEI1=0x06,IER_RSPI1_SPRI1=0x06,IER_RSPI1_SPTI1=0x06,IER_RSPI1_SPII1=0x06,
                                 ;    6514 IER_CAN0_ERS0=0x07,IER_CAN0_RXF0=0x07,IER_CAN0_TXF0=0x07,IER_CAN0_RXM0=0x07,IER_CAN0_TXM0=0x07,
                                 ;    6515 IER_RTC_PRD=0x07,IER_RTC_CUP=0x07,
                                 ;    6516 IER_ICU_IRQ0=0x08,IER_ICU_IRQ1=0x08,IER_ICU_IRQ2=0x08,IER_ICU_IRQ3=0x08,IER_ICU_IRQ4=0x08,IER_ICU_IRQ5=0x08,IER_ICU_IRQ6=0x08,IER_ICU_IRQ7=0x08,IER_ICU_IRQ8=
                                 ;    6517 IER_USB_USBR0=0x0B,IER_USB_USBR1=0x0B,
                                 ;    6518 IER_RTC_ALM=0x0B,
                                 ;    6519 IER_WDT_WOVI=0x0C,
                                 ;    6520 IER_AD0_ADI0=0x0C,
                                 ;    6521 IER_AD1_ADI1=0x0C,
                                 ;    6522 IER_S12AD_ADI=0x0C,
                                 ;    6523 IER_MTU0_TGIA0=0x0E,IER_MTU0_TGIB0=0x0E,IER_MTU0_TGIC0=0x0E,IER_MTU0_TGID0=0x0E,IER_MTU0_TCIV0=0x0E,IER_MTU0_TGIE0=0x0E,IER_MTU0_TGIF0=0x0F,
                                 ;    6524 IER_MTU1_TGIA1=0x0F,IER_MTU1_TGIB1=0x0F,IER_MTU1_TCIV1=0x0F,IER_MTU1_TCIU1=0x0F,
                                 ;    6525 IER_MTU2_TGIA2=0x0F,IER_MTU2_TGIB2=0x0F,IER_MTU2_TCIV2=0x0F,IER_MTU2_TCIU2=0x10,
                                 ;    6526 IER_MTU3_TGIA3=0x10,IER_MTU3_TGIB3=0x10,IER_MTU3_TGIC3=0x10,IER_MTU3_TGID3=0x10,IER_MTU3_TCIV3=0x10,
                                 ;    6527 IER_MTU4_TGIA4=0x10,IER_MTU4_TGIB4=0x10,IER_MTU4_TGIC4=0x11,IER_MTU4_TGID4=0x11,IER_MTU4_TCIV4=0x11,
                                 ;    6528 IER_MTU5_TGIU5=0x11,IER_MTU5_TGIV5=0x11,IER_MTU5_TGIW5=0x10,
                                 ;    6529 IER_MTU6_TGIA6=0x11,IER_MTU6_TGIB6=0x11,IER_MTU6_TGIC6=0x12,IER_MTU6_TGID6=0x12,IER_MTU6_TCIV6=0x12,IER_MTU6_TGIE6=0x12,IER_MTU6_TGIF6=0x12,
                                 ;    6530 IER_MTU7_TGIA7=0x12,IER_MTU7_TGIB7=0x12,IER_MTU7_TCIV7=0x12,IER_MTU7_TCIU7=0x13,
                                 ;    6531 IER_MTU8_TGIA8=0x13,IER_MTU8_TGIB8=0x13,IER_MTU8_TCIV8=0x13,IER_MTU8_TCIU8=0x13,
                                 ;    6532 IER_MTU9_TGIA9=0x13,IER_MTU9_TGIB9=0x13,IER_MTU9_TGIC9=0x13,IER_MTU9_TGID9=0x14,IER_MTU9_TCIV9=0x14,
                                 ;    6533 IER_MTU10_TGIA10=0x14,IER_MTU10_TGIB10=0x14,IER_MTU10_TGIC10=0x14,IER_MTU10_TGID10=0x14,IER_MTU10_TCIV10=0x14,
                                 ;    6534 IER_MTU11_TGIU11=0x14,IER_MTU11_TGIV11=0x15,IER_MTU11_TGIW11=0x15,
                                 ;    6535 IER_POE_OEI1=0x15,IER_POE_OEI2=0x15,IER_POE_OEI3=0x15,IER_POE_OEI4=0x15,
                                 ;    6536 IER_TMR0_CMIA0=0x15,IER_TMR0_CMIB0=0x15,IER_TMR0_OVI0=0x16,
                                 ;    6537 IER_TMR1_CMIA1=0x16,IER_TMR1_CMIB1=0x16,IER_TMR1_OVI1=0x16,
                                 ;    6538 IER_TMR2_CMIA2=0x16,IER_TMR2_CMIB2=0x16,IER_TMR2_OVI2=0x16,
                                 ;    6539 IER_TMR3_CMIA3=0x16,IER_TMR3_CMIB3=0x17,IER_TMR3_OVI3=0x17,
                                 ;    6540 IER_DMACA_DMAC0I=0x18,IER_DMACA_DMAC1I=0x18,IER_DMACA_DMAC2I=0x19,IER_DMACA_DMAC3I=0x19,
                                 ;    6541 IER_EXDMAC_EXDMAC0I=0x19,IER_EXDMAC_EXDMAC1I=0x19,
                                 ;    6542 IER_SCI0_ERI0=0x1A,IER_SCI0_RXI0=0x1A,IER_SCI0_TXI0=0x1B,IER_SCI0_TEI0=0x1B,
                                 ;    6543 IER_SCI1_ERI1=0x1B,IER_SCI1_RXI1=0x1B,IER_SCI1_TXI1=0x1B,IER_SCI1_TEI1=0x1B,
                                 ;    6544 IER_SCI2_ERI2=0x1B,IER_SCI2_RXI2=0x1B,IER_SCI2_TXI2=0x1C,IER_SCI2_TEI2=0x1C,
                                 ;    6545 IER_SCI3_ERI3=0x1C,IER_SCI3_RXI3=0x1C,IER_SCI3_TXI3=0x1C,IER_SCI3_TEI3=0x1C,
                                 ;    6546 IER_SCI5_ERI5=0x1D,IER_SCI5_RXI5=0x1D,IER_SCI5_TXI5=0x1D,IER_SCI5_TEI5=0x1D,
                                 ;    6547 IER_SCI6_ERI6=0x1D,IER_SCI6_RXI6=0x1D,IER_SCI6_TXI6=0x1E,IER_SCI6_TEI6=0x1E,
                                 ;    6548 IER_RIIC0_ICEEI0=0x1E,IER_RIIC0_ICRXI0=0x1E,IER_RIIC0_ICTXI0=0x1F,IER_RIIC0_ICTEI0=0x1F,
                                 ;    6549 IER_RIIC1_ICEEI1=0x1F,IER_RIIC1_ICRXI1=0x1F,IER_RIIC1_ICTXI1=0x1F,IER_RIIC1_ICTEI1=0x1F
                                 ;    6550 };
                                 ;    6551 
                                 ;    6552 enum enum_ipr {
                                 ;    6553 IPR_BSC_BUSERR=0x00,
                                 ;    6554 IPR_FCU_FIFERR=0x01,IPR_FCU_FRDYI=0x02,
                                 ;    6555 IPR_ICU_SWINT=0x03,
                                 ;    6556 IPR_CMT0_CMI0=0x04,
                                 ;    6557 IPR_CMT1_CMI1=0x05,
                                 ;    6558 IPR_CMT2_CMI2=0x06,
                                 ;    6559 IPR_CMT3_CMI3=0x07,
                                 ;    6560 IPR_ETHER_EINT=0x08,
                                 ;    6561 IPR_USB0_D0FIFO0=0x0C,IPR_USB0_D1FIFO0=0x0D,IPR_USB0_USBI0=0x0E,
                                 ;    6562 IPR_USB1_D0FIFO1=0x10,IPR_USB1_D1FIFO1=0x11,IPR_USB1_USBI1=0x12,
                                 ;    6563 IPR_RSPI0_SPEI0=0x14,IPR_RSPI0_SPRI0=0x14,IPR_RSPI0_SPTI0=0x14,IPR_RSPI0_SPII0=0x14,
                                 ;    6564 IPR_RSPI1_SPEI1=0x15,IPR_RSPI1_SPRI1=0x15,IPR_RSPI1_SPTI1=0x15,IPR_RSPI1_SPII1=0x15,
                                 ;    6565 IPR_CAN0_ERS0=0x18,IPR_CAN0_RXF0=0x18,IPR_CAN0_TXF0=0x18,IPR_CAN0_RXM0=0x18,IPR_CAN0_TXM0=0x18,
                                 ;    6566 IPR_RTC_PRD=0x1E,IPR_RTC_CUP=0x1F,
                                 ;    6567 IPR_ICU_IRQ0=0x20,IPR_ICU_IRQ1=0x21,IPR_ICU_IRQ2=0x22,IPR_ICU_IRQ3=0x23,IPR_ICU_IRQ4=0x24,IPR_ICU_IRQ5=0x25,IPR_ICU_IRQ6=0x26,IPR_ICU_IRQ7=0x27,IPR_ICU_IRQ8=
                                 ;    6568 IPR_USB_USBR0=0x3A,IPR_USB_USBR1=0x3B,
                                 ;    6569 IPR_RTC_ALM=0x3C,
                                 ;    6570 IPR_WDT_WOVI=0x40,
                                 ;    6571 IPR_AD0_ADI0=0x44,
                                 ;    6572 IPR_AD1_ADI1=0x45,
                                 ;    6573 IPR_S12AD_ADI=0x48,
                                 ;    6574 IPR_MTU0_TGIA0=0x51,IPR_MTU0_TGIB0=0x51,IPR_MTU0_TGIC0=0x51,IPR_MTU0_TGID0=0x51,IPR_MTU0_TCIV0=0x52,IPR_MTU0_TGIE0=0x52,IPR_MTU0_TGIF0=0x52,
                                 ;    6575 IPR_MTU1_TGIA1=0x53,IPR_MTU1_TGIB1=0x53,IPR_MTU1_TCIV1=0x54,IPR_MTU1_TCIU1=0x54,
                                 ;    6576 IPR_MTU2_TGIA2=0x55,IPR_MTU2_TGIB2=0x55,IPR_MTU2_TCIV2=0x56,IPR_MTU2_TCIU2=0x56,
                                 ;    6577 IPR_MTU3_TGIA3=0x57,IPR_MTU3_TGIB3=0x57,IPR_MTU3_TGIC3=0x57,IPR_MTU3_TGID3=0x57,IPR_MTU3_TCIV3=0x58,
                                 ;    6578 IPR_MTU4_TGIA4=0x59,IPR_MTU4_TGIB4=0x59,IPR_MTU4_TGIC4=0x59,IPR_MTU4_TGID4=0x59,IPR_MTU4_TCIV4=0x5A,
                                 ;    6579 IPR_MTU5_TGIU5=0x5B,IPR_MTU5_TGIV5=0x5B,IPR_MTU5_TGIW5=0x5B,
                                 ;    6580 IPR_MTU6_TGIA6=0x5C,IPR_MTU6_TGIB6=0x5C,IPR_MTU6_TGIC6=0x5C,IPR_MTU6_TGID6=0x5C,IPR_MTU6_TCIV6=0x5D,IPR_MTU6_TGIE6=0x5D,IPR_MTU6_TGIF6=0x5D,
                                 ;    6581 IPR_MTU7_TGIA7=0x5E,IPR_MTU7_TGIB7=0x5E,IPR_MTU7_TCIV7=0x5F,IPR_MTU7_TCIU7=0x5F,
                                 ;    6582 IPR_MTU8_TGIA8=0x60,IPR_MTU8_TGIB8=0x60,IPR_MTU8_TCIV8=0x61,IPR_MTU8_TCIU8=0x61,
                                 ;    6583 IPR_MTU9_TGIA9=0x62,IPR_MTU9_TGIB9=0x62,IPR_MTU9_TGIC9=0x62,IPR_MTU9_TGID9=0x62,IPR_MTU9_TCIV9=0x63,
                                 ;    6584 IPR_MTU10_TGIA10=0x64,IPR_MTU10_TGIB10=0x64,IPR_MTU10_TGIC10=0x64,IPR_MTU10_TGID10=0x64,IPR_MTU10_TCIV10=0x65,
                                 ;    6585 IPR_MTU11_TGIU11=0x66,IPR_MTU11_TGIV11=0x66,IPR_MTU11_TGIW11=0x66,
                                 ;    6586 IPR_POE_OEI1=0x67,IPR_POE_OEI2=0x67,IPR_POE_OEI3=0x67,IPR_POE_OEI4=0x67,
                                 ;    6587 IPR_TMR0_CMIA0=0x68,IPR_TMR0_CMIB0=0x68,IPR_TMR0_OVI0=0x68,
                                 ;    6588 IPR_TMR1_CMIA1=0x69,IPR_TMR1_CMIB1=0x69,IPR_TMR1_OVI1=0x69,
                                 ;    6589 IPR_TMR2_CMIA2=0x6A,IPR_TMR2_CMIB2=0x6A,IPR_TMR2_OVI2=0x6A,
                                 ;    6590 IPR_TMR3_CMIA3=0x6B,IPR_TMR3_CMIB3=0x6B,IPR_TMR3_OVI3=0x6B,
                                 ;    6591 IPR_DMACA_DMAC0I=0x70,IPR_DMACA_DMAC1I=0x71,IPR_DMACA_DMAC2I=0x72,IPR_DMACA_DMAC3I=0x73,
                                 ;    6592 IPR_EXDMAC_EXDMAC0I=0x74,IPR_EXDMAC_EXDMAC1I=0x75,
                                 ;    6593 IPR_SCI0_ERI0=0x80,IPR_SCI0_RXI0=0x80,IPR_SCI0_TXI0=0x80,IPR_SCI0_TEI0=0x80,
                                 ;    6594 IPR_SCI1_ERI1=0x81,IPR_SCI1_RXI1=0x81,IPR_SCI1_TXI1=0x81,IPR_SCI1_TEI1=0x81,
                                 ;    6595 IPR_SCI2_ERI2=0x82,IPR_SCI2_RXI2=0x82,IPR_SCI2_TXI2=0x82,IPR_SCI2_TEI2=0x82,
                                 ;    6596 IPR_SCI3_ERI3=0x83,IPR_SCI3_RXI3=0x83,IPR_SCI3_TXI3=0x83,IPR_SCI3_TEI3=0x83,
                                 ;    6597 IPR_SCI5_ERI5=0x85,IPR_SCI5_RXI5=0x85,IPR_SCI5_TXI5=0x85,IPR_SCI5_TEI5=0x85,
                                 ;    6598 IPR_SCI6_ERI6=0x86,IPR_SCI6_RXI6=0x86,IPR_SCI6_TXI6=0x86,IPR_SCI6_TEI6=0x86,
                                 ;    6599 IPR_RIIC0_ICEEI0=0x88,IPR_RIIC0_ICRXI0=0x89,IPR_RIIC0_ICTXI0=0x8A,IPR_RIIC0_ICTEI0=0x8B,
                                 ;    6600 IPR_RIIC1_ICEEI1=0x8C,IPR_RIIC1_ICRXI1=0x8D,IPR_RIIC1_ICTXI1=0x8E,IPR_RIIC1_ICTEI1=0x8F,
                                 ;    6601 IPR_BSC_=0x00,
                                 ;    6602 IPR_CMT0_=0x04,
                                 ;    6603 IPR_CMT1_=0x05,
                                 ;    6604 IPR_CMT2_=0x06,
                                 ;    6605 IPR_CMT3_=0x07,
                                 ;    6606 IPR_ETHER_=0x08,
                                 ;    6607 IPR_RSPI0_=0x14,
                                 ;    6608 IPR_RSPI1_=0x15,
                                 ;    6609 IPR_CAN0_=0x18,
                                 ;    6610 IPR_WDT_=0x40,
                                 ;    6611 IPR_AD0_=0x44,
                                 ;    6612 IPR_AD1_=0x45,
                                 ;    6613 IPR_S12AD_=0x48,
                                 ;    6614 IPR_MTU1_TGI=0x53,
                                 ;    6615 IPR_MTU1_TCI=0x54,
                                 ;    6616 IPR_MTU2_TGI=0x55,
                                 ;    6617 IPR_MTU2_TCI=0x56,
                                 ;    6618 IPR_MTU3_TGI=0x57,
                                 ;    6619 IPR_MTU4_TGI=0x59,
                                 ;    6620 IPR_MTU5_=0x5B,
                                 ;    6621 IPR_MTU5_TGI=0x5B,
                                 ;    6622 IPR_MTU7_TGI=0x5E,
                                 ;    6623 IPR_MTU7_TCI=0x5F,
                                 ;    6624 IPR_MTU8_TGI=0x60,
                                 ;    6625 IPR_MTU8_TCI=0x61,
                                 ;    6626 IPR_MTU9_TGI=0x62,
                                 ;    6627 IPR_MTU10_TGI=0x64,
                                 ;    6628 IPR_MTU11_=0x66,
                                 ;    6629 IPR_MTU11_TGI=0x66,
                                 ;    6630 IPR_POE_=0x67,
                                 ;    6631 IPR_POE_OEI=0x67,
                                 ;    6632 IPR_TMR0_=0x68,
                                 ;    6633 IPR_TMR1_=0x69,
                                 ;    6634 IPR_TMR2_=0x6A,
                                 ;    6635 IPR_TMR3_=0x6B,
                                 ;    6636 IPR_SCI0_=0x80,
                                 ;    6637 IPR_SCI1_=0x81,
                                 ;    6638 IPR_SCI2_=0x82,
                                 ;    6639 IPR_SCI3_=0x83,
                                 ;    6640 IPR_SCI5_=0x85,
                                 ;    6641 IPR_SCI6_=0x86
                                 ;    6642 };
                                 ;    6643 
                                 ;    6644 #define	IEN_BSC_BUSERR		IEN0
                                 ;    6645 #define	IEN_FCU_FIFERR		IEN5
                                 ;    6646 #define	IEN_FCU_FRDYI		IEN7
                                 ;    6647 #define	IEN_ICU_SWINT		IEN3
                                 ;    6648 #define	IEN_CMT0_CMI0		IEN4
                                 ;    6649 #define	IEN_CMT1_CMI1		IEN5
                                 ;    6650 #define	IEN_CMT2_CMI2		IEN6
                                 ;    6651 #define	IEN_CMT3_CMI3		IEN7
                                 ;    6652 #define	IEN_ETHER_EINT		IEN0
                                 ;    6653 #define	IEN_USB0_D0FIFO0	IEN4
                                 ;    6654 #define	IEN_USB0_D1FIFO0	IEN5
                                 ;    6655 #define	IEN_USB0_USBI0		IEN6
                                 ;    6656 #define	IEN_USB1_D0FIFO1	IEN0
                                 ;    6657 #define	IEN_USB1_D1FIFO1	IEN1
                                 ;    6658 #define	IEN_USB1_USBI1		IEN2
                                 ;    6659 #define	IEN_RSPI0_SPEI0		IEN4
                                 ;    6660 #define	IEN_RSPI0_SPRI0		IEN5
                                 ;    6661 #define	IEN_RSPI0_SPTI0		IEN6
                                 ;    6662 #define	IEN_RSPI0_SPII0		IEN7
                                 ;    6663 #define	IEN_RSPI1_SPEI1		IEN0
                                 ;    6664 #define	IEN_RSPI1_SPRI1		IEN1
                                 ;    6665 #define	IEN_RSPI1_SPTI1		IEN2
                                 ;    6666 #define	IEN_RSPI1_SPII1		IEN3
                                 ;    6667 #define	IEN_CAN0_ERS0		IEN0
                                 ;    6668 #define	IEN_CAN0_RXF0		IEN1
                                 ;    6669 #define	IEN_CAN0_TXF0		IEN2
                                 ;    6670 #define	IEN_CAN0_RXM0		IEN3
                                 ;    6671 #define	IEN_CAN0_TXM0		IEN4
                                 ;    6672 #define	IEN_RTC_PRD			IEN6
                                 ;    6673 #define	IEN_RTC_CUP			IEN7
                                 ;    6674 #define	IEN_ICU_IRQ0		IEN0
                                 ;    6675 #define	IEN_ICU_IRQ1		IEN1
                                 ;    6676 #define	IEN_ICU_IRQ2		IEN2
                                 ;    6677 #define	IEN_ICU_IRQ3		IEN3
                                 ;    6678 #define	IEN_ICU_IRQ4		IEN4
                                 ;    6679 #define	IEN_ICU_IRQ5		IEN5
                                 ;    6680 #define	IEN_ICU_IRQ6		IEN6
                                 ;    6681 #define	IEN_ICU_IRQ7		IEN7
                                 ;    6682 #define	IEN_ICU_IRQ8		IEN0
                                 ;    6683 #define	IEN_ICU_IRQ9		IEN1
                                 ;    6684 #define	IEN_ICU_IRQ10		IEN2
                                 ;    6685 #define	IEN_ICU_IRQ11		IEN3
                                 ;    6686 #define	IEN_ICU_IRQ12		IEN4
                                 ;    6687 #define	IEN_ICU_IRQ13		IEN5
                                 ;    6688 #define	IEN_ICU_IRQ14		IEN6
                                 ;    6689 #define	IEN_ICU_IRQ15		IEN7
                                 ;    6690 #define	IEN_USB_USBR0		IEN2
                                 ;    6691 #define	IEN_USB_USBR1		IEN3
                                 ;    6692 #define	IEN_RTC_ALM			IEN4
                                 ;    6693 #define	IEN_WDT_WOVI		IEN0
                                 ;    6694 #define	IEN_AD0_ADI0		IEN2
                                 ;    6695 #define	IEN_AD1_ADI1		IEN3
                                 ;    6696 #define	IEN_S12AD_ADI		IEN6
                                 ;    6697 #define	IEN_MTU0_TGIA0		IEN2
                                 ;    6698 #define	IEN_MTU0_TGIB0		IEN3
                                 ;    6699 #define	IEN_MTU0_TGIC0		IEN4
                                 ;    6700 #define	IEN_MTU0_TGID0		IEN5
                                 ;    6701 #define	IEN_MTU0_TCIV0		IEN6
                                 ;    6702 #define	IEN_MTU0_TGIE0		IEN7
                                 ;    6703 #define	IEN_MTU0_TGIF0		IEN0
                                 ;    6704 #define	IEN_MTU1_TGIA1		IEN1
                                 ;    6705 #define	IEN_MTU1_TGIB1		IEN2
                                 ;    6706 #define	IEN_MTU1_TCIV1		IEN3
                                 ;    6707 #define	IEN_MTU1_TCIU1		IEN4
                                 ;    6708 #define	IEN_MTU2_TGIA2		IEN5
                                 ;    6709 #define	IEN_MTU2_TGIB2		IEN6
                                 ;    6710 #define	IEN_MTU2_TCIV2		IEN7
                                 ;    6711 #define	IEN_MTU2_TCIU2		IEN0
                                 ;    6712 #define	IEN_MTU3_TGIA3		IEN1
                                 ;    6713 #define	IEN_MTU3_TGIB3		IEN2
                                 ;    6714 #define	IEN_MTU3_TGIC3		IEN3
                                 ;    6715 #define	IEN_MTU3_TGID3		IEN4
                                 ;    6716 #define	IEN_MTU3_TCIV3		IEN5
                                 ;    6717 #define	IEN_MTU4_TGIA4		IEN6
                                 ;    6718 #define	IEN_MTU4_TGIB4		IEN7
                                 ;    6719 #define	IEN_MTU4_TGIC4		IEN0
                                 ;    6720 #define	IEN_MTU4_TGID4		IEN1
                                 ;    6721 #define	IEN_MTU4_TCIV4		IEN2
                                 ;    6722 #define	IEN_MTU5_TGIU5		IEN3
                                 ;    6723 #define	IEN_MTU5_TGIV5		IEN4
                                 ;    6724 #define	IEN_MTU5_TGIW5		IEN7
                                 ;    6725 #define	IEN_MTU6_TGIA6		IEN6
                                 ;    6726 #define	IEN_MTU6_TGIB6		IEN7
                                 ;    6727 #define	IEN_MTU6_TGIC6		IEN0
                                 ;    6728 #define	IEN_MTU6_TGID6		IEN1
                                 ;    6729 #define	IEN_MTU6_TCIV6		IEN2
                                 ;    6730 #define	IEN_MTU6_TGIE6		IEN3
                                 ;    6731 #define	IEN_MTU6_TGIF6		IEN4
                                 ;    6732 #define	IEN_MTU7_TGIA7		IEN5
                                 ;    6733 #define	IEN_MTU7_TGIB7		IEN6
                                 ;    6734 #define	IEN_MTU7_TCIV7		IEN7
                                 ;    6735 #define	IEN_MTU7_TCIU7		IEN0
                                 ;    6736 #define	IEN_MTU8_TGIA8		IEN1
                                 ;    6737 #define	IEN_MTU8_TGIB8		IEN2
                                 ;    6738 #define	IEN_MTU8_TCIV8		IEN3
                                 ;    6739 #define	IEN_MTU8_TCIU8		IEN4
                                 ;    6740 #define	IEN_MTU9_TGIA9		IEN5
                                 ;    6741 #define	IEN_MTU9_TGIB9		IEN6
                                 ;    6742 #define	IEN_MTU9_TGIC9		IEN7
                                 ;    6743 #define	IEN_MTU9_TGID9		IEN0
                                 ;    6744 #define	IEN_MTU9_TCIV9		IEN1
                                 ;    6745 #define	IEN_MTU10_TGIA10	IEN2
                                 ;    6746 #define	IEN_MTU10_TGIB10	IEN3
                                 ;    6747 #define	IEN_MTU10_TGIC10	IEN4
                                 ;    6748 #define	IEN_MTU10_TGID10	IEN5
                                 ;    6749 #define	IEN_MTU10_TCIV10	IEN6
                                 ;    6750 #define	IEN_MTU11_TGIU11	IEN7
                                 ;    6751 #define	IEN_MTU11_TGIV11	IEN0
                                 ;    6752 #define	IEN_MTU11_TGIW11	IEN1
                                 ;    6753 #define	IEN_POE_OEI1		IEN2
                                 ;    6754 #define	IEN_POE_OEI2		IEN3
                                 ;    6755 #define	IEN_POE_OEI3		IEN4
                                 ;    6756 #define	IEN_POE_OEI4		IEN5
                                 ;    6757 #define	IEN_TMR0_CMIA0		IEN6
                                 ;    6758 #define	IEN_TMR0_CMIB0		IEN7
                                 ;    6759 #define	IEN_TMR0_OVI0		IEN0
                                 ;    6760 #define	IEN_TMR1_CMIA1		IEN1
                                 ;    6761 #define	IEN_TMR1_CMIB1		IEN2
                                 ;    6762 #define	IEN_TMR1_OVI1		IEN3
                                 ;    6763 #define	IEN_TMR2_CMIA2		IEN4
                                 ;    6764 #define	IEN_TMR2_CMIB2		IEN5
                                 ;    6765 #define	IEN_TMR2_OVI2		IEN6
                                 ;    6766 #define	IEN_TMR3_CMIA3		IEN7
                                 ;    6767 #define	IEN_TMR3_CMIB3		IEN0
                                 ;    6768 #define	IEN_TMR3_OVI3		IEN1
                                 ;    6769 #define	IEN_DMACA_DMAC0I	IEN6
                                 ;    6770 #define	IEN_DMACA_DMAC1I	IEN7
                                 ;    6771 #define	IEN_DMACA_DMAC2I	IEN0
                                 ;    6772 #define	IEN_DMACA_DMAC3I	IEN1
                                 ;    6773 #define	IEN_EXDMAC_EXDMAC0I	IEN2
                                 ;    6774 #define	IEN_EXDMAC_EXDMAC1I	IEN3
                                 ;    6775 #define	IEN_SCI0_ERI0		IEN6
                                 ;    6776 #define	IEN_SCI0_RXI0		IEN7
                                 ;    6777 #define	IEN_SCI0_TXI0		IEN0
                                 ;    6778 #define	IEN_SCI0_TEI0		IEN1
                                 ;    6779 #define	IEN_SCI1_ERI1		IEN2
                                 ;    6780 #define	IEN_SCI1_RXI1		IEN3
                                 ;    6781 #define	IEN_SCI1_TXI1		IEN4
                                 ;    6782 #define	IEN_SCI1_TEI1		IEN5
                                 ;    6783 #define	IEN_SCI2_ERI2		IEN6
                                 ;    6784 #define	IEN_SCI2_RXI2		IEN7
                                 ;    6785 #define	IEN_SCI2_TXI2		IEN0
                                 ;    6786 #define	IEN_SCI2_TEI2		IEN1
                                 ;    6787 #define	IEN_SCI3_ERI3		IEN2
                                 ;    6788 #define	IEN_SCI3_RXI3		IEN3
                                 ;    6789 #define	IEN_SCI3_TXI3		IEN4
                                 ;    6790 #define	IEN_SCI3_TEI3		IEN5
                                 ;    6791 #define	IEN_SCI5_ERI5		IEN2
                                 ;    6792 #define	IEN_SCI5_RXI5		IEN3
                                 ;    6793 #define	IEN_SCI5_TXI5		IEN4
                                 ;    6794 #define	IEN_SCI5_TEI5		IEN5
                                 ;    6795 #define	IEN_SCI6_ERI6		IEN6
                                 ;    6796 #define	IEN_SCI6_RXI6		IEN7
                                 ;    6797 #define	IEN_SCI6_TXI6		IEN0
                                 ;    6798 #define	IEN_SCI6_TEI6		IEN1
                                 ;    6799 #define	IEN_RIIC0_ICEEI0	IEN6
                                 ;    6800 #define	IEN_RIIC0_ICRXI0	IEN7
                                 ;    6801 #define	IEN_RIIC0_ICTXI0	IEN0
                                 ;    6802 #define	IEN_RIIC0_ICTEI0	IEN1
                                 ;    6803 #define	IEN_RIIC1_ICEEI1	IEN2
                                 ;    6804 #define	IEN_RIIC1_ICRXI1	IEN3
                                 ;    6805 #define	IEN_RIIC1_ICTXI1	IEN4
                                 ;    6806 #define	IEN_RIIC1_ICTEI1	IEN5
                                 ;    6807 
                                 ;    6808 #define	VECT_BSC_BUSERR		16
                                 ;    6809 #define	VECT_FCU_FIFERR		21
                                 ;    6810 #define	VECT_FCU_FRDYI		23
                                 ;    6811 #define	VECT_ICU_SWINT		27
                                 ;    6812 #define	VECT_CMT0_CMI0		28
                                 ;    6813 #define	VECT_CMT1_CMI1		29
                                 ;    6814 #define	VECT_CMT2_CMI2		30
                                 ;    6815 #define	VECT_CMT3_CMI3		31
                                 ;    6816 #define	VECT_ETHER_EINT		32
                                 ;    6817 #define	VECT_USB0_D0FIFO0	36
                                 ;    6818 #define	VECT_USB0_D1FIFO0	37
                                 ;    6819 #define	VECT_USB0_USBI0		38
                                 ;    6820 #define	VECT_USB1_D0FIFO1	40
                                 ;    6821 #define	VECT_USB1_D1FIFO1	41
                                 ;    6822 #define	VECT_USB1_USBI1		42
                                 ;    6823 #define	VECT_RSPI0_SPEI0	44
                                 ;    6824 #define	VECT_RSPI0_SPRI0	45
                                 ;    6825 #define	VECT_RSPI0_SPTI0	46
                                 ;    6826 #define	VECT_RSPI0_SPII0	47
                                 ;    6827 #define	VECT_RSPI1_SPEI1	48
                                 ;    6828 #define	VECT_RSPI1_SPRI1	49
                                 ;    6829 #define	VECT_RSPI1_SPTI1	50
                                 ;    6830 #define	VECT_RSPI1_SPII1	51
                                 ;    6831 #define	VECT_CAN0_ERS0		56
                                 ;    6832 #define	VECT_CAN0_RXF0		57
                                 ;    6833 #define	VECT_CAN0_TXF0		58
                                 ;    6834 #define	VECT_CAN0_RXM0		59
                                 ;    6835 #define	VECT_CAN0_TXM0		60
                                 ;    6836 #define	VECT_RTC_PRD		62
                                 ;    6837 #define	VECT_RTC_CUP		63
                                 ;    6838 #define	VECT_ICU_IRQ0		64
                                 ;    6839 #define	VECT_ICU_IRQ1		65
                                 ;    6840 #define	VECT_ICU_IRQ2		66
                                 ;    6841 #define	VECT_ICU_IRQ3		67
                                 ;    6842 #define	VECT_ICU_IRQ4		68
                                 ;    6843 #define	VECT_ICU_IRQ5		69
                                 ;    6844 #define	VECT_ICU_IRQ6		70
                                 ;    6845 #define	VECT_ICU_IRQ7		71
                                 ;    6846 #define	VECT_ICU_IRQ8		72
                                 ;    6847 #define	VECT_ICU_IRQ9		73
                                 ;    6848 #define	VECT_ICU_IRQ10		74
                                 ;    6849 #define	VECT_ICU_IRQ11		75
                                 ;    6850 #define	VECT_ICU_IRQ12		76
                                 ;    6851 #define	VECT_ICU_IRQ13		77
                                 ;    6852 #define	VECT_ICU_IRQ14		78
                                 ;    6853 #define	VECT_ICU_IRQ15		79
                                 ;    6854 #define	VECT_USB_USBR0		90
                                 ;    6855 #define	VECT_USB_USBR1		91
                                 ;    6856 #define	VECT_RTC_ALM		92
                                 ;    6857 #define	VECT_WDT_WOVI		96
                                 ;    6858 #define	VECT_AD0_ADI0		98
                                 ;    6859 #define	VECT_AD1_ADI1		99
                                 ;    6860 #define	VECT_S12AD_ADI		102
                                 ;    6861 #define	VECT_MTU0_TGIA0		114
                                 ;    6862 #define	VECT_MTU0_TGIB0		115
                                 ;    6863 #define	VECT_MTU0_TGIC0		116
                                 ;    6864 #define	VECT_MTU0_TGID0		117
                                 ;    6865 #define	VECT_MTU0_TCIV0		118
                                 ;    6866 #define	VECT_MTU0_TGIE0		119
                                 ;    6867 #define	VECT_MTU0_TGIF0		120
                                 ;    6868 #define	VECT_MTU1_TGIA1		121
                                 ;    6869 #define	VECT_MTU1_TGIB1		122
                                 ;    6870 #define	VECT_MTU1_TCIV1		123
                                 ;    6871 #define	VECT_MTU1_TCIU1		124
                                 ;    6872 #define	VECT_MTU2_TGIA2		125
                                 ;    6873 #define	VECT_MTU2_TGIB2		126
                                 ;    6874 #define	VECT_MTU2_TCIV2		127
                                 ;    6875 #define	VECT_MTU2_TCIU2		128
                                 ;    6876 #define	VECT_MTU3_TGIA3		129
                                 ;    6877 #define	VECT_MTU3_TGIB3		130
                                 ;    6878 #define	VECT_MTU3_TGIC3		131
                                 ;    6879 #define	VECT_MTU3_TGID3		132
                                 ;    6880 #define	VECT_MTU3_TCIV3		133
                                 ;    6881 #define	VECT_MTU4_TGIA4		134
                                 ;    6882 #define	VECT_MTU4_TGIB4		135
                                 ;    6883 #define	VECT_MTU4_TGIC4		136
                                 ;    6884 #define	VECT_MTU4_TGID4		137
                                 ;    6885 #define	VECT_MTU4_TCIV4		138
                                 ;    6886 #define	VECT_MTU5_TGIU5		139
                                 ;    6887 #define	VECT_MTU5_TGIV5		140
                                 ;    6888 #define	VECT_MTU5_TGIW5		141
                                 ;    6889 #define	VECT_MTU6_TGIA6		142
                                 ;    6890 #define	VECT_MTU6_TGIB6		143
                                 ;    6891 #define	VECT_MTU6_TGIC6		144
                                 ;    6892 #define	VECT_MTU6_TGID6		145
                                 ;    6893 #define	VECT_MTU6_TCIV6		146
                                 ;    6894 #define	VECT_MTU6_TGIE6		147
                                 ;    6895 #define	VECT_MTU6_TGIF6		148
                                 ;    6896 #define	VECT_MTU7_TGIA7		149
                                 ;    6897 #define	VECT_MTU7_TGIB7		150
                                 ;    6898 #define	VECT_MTU7_TCIV7		151
                                 ;    6899 #define	VECT_MTU7_TCIU7		152
                                 ;    6900 #define	VECT_MTU8_TGIA8		153
                                 ;    6901 #define	VECT_MTU8_TGIB8		154
                                 ;    6902 #define	VECT_MTU8_TCIV8		155
                                 ;    6903 #define	VECT_MTU8_TCIU8		156
                                 ;    6904 #define	VECT_MTU9_TGIA9		157
                                 ;    6905 #define	VECT_MTU9_TGIB9		158
                                 ;    6906 #define	VECT_MTU9_TGIC9		159
                                 ;    6907 #define	VECT_MTU9_TGID9		160
                                 ;    6908 #define	VECT_MTU9_TCIV9		161
                                 ;    6909 #define	VECT_MTU10_TGIA10	162
                                 ;    6910 #define	VECT_MTU10_TGIB10	163
                                 ;    6911 #define	VECT_MTU10_TGIC10	164
                                 ;    6912 #define	VECT_MTU10_TGID10	165
                                 ;    6913 #define	VECT_MTU10_TCIV10	166
                                 ;    6914 #define	VECT_MTU11_TGIU11	167
                                 ;    6915 #define	VECT_MTU11_TGIV11	168
                                 ;    6916 #define	VECT_MTU11_TGIW11	169
                                 ;    6917 #define	VECT_POE_OEI1		170
                                 ;    6918 #define	VECT_POE_OEI2		171
                                 ;    6919 #define	VECT_POE_OEI3		172
                                 ;    6920 #define	VECT_POE_OEI4		173
                                 ;    6921 #define	VECT_TMR0_CMIA0		174
                                 ;    6922 #define	VECT_TMR0_CMIB0		175
                                 ;    6923 #define	VECT_TMR0_OVI0		176
                                 ;    6924 #define	VECT_TMR1_CMIA1		177
                                 ;    6925 #define	VECT_TMR1_CMIB1		178
                                 ;    6926 #define	VECT_TMR1_OVI1		179
                                 ;    6927 #define	VECT_TMR2_CMIA2		180
                                 ;    6928 #define	VECT_TMR2_CMIB2		181
                                 ;    6929 #define	VECT_TMR2_OVI2		182
                                 ;    6930 #define	VECT_TMR3_CMIA3		183
                                 ;    6931 #define	VECT_TMR3_CMIB3		184
                                 ;    6932 #define	VECT_TMR3_OVI3		185
                                 ;    6933 #define	VECT_DMACA_DMAC0I	198
                                 ;    6934 #define	VECT_DMACA_DMAC1I	199
                                 ;    6935 #define	VECT_DMACA_DMAC2I	200
                                 ;    6936 #define	VECT_DMACA_DMAC3I	201
                                 ;    6937 #define	VECT_EXDMAC_EXDMAC0I	202
                                 ;    6938 #define	VECT_EXDMAC_EXDMAC1I	203
                                 ;    6939 #define	VECT_SCI0_ERI0		214
                                 ;    6940 #define	VECT_SCI0_RXI0		215
                                 ;    6941 #define	VECT_SCI0_TXI0		216
                                 ;    6942 #define	VECT_SCI0_TEI0		217
                                 ;    6943 #define	VECT_SCI1_ERI1		218
                                 ;    6944 #define	VECT_SCI1_RXI1		219
                                 ;    6945 #define	VECT_SCI1_TXI1		220
                                 ;    6946 #define	VECT_SCI1_TEI1		221
                                 ;    6947 #define	VECT_SCI2_ERI2		222
                                 ;    6948 #define	VECT_SCI2_RXI2		223
                                 ;    6949 #define	VECT_SCI2_TXI2		224
                                 ;    6950 #define	VECT_SCI2_TEI2		225
                                 ;    6951 #define	VECT_SCI3_ERI3		226
                                 ;    6952 #define	VECT_SCI3_RXI3		227
                                 ;    6953 #define	VECT_SCI3_TXI3		228
                                 ;    6954 #define	VECT_SCI3_TEI3		229
                                 ;    6955 #define	VECT_SCI5_ERI5		234
                                 ;    6956 #define	VECT_SCI5_RXI5		235
                                 ;    6957 #define	VECT_SCI5_TXI5		236
                                 ;    6958 #define	VECT_SCI5_TEI5		237
                                 ;    6959 #define	VECT_SCI6_ERI6		238
                                 ;    6960 #define	VECT_SCI6_RXI6		239
                                 ;    6961 #define	VECT_SCI6_TXI6		240
                                 ;    6962 #define	VECT_SCI6_TEI6		241
                                 ;    6963 #define	VECT_RIIC0_ICEEI0	246
                                 ;    6964 #define	VECT_RIIC0_ICRXI0	247
                                 ;    6965 #define	VECT_RIIC0_ICTXI0	248
                                 ;    6966 #define	VECT_RIIC0_ICTEI0	249
                                 ;    6967 #define	VECT_RIIC1_ICEEI1	250
                                 ;    6968 #define	VECT_RIIC1_ICRXI1	251
                                 ;    6969 #define	VECT_RIIC1_ICTXI1	252
                                 ;    6970 #define	VECT_RIIC1_ICTEI1	253
                                 ;    6971 
                                 ;    6972 #define	MSTP_EXDMAC	SYSTEM.MSTPCRA.BIT.MSTPA29
                                 ;    6973 #define	MSTP_DMACA	SYSTEM.MSTPCRA.BIT.MSTPA28
                                 ;    6974 #define	MSTP_DTC	SYSTEM.MSTPCRA.BIT.MSTPA28
                                 ;    6975 #define	MSTP_AD0	SYSTEM.MSTPCRA.BIT.MSTPA23
                                 ;    6976 #define	MSTP_AD1	SYSTEM.MSTPCRA.BIT.MSTPA22
                                 ;    6977 #define	MSTP_DA		SYSTEM.MSTPCRA.BIT.MSTPA19
                                 ;    6978 #define	MSTP_S12AD	SYSTEM.MSTPCRA.BIT.MSTPA17
                                 ;    6979 #define	MSTP_CMT0	SYSTEM.MSTPCRA.BIT.MSTPA15
                                 ;    6980 #define	MSTP_CMT1	SYSTEM.MSTPCRA.BIT.MSTPA15
                                 ;    6981 #define	MSTP_CMT2	SYSTEM.MSTPCRA.BIT.MSTPA14
                                 ;    6982 #define	MSTP_CMT3	SYSTEM.MSTPCRA.BIT.MSTPA14
                                 ;    6983 #define	MSTP_PPG0	SYSTEM.MSTPCRA.BIT.MSTPA11
                                 ;    6984 #define	MSTP_PPG1	SYSTEM.MSTPCRA.BIT.MSTPA10
                                 ;    6985 #define	MSTP_MTUA	SYSTEM.MSTPCRA.BIT.MSTPA9
                                 ;    6986 #define	MSTP_MTU0	SYSTEM.MSTPCRA.BIT.MSTPA9
                                 ;    6987 #define	MSTP_MTU1	SYSTEM.MSTPCRA.BIT.MSTPA9
                                 ;    6988 #define	MSTP_MTU2	SYSTEM.MSTPCRA.BIT.MSTPA9
                                 ;    6989 #define	MSTP_MTU3	SYSTEM.MSTPCRA.BIT.MSTPA9
                                 ;    6990 #define	MSTP_MTU4	SYSTEM.MSTPCRA.BIT.MSTPA9
                                 ;    6991 #define	MSTP_MTU5	SYSTEM.MSTPCRA.BIT.MSTPA9
                                 ;    6992 #define	MSTP_MTUB	SYSTEM.MSTPCRA.BIT.MSTPA8
                                 ;    6993 #define	MSTP_MTU6	SYSTEM.MSTPCRA.BIT.MSTPA8
                                 ;    6994 #define	MSTP_MTU7	SYSTEM.MSTPCRA.BIT.MSTPA8
                                 ;    6995 #define	MSTP_MTU8	SYSTEM.MSTPCRA.BIT.MSTPA8
                                 ;    6996 #define	MSTP_MTU9	SYSTEM.MSTPCRA.BIT.MSTPA8
                                 ;    6997 #define	MSTP_MTU10	SYSTEM.MSTPCRA.BIT.MSTPA8
                                 ;    6998 #define	MSTP_MTU11	SYSTEM.MSTPCRA.BIT.MSTPA8
                                 ;    6999 #define	MSTP_TMR0	SYSTEM.MSTPCRA.BIT.MSTPA5
                                 ;    7000 #define	MSTP_TMR1	SYSTEM.MSTPCRA.BIT.MSTPA5
                                 ;    7001 #define	MSTP_TMR01	SYSTEM.MSTPCRA.BIT.MSTPA5
                                 ;    7002 #define	MSTP_TMR2	SYSTEM.MSTPCRA.BIT.MSTPA4
                                 ;    7003 #define	MSTP_TMR3	SYSTEM.MSTPCRA.BIT.MSTPA4
                                 ;    7004 #define	MSTP_TMR23	SYSTEM.MSTPCRA.BIT.MSTPA4
                                 ;    7005 #define	MSTP_SCI0	SYSTEM.MSTPCRB.BIT.MSTPB31
                                 ;    7006 #define	MSTP_SMCI0	SYSTEM.MSTPCRB.BIT.MSTPB31
                                 ;    7007 #define	MSTP_SCI1	SYSTEM.MSTPCRB.BIT.MSTPB30
                                 ;    7008 #define	MSTP_SMCI1	SYSTEM.MSTPCRB.BIT.MSTPB30
                                 ;    7009 #define	MSTP_SCI2	SYSTEM.MSTPCRB.BIT.MSTPB29
                                 ;    7010 #define	MSTP_SMCI2	SYSTEM.MSTPCRB.BIT.MSTPB29
                                 ;    7011 #define	MSTP_SCI3	SYSTEM.MSTPCRB.BIT.MSTPB28
                                 ;    7012 #define	MSTP_SMCI3	SYSTEM.MSTPCRB.BIT.MSTPB28
                                 ;    7013 #define	MSTP_SCI5	SYSTEM.MSTPCRB.BIT.MSTPB26
                                 ;    7014 #define	MSTP_SMCI5	SYSTEM.MSTPCRB.BIT.MSTPB26
                                 ;    7015 #define	MSTP_SCI6	SYSTEM.MSTPCRB.BIT.MSTPB25
                                 ;    7016 #define	MSTP_SMCI6	SYSTEM.MSTPCRB.BIT.MSTPB25
                                 ;    7017 #define	MSTP_CRC	SYSTEM.MSTPCRB.BIT.MSTPB23
                                 ;    7018 #define	MSTP_RIIC0	SYSTEM.MSTPCRB.BIT.MSTPB21
                                 ;    7019 #define	MSTP_RIIC1	SYSTEM.MSTPCRB.BIT.MSTPB20
                                 ;    7020 #define	MSTP_USB0	SYSTEM.MSTPCRB.BIT.MSTPB19
                                 ;    7021 #define	MSTP_USB1	SYSTEM.MSTPCRB.BIT.MSTPB18
                                 ;    7022 #define	MSTP_RSPI0	SYSTEM.MSTPCRB.BIT.MSTPB17
                                 ;    7023 #define	MSTP_RSPI1	SYSTEM.MSTPCRB.BIT.MSTPB16
                                 ;    7024 #define	MSTP_EDMAC	SYSTEM.MSTPCRB.BIT.MSTPB15
                                 ;    7025 #define	MSTP_CAN0	SYSTEM.MSTPCRB.BIT.MSTPB0
                                 ;    7026 #define	MSTP_RAM0	SYSTEM.MSTPCRC.BIT.MSTPC1
                                 ;    7027 #define	MSTP_RAM1	SYSTEM.MSTPCRC.BIT.MSTPC0
                                 ;    7028 
                                 ;    7029 #define	__IR( x )		ICU.IR[ IR ## x ].BIT.IR
                                 ;    7030 #define	 _IR( x )		__IR( x )
                                 ;    7031 #define	  IR( x , y )	_IR( _ ## x ## _ ## y )
                                 ;    7032 #define	__DTCE( x )		ICU.DTCER[ DTCE ## x ].BIT.DTCE
                                 ;    7033 #define	 _DTCE( x )		__DTCE( x )
                                 ;    7034 #define	  DTCE( x , y )	_DTCE( _ ## x ## _ ## y )
                                 ;    7035 #define	__IEN( x )		ICU.IER[ IER ## x ].BIT.IEN ## x
                                 ;    7036 #define	 _IEN( x )		__IEN( x )
                                 ;    7037 #define	  IEN( x , y )	_IEN( _ ## x ## _ ## y )
                                 ;    7038 #define	__IPR( x )		ICU.IPR[ IPR ## x ].BIT.IPR
                                 ;    7039 #define	 _IPR( x )		__IPR( x )
                                 ;    7040 #define	  IPR( x , y )	_IPR( _ ## x ## _ ## y )
                                 ;    7041 #define	__VECT( x )		VECT ## x
                                 ;    7042 #define	 _VECT( x )		__VECT( x )
                                 ;    7043 #define	  VECT( x , y )	_VECT( _ ## x ## _ ## y )
                                 ;    7044 #define	__MSTP( x )		MSTP ## x
                                 ;    7045 #define	 _MSTP( x )		__MSTP( x )
                                 ;    7046 #define	  MSTP( x )		_MSTP( _ ## x )
                                 ;    7047 
                                 ;    7048 #define SYSTEM (*(volatile struct st_system __evenaccess *)0x80000)
                                 ;    7049 #define BSC (*(volatile struct st_bsc __evenaccess *)0x81300)
                                 ;    7050 #define DMAC0 (*(volatile struct st_dmac0 __evenaccess *)0x82000)
                                 ;    7051 #define DMAC1 (*(volatile struct st_dmac1 __evenaccess *)0x82040)
                                 ;    7052 #define DMAC2 (*(volatile struct st_dmac1 __evenaccess *)0x82080)
                                 ;    7053 #define DMAC3 (*(volatile struct st_dmac1 __evenaccess *)0x820C0)
                                 ;    7054 #define DMAC (*(volatile struct st_dmac __evenaccess *)0x82200)
                                 ;    7055 #define DTC (*(volatile struct st_dtc __evenaccess *)0x82400)
                                 ;    7056 #define EXDMAC0 (*(volatile struct st_exdmac0 __evenaccess *)0x82800)
                                 ;    7057 #define EXDMAC1 (*(volatile struct st_exdmac0 __evenaccess *)0x82840)
                                 ;    7058 #define EXDMAC (*(volatile struct st_exdmac __evenaccess *)0x82A00)
                                 ;    7059 #define ICU (*(volatile struct st_icu __evenaccess *)0x87000)
                                 ;    7060 #define CMT (*(volatile struct st_cmt __evenaccess *)0x88000)
                                 ;    7061 #define CMT0 (*(volatile struct st_cmt0 __evenaccess *)0x88002)
                                 ;    7062 #define CMT1 (*(volatile struct st_cmt0 __evenaccess *)0x88008)
                                 ;    7063 #define CMT2 (*(volatile struct st_cmt0 __evenaccess *)0x88012)
                                 ;    7064 #define CMT3 (*(volatile struct st_cmt0 __evenaccess *)0x88018)
                                 ;    7065 #define WDT (*(volatile union un_wdt __evenaccess *)0x88028)
                                 ;    7066 #define IWDT (*(volatile struct st_iwdt __evenaccess *)0x88030)
                                 ;    7067 #define AD0 (*(volatile struct st_ad __evenaccess *)0x88040)
                                 ;    7068 #define AD1 (*(volatile struct st_ad __evenaccess *)0x88060)
                                 ;    7069 #define DA (*(volatile struct st_da __evenaccess *)0x880C0)
                                 ;    7070 #define PPG0 (*(volatile struct st_ppg0 __evenaccess *)0x881E6)
                                 ;    7071 #define PPG1 (*(volatile struct st_ppg1 __evenaccess *)0x881F0)
                                 ;    7072 #define TMR0 (*(volatile struct st_tmr0 __evenaccess *)0x88200)
                                 ;    7073 #define TMR1 (*(volatile struct st_tmr1 __evenaccess *)0x88201)
                                 ;    7074 #define TMR01 (*(volatile struct st_tmr01 __evenaccess *)0x88204)
                                 ;    7075 #define TMR2 (*(volatile struct st_tmr0 __evenaccess *)0x88210)
                                 ;    7076 #define TMR3 (*(volatile struct st_tmr1 __evenaccess *)0x88211)
                                 ;    7077 #define TMR23 (*(volatile struct st_tmr01 __evenaccess *)0x88214)
                                 ;    7078 #define SCI0 (*(volatile struct st_sci __evenaccess *)0x88240)
                                 ;    7079 #define SCI1 (*(volatile struct st_sci __evenaccess *)0x88248)
                                 ;    7080 #define SCI2 (*(volatile struct st_sci __evenaccess *)0x88250)
                                 ;    7081 #define SCI3 (*(volatile struct st_sci __evenaccess *)0x88258)
                                 ;    7082 #define SCI5 (*(volatile struct st_sci __evenaccess *)0x88268)
                                 ;    7083 #define SCI6 (*(volatile struct st_sci __evenaccess *)0x88270)
                                 ;    7084 #define SMCI0 (*(volatile struct st_smci __evenaccess *)0x88240)
                                 ;    7085 #define SMCI1 (*(volatile struct st_smci __evenaccess *)0x88248)
                                 ;    7086 #define SMCI2 (*(volatile struct st_smci __evenaccess *)0x88250)
                                 ;    7087 #define SMCI3 (*(volatile struct st_smci __evenaccess *)0x88258)
                                 ;    7088 #define SMCI5 (*(volatile struct st_smci __evenaccess *)0x88268)
                                 ;    7089 #define SMCI6 (*(volatile struct st_smci __evenaccess *)0x88270)
                                 ;    7090 #define CRC (*(volatile struct st_crc __evenaccess *)0x88280)
                                 ;    7091 #define RIIC0 (*(volatile struct st_riic __evenaccess *)0x88300)
                                 ;    7092 #define RIIC1 (*(volatile struct st_riic __evenaccess *)0x88320)
                                 ;    7093 #define RSPI0 (*(volatile struct st_rspi __evenaccess *)0x88380)
                                 ;    7094 #define RSPI1 (*(volatile struct st_rspi __evenaccess *)0x883A0)
                                 ;    7095 #define MTUA (*(volatile struct st_mtu __evenaccess *)0x8860A)
                                 ;    7096 #define MTU0 (*(volatile struct st_mtu0 __evenaccess *)0x88700)
                                 ;    7097 #define MTU1 (*(volatile struct st_mtu1 __evenaccess *)0x88780)
                                 ;    7098 #define MTU2 (*(volatile struct st_mtu2 __evenaccess *)0x88800)
                                 ;    7099 #define MTU3 (*(volatile struct st_mtu3 __evenaccess *)0x88600)
                                 ;    7100 #define MTU4 (*(volatile struct st_mtu4 __evenaccess *)0x88600)
                                 ;    7101 #define MTU5 (*(volatile struct st_mtu5 __evenaccess *)0x88880)
                                 ;    7102 #define POE (*(volatile struct st_poe __evenaccess *)0x88900)
                                 ;    7103 #define MTUB (*(volatile struct st_mtu __evenaccess *)0x88A0A)
                                 ;    7104 #define MTU6 (*(volatile struct st_mtu0 __evenaccess *)0x88B00)
                                 ;    7105 #define MTU7 (*(volatile struct st_mtu1 __evenaccess *)0x88B80)
                                 ;    7106 #define MTU8 (*(volatile struct st_mtu2 __evenaccess *)0x88C00)
                                 ;    7107 #define MTU9 (*(volatile struct st_mtu3 __evenaccess *)0x88A00)
                                 ;    7108 #define MTU10 (*(volatile struct st_mtu4 __evenaccess *)0x88A00)
                                 ;    7109 #define MTU11 (*(volatile struct st_mtu5 __evenaccess *)0x88C80)
                                 ;    7110 #define S12AD (*(volatile struct st_s12ad __evenaccess *)0x89000)
                                 ;    7111 #define PORT0 (*(volatile struct st_port0 __evenaccess *)0x8C000)
                                 ;    7112 #define PORT1 (*(volatile struct st_port1 __evenaccess *)0x8C001)
                                 ;    7113 #define PORT2 (*(volatile struct st_port2 __evenaccess *)0x8C002)
                                 ;    7114 #define PORT3 (*(volatile struct st_port3 __evenaccess *)0x8C003)
                                 ;    7115 #define PORT4 (*(volatile struct st_port4 __evenaccess *)0x8C004)
                                 ;    7116 #define PORT5 (*(volatile struct st_port5 __evenaccess *)0x8C005)
                                 ;    7117 #define PORT6 (*(volatile struct st_port6 __evenaccess *)0x8C006)
                                 ;    7118 #define PORT7 (*(volatile struct st_port7 __evenaccess *)0x8C007)
                                 ;    7119 #define PORT8 (*(volatile struct st_port8 __evenaccess *)0x8C008)
                                 ;    7120 #define PORT9 (*(volatile struct st_port9 __evenaccess *)0x8C009)
                                 ;    7121 #define PORTA (*(volatile struct st_porta __evenaccess *)0x8C00A)
                                 ;    7122 #define PORTB (*(volatile struct st_portb __evenaccess *)0x8C00B)
                                 ;    7123 #define PORTC (*(volatile struct st_portc __evenaccess *)0x8C00C)
                                 ;    7124 #define PORTD (*(volatile struct st_portd __evenaccess *)0x8C00D)
                                 ;    7125 #define PORTE (*(volatile struct st_porte __evenaccess *)0x8C00E)
                                 ;    7126 #define PORTF (*(volatile struct st_portf __evenaccess *)0x8C00F)
                                 ;    7127 #define PORTG (*(volatile struct st_portg __evenaccess *)0x8C010)
                                 ;    7128 #define IOPORT (*(volatile struct st_ioport __evenaccess *)0x8C100)
                                 ;    7129 #define FLASH (*(volatile struct st_flash __evenaccess *)0x8C288)
                                 ;    7130 #define RTC (*(volatile struct st_rtc __evenaccess *)0x8C400)
                                 ;    7131 #define CAN0 (*(volatile struct st_can __evenaccess *)0x90200)
                                 ;    7132 #define USB0 (*(volatile struct st_usb0 __evenaccess *)0xA0000)
                                 ;    7133 #define USB1 (*(volatile struct st_usb0 __evenaccess *)0xA0200)
                                 ;    7134 #define USB (*(volatile struct st_usb __evenaccess *)0xA0400)
                                 ;    7135 #define EDMAC (*(volatile struct st_edmac __evenaccess *)0xC0000)
                                 ;    7136 #define ETHERC (*(volatile struct st_etherc __evenaccess *)0xC0100)
                                 ;    7137 #pragma bit_order
                                 ;    7138 #pragma packoption
                                 ;    7139 #endif
                                 ;      24 #include "rdkrx62n.h"
                                 ;       1 /******************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 
                                 ;       4 * This software is supplied by Renesas Electronics Corp. and is
                                 ;       5 * only intended for use with Renesas products.  
                                 ;       6 
                                 ;       7 * No other uses are authorized.
                                 ;       8 
                                 ;       9 * This software is owned by Renesas Electronics Corp. and is 
                                 ;      10 * protected under the applicable laws, including copyright laws.
                                 ;      11 
                                 ;      12 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES
                                 ;      13 * REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY,
                                 ;      14 * INCLUDING BUT NOT LIMITED TO WAWRRANTIES OF MERCHANTABILITY, 
                                 ;      15 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  ALL SUCH
                                 ;      16 * WARRANTIES ARE EXPRESSLY DISCLAIMED.
                                 ;      17 
                                 ;      18 * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER 
                                 ;      19 * RENESAS ELECTRONICS CORP. NOR ANY OF ITS AFFILIATED COMPANIES
                                 ;      20 * SHALL BE LIABLE FOR AND DIRECT, INDIRECT, SPECIAL, INCIDENTAL
                                 ;      21 * OR COSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE,
                                 ;      22 * EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE
                                 ;      23 * POSSIBILITIES OF SUCH DAMAGES.
                                 ;      24 
                                 ;      25 * Renesas reserves the right, without notice, to make changes to this
                                 ;      26 * software and to discontinue availability of this software.
                                 ;      27 * By using this software, you agree to the additional terms and 
                                 ;      28 * conditions found by accessing the following link:
                                 ;      29 * http://www.renesas.com/disclaimer
                                 ;      30 *******************************************************************************/
                                 ;      31 /* Copyright (C) 2010. Renesas Electronics Corp., All Rights Reserved       */
                                 ;      32 
                                 ;      33 /******************************************************************************
                                 ;      34 * File Name     : rdkrx62n.h
                                 ;      35 * Version       : 0.5
                                 ;      36 * Device(s)     : RDK RX62N
                                 ;      37 * Tool-Chain    :
                                 ;      38 * OS            : None
                                 ;      39 * H/W Platform  :
                                 ;      40 * Description   :
                                 ;      41 * Operation     :
                                 ;      42 * Limitations   : None
                                 ;      43 *******************************************************************************
                                 ;      44 * History : DD.MM.YYYY    Version Description
                                 ;      45 *         : 28.June.2010  0.50    First release
                                 ;      46 *******************************************************************************/
                                 ;      47 
                                 ;      48 #ifndef RDKRX62N_H
                                 ;      49 #define RDKRX62N_H
                                 ;      50 
                                 ;      51 /* Local defines */
                                 ;      52 #define LED_ON        (0)
                                 ;      53 #define LED_OFF       (1)
                                 ;      54 #define SET_BIT_HIGH  (1)
                                 ;      55 #define SET_BIT_LOW   (0)
                                 ;      56 #define SET_BYTE_HIGH (0xFF)
                                 ;      57 #define SET_BYTE_LOW  (0x00)
                                 ;      58 
                                 ;      59 /* Define switches to be polled if not available as interrupts */
                                 ;      60 #define SW_ACTIVE FALSE
                                 ;      61 #define SW1       PORT4.PORT.BIT.B0
                                 ;      62 #define SW2       PORT4.PORT.BIT.B1
                                 ;      63 #define SW3       PORT4.PORT.BIT.B2
                                 ;      64 
                                 ;      65 #define LED1  PORTD.DR.BIT.B0
                                 ;      66 #define LED2  PORTD.DR.BIT.B1
                                 ;      67 #define LED3  PORTD.DR.BIT.B2
                                 ;      68 #define LED4  PORTD.DR.BIT.B3
                                 ;      69 #define LED5  PORTD.DR.BIT.B4
                                 ;      70 #define LED6  PORTD.DR.BIT.B5
                                 ;      71 #define LED7  PORTD.DR.BIT.B6
                                 ;      72 #define LED8  PORTD.DR.BIT.B7
                                 ;      73 
                                 ;      74 #define LED9  PORTE.DR.BIT.B0
                                 ;      75 #define LED10 PORTE.DR.BIT.B1
                                 ;      76 #define LED11 PORTE.DR.BIT.B2
                                 ;      77 #define LED12 PORTE.DR.BIT.B3
                                 ;      78 
                                 ;      79 #define ALL_LEDS_ON		{LED1 = LED2 = LED3 = LED4 = LED5 = LED6 = LED_ON;}
                                 ;      80 #define ALL_LEDS_OFF	{LED1 = LED2 = LED3 = LED4 = LED5 = LED6 = LED_OFF;}
                                 ;      81 
                                 ;      82 #endif
                                 ;      25 
                                 ;      26 /******************************************************************************
                                 ;      27 Typedef definitions
                                 ;      28 ******************************************************************************/
                                 ;      29 /* Application error codes */
                                 ;      30 enum app_err_enum {    APP_NO_ERR 			= 0x00,
                                 ;      31                        APP_ERR_CAN_PERIPH 	= 0x01,
                                 ;      32 					   APP_ERR_CAN_INIT 	= 0x02,
                                 ;      33 					   APP_TABLE_ERR 		= 0x04,
                                 ;      34                        APP_STATE_ERR 		= 0x08
                                 ;      35 					   /* Add your application errors/alarms here. */
                                 ;      36                   };
                                 ;      37 				  
                                 ;      38 
                                 ;      39 /******************************************************************************
                                 ;      40 Macro definitions
                                 ;      41 ******************************************************************************/
                                 ;      42 /* TEST CAN ID */
                                 ;      43 #define 	TX_ID_DEFAULT 		0x001
                                 ;      44 #define 	RX_ID_DEFAULT 		0x001
                                 ;      45 #define 	REMOTE_TEST_ID		0x050
                                 ;      46 
                                 ;      47 /* Mailboxes used for demo. Keep mailboxes 4 apart if you want masks 
                                 ;      48 independent - not affecting neighboring mailboxes. */
                                 ;      49 #define 	CANBOX_TX		    0x01	//Mailbox #1
                                 ;      50 #define 	CANBOX_RX 		    0x04	//Mailbox #4
                                 ;      51 /* Added to show how to use multiple mailboxes. */
                                 ;      52 #define 	CANBOX_REMOTE_RX	0x08	//Mailbox #8
                                 ;      53 #define 	CANBOX_REMOTE_TX	0x0C	//Mailbox #12
                                 ;      54 
                                 ;      55 /******************************************************************************
                                 ;      56 Global variables and functions imported (externs)
                                 ;      57 ******************************************************************************/
                                 ;      58 /* Data */
                                 ;      59 extern uint32_t     can0_frame_received_flag;
                                 ;      60 extern uint32_t		can0_rx_remote_frame_flag;
                                 ;      61 /* Functions */
                                 ;      62 extern void Delay(uint32_t);
                                 ;      63 
                                 ;      64 /******************************************************************************
                                 ;      65 Constant definitions
                                 ;      66 *****************************************************************************/
                                 ;      67 /******************************************************************************
                                 ;      68 Global variables and functions exported
                                 ;      69 ******************************************************************************/
                                 ;      70 /* Data */
                                 ;      71 extern can_std_frame_t		tx_dataframe, rx_dataframe, remote_frame;
                                 ;      72 #ifndef USE_CAN_POLL
                                 ;      73 extern uint32_t				can0_tx_sentdata_flag;
                                 ;      74 extern uint32_t				can0_tx_err_sentdata_flag;
                                 ;      75 extern uint32_t				can0_rx_newdata_flag;
                                 ;      76 extern uint32_t				can0_rx_test_newdata_flag;
                                 ;      77 #endif //USE_CAN_POLL
                                 ;      78 extern enum app_err_enum	app_err_nr;
                                 ;      79 /* Functions */
                                 ;      80 extern uint32_t ResetAllErrors(void);
                                 ;      81 
                                 ;      82 #endif //API_DEMO_H
                                 ;      83 /* eof */
                                 ;      99 #include "config_r_can_rapi.h"
                                 ;       1 /******************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * Please refer to http://www.renesas.com/disclaimer
                                 ;       4 ******************************************************************************
                                 ;       5   Copyright (C) 2010. Renesas Electronics Corp., All Rights Reserved.
                                 ;       6 *******************************************************************************
                                 ;       7 * File Name    : R_CAN_API_CFG.H
                                 ;       8 * Version      : 1.00
                                 ;       9 * Description  : Edit this file to configure the CAN API.
                                 ;      10 ******************************************************************************
                                 ;      11 * History
                                 ;      12 * Mar 22 '10  REA	For RX62N with new CAN API.
                                 ;      13 ******************************************************************************/
                                 ;      14 //Set TAB to 4 spaces!
                                 ;      15 
                                 ;      16 #ifndef R_CAN_API_CFG_H
                                 ;      17 #define R_CAN_API_CFG_H
                                 ;      18 
                                 ;      19 /******************************************************************************
                                 ;      20 Includes   <System Includes> , "Project Includes"
                                 ;      21 ******************************************************************************/
                                 ;      22 /******************************************************************************
                                 ;      23 Typedef definitions
                                 ;      24 ******************************************************************************/
                                 ;      25 /******************************************************************************
                                 ;      26 Macro definitions
                                 ;      27 ******************************************************************************/
                                 ;      28 /* Include this line if you want to poll can mailboxes for messages received 
                                 ;      29 and sent. COMMENT to use the CAN interrupts. */
                                 ;      30 #define USE_CAN_POLL			1
                                 ;      31 
                                 ;      32 /*** CAN interrupt ************************************************************/
                                 ;      33 /* Include this line if you are using CAN0 interrupts. */
                                 ;      34 #define CAPI_CFG_CAN0_ISR		1
                                 ;      35 
                                 ;      36 /* Level */
                                 ;      37 #define CAN0_INT_LVL			2
                                 ;      38 
                                 ;      39 /* In the interrupts, USE_CAN_API_SEARCH is default. Uncomment to use the 
                                 ;      40 mailbox search register. Should be faster if a lot of mailboxes to check. 
                                 ;      41 This is NOT verified, the opposite may be true. */
                                 ;      42 #define USE_CAN_API_SEARCH		1
                                 ;      43 
                                 ;      44 /*** Board specific ports ******************************************************
                                 ;      45 Tell me where you want to map the transceiver control pins.
                                 ;      46 Some transceivers may have other control pins. You would have to configure this
                                 ;      47 yourself. */
                                 ;      48 
                                 ;      49 /* Configure CAN0 STBn pin. For the RDK this is the P41 pin.
                                 ;      50 Output. High = not standby. */
                                 ;      51 #define CAN0_TRX_STB_PORT 	  	4
                                 ;      52 #define CAN0_TRX_STB_PIN		1
                                 ;      53 #define CAN0_TRX_STB_LVL		1   //High = Not standby.
                                 ;      54 
                                 ;      55 /* Configure CAN0 EN pin. For the RDK this is the P42 pin.
                                 ;      56 Output. High to enable CAN transceiver. */
                                 ;      57 #define CAN0_TRX_ENABLE_PORT    4
                                 ;      58 #define CAN0_TRX_ENABLE_PIN     2
                                 ;      59 #define CAN0_TRX_ENABLE_LVL     1   //High = Enable.
                                 ;      60 
                                 ;      61 /*** Baudrate settings ********************************************************
                                 ;      62 	Calculation of baudrate:
                                 ;      63 	*********************************
                                 ;      64 	*	PCLK = 48 MHz = fcan.		*
                                 ;      65 	*	fcanclk = fcan/prescale		*
                                 ;      66 	*********************************
                                 ;      67 	
                                 ;      68 	Example 1) 
                                 ;      69 	Desired baudrate 500 kbps.
                                 ;      70 	Selecting prescale to 4.
                                 ;      71     fcanclk = 48000000/4
                                 ;      72 	fcanclk = 12000000 Hz
                                 ;      73 	Bitrate = fcanclk/Tqtot
                                 ;      74 	 or,
                                 ;      75 	Tqtot = fcanclk/bitrate
                                 ;      76 	Tqtot = 12000000/500000
                                 ;      77 	Tqtot = 120/5 = 24.
                                 ;      78     Tqtot = TSEG1 + TSEG2 + SS
                                 ;      79 	Using TSEG1 = 15 Tq
                                 ;      80 		  TSEG2 = 8 Tq
                                 ;      81 		  SS = 1 Tq always
                                 ;      82 		  Re-synchronization Control (SJW) should be 1-4 Tq (must be <=TSEG2). */
                                 ;      83 	#define CAN_BRP		4
                                 ;      84 	#define CAN_TSEG1	15
                                 ;      85 	#define CAN_TSEG2	8
                                 ;      86 	#define CAN_SJW		2
                                 ;      87 	
                                 ;      88 	/* 
                                 ;      89 	Example 2) Selecting prescale to 8.
                                 ;      90     Desired baudrate 500 kbps.
                                 ;      91 	fcanclk = 48000000/8
                                 ;      92 	fcanclk = 6000000 Hz
                                 ;      93 	Tqtot = fcanclk/bitrate
                                 ;      94 	Tqtot = 6000000/500000
                                 ;      95 	Tqtot = 60/5 = 12.
                                 ;      96 	Tqtot = TSEG1 + TSEG2 + SS
                                 ;      97 	Using 	TSEG1 = 8 Tq
                                 ;      98 			TSEG2 = 3 Tq
                                 ;      99 			SS = 1 Tq always
                                 ;     100 			SJW should be 1-4 Tq (<=TSEG2). *
                                 ;     101 	#define CAN_BRP		8
                                 ;     102 	#define CAN_TSEG1	8
                                 ;     103 	#define CAN_TSEG2	3
                                 ;     104 	#define CAN_SJW		1	*/
                                 ;     105 	
                                 ;     106 /*** Other settings  *********************************************************/
                                 ;     107 /* Max time to poll a CAN register bit for expected value. Don't set to zero. */
                                 ;     108 #define MAX_CAN_REG_POLLTIME	4
                                 ;     109 
                                 ;     110 /******************************************************************************
                                 ;     111 Constant definitions
                                 ;     112 *****************************************************************************/
                                 ;     113 
                                 ;     114 /******************************************************************************
                                 ;     115 Variable Externs
                                 ;     116 ******************************************************************************/
                                 ;     117 
                                 ;     118 /******************************************************************************
                                 ;     119 Function prototypes
                                 ;     120 ******************************************************************************/
                                 ;     121 #endif	/* R_CAN_API_CFG_H */
                                 ;     122 /* eof */
                                 ;     100 #include "lcd.h"
                                 ;       1 /***********************************************************************************
                                 ;       2 FILE NAME		lcd.h
                                 ;       3 
                                 ;       4 DESCRIPTION		Driver for KS0066u LCD Module Controller (8 characters by 2 lines )
                                 ;       5 				on the Renesas RDK boards - header file
                                 ;       6 
                                 ;       7 Copyright   : 2008 Renesas Technology Europe Ltd.
                                 ;       8 Copyright   : 2008 Renesas Technology Corporation.
                                 ;       9 All Rights Reserved
                                 ;      10 ***********************************************************************************/
                                 ;      11 
                                 ;      12 /***********************************************************************************
                                 ;      13 Revision History
                                 ;      14 DD.MM.YYYY OSO-UID Description
                                 ;      15 05.03.2008 RTE-MBA First Release
                                 ;      16 ***********************************************************************************/
                                 ;      17 #include <stdint.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /* stdint.h standard header */
                                 ;       8 #ifndef _STDINT
                                 ;       9 #define _STDINT
                                 ;      10 #include <macro.h>
                                 ;      11 #ifndef _YVALS
                                 ;      12 #include <sys/yvals.h>
                                 ;      13 #endif /* _YVALS */
                                 ;      14 
                                 ;      15  #if _BITS_BYTE != 8
                                 ;      16   #error <stdint.h> assumes 8 bits per byte
                                 ;      17  #endif /* _BITS_BYTE != 8 */
                                 ;      18 
                                 ;      19 /* NB: also assumes
                                 ;      20 	long is 32 bits
                                 ;      21 	pointer can convert to and from long long
                                 ;      22 	long long is longest type
                                 ;      23  */
                                 ;      24 
                                 ;      25  #if __STDC_WANT_LIB_EXT1__
                                 ;      26   #define RSIZE_MAX	_RSIZE_MAX
                                 ;      27  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;      28 
                                 ;      29 _C_STD_BEGIN
                                 ;      30 
                                 ;      31 		/* TYPE DEFINITIONS */
                                 ;      32  #ifndef _SYS_INT_TYPES_H
                                 ;      33   #define _STD_USING_INT_TYPES
                                 ;      34 
                                 ;      36   #if !defined(__BIT_TYPES_DEFINED__) && !defined(_MACHTYPES_H_) \
                                 ;      36 	&& !defined(__int8_t_defined)
                                 ;      37    #define _STD_USING_BIT_TYPES
                                 ;      38    #define __int8_t_defined
                                 ;      39 
                                 ;      40 typedef signed char int8_t;
                                 ;      41 typedef short int16_t;
                                 ;      42 typedef _Int32t int32_t;
                                 ;      43   #endif /* !defined(__BIT_TYPES_DEFINED__) etc. */
                                 ;      44 
                                 ;      45 typedef unsigned char uint8_t;
                                 ;      46 typedef unsigned short uint16_t;
                                 ;      47 typedef _Uint32t uint32_t;
                                 ;      48 
                                 ;      49 typedef signed char int_least8_t;
                                 ;      50 typedef short int_least16_t;
                                 ;      51 typedef _Int32t int_least32_t;
                                 ;      52 typedef unsigned char uint_least8_t;
                                 ;      53 typedef unsigned short uint_least16_t;
                                 ;      54 typedef _Uint32t uint_least32_t;
                                 ;      55  #endif /* _SYS_INT_TYPES_H */
                                 ;      56 
                                 ;      57 typedef signed char int_fast8_t;
                                 ;      58 typedef short int_fast16_t;
                                 ;      59 typedef _Int32t int_fast32_t;
                                 ;      60 
                                 ;      61 typedef unsigned char uint_fast8_t;
                                 ;      62 typedef unsigned short uint_fast16_t;
                                 ;      63 typedef _Uint32t uint_fast32_t;
                                 ;      64 
                                 ;      65  #ifndef _INTPTR
                                 ;      66   #define _INTPTR	0	/* 0 => int, 1 => long, 2 => long long */
                                 ;      67  #endif /* _INTPTR */
                                 ;      68 
                                 ;      69  #ifndef _SYS_INT_TYPES_H
                                 ;      70 
                                 ;      71   #if !defined(_MACHTYPES_H_)
                                 ;      72 
                                 ;      73    #if !defined(_UINTPTR_T_DEFINED)
                                 ;      74     #define _UINTPTR_T_DEFINED
                                 ;      75     #define _STD_USING_UINTPTR_T
                                 ;      76 
                                 ;      77     #if _INTPTR == 0
                                 ;      78 typedef unsigned long uintptr_t;
                                 ;      79 
                                 ;      80     #elif _INTPTR == 1
                                 ;      81 typedef unsigned long uintptr_t;
                                 ;      82 
                                 ;      83     #elif _INTPTR == 2
                                 ;      84 typedef _ULonglong uintptr_t;
                                 ;      85 
                                 ;      86     #else /* _INTPTR */
                                 ;      87      #error bad _INTPTR value
                                 ;      88     #endif /* _INTPTR */
                                 ;      89 
                                 ;      90    #endif /* _UNITPTR_T_DEFINED */
                                 ;      91 
                                 ;      92    #if !defined(__int_ptr_t_defined) && !defined(_INTPTR_T_DEFINED)
                                 ;      93     #define _INTPTR_T_DEFINED
                                 ;      94     #define _STD_USING_INTPTR_T
                                 ;      95 
                                 ;      96     #if _INTPTR == 0
                                 ;      97 typedef long intptr_t;
                                 ;      98 
                                 ;      99     #elif _INTPTR == 1
                                 ;     100 typedef long intptr_t;
                                 ;     101 
                                 ;     102     #elif _INTPTR == 2
                                 ;     103 typedef _Longlong intptr_t;
                                 ;     104 
                                 ;     105     #else /* _INTPTR */
                                 ;     106      #error bad _INTPTR value
                                 ;     107     #endif /* _INTPTR */
                                 ;     108 
                                 ;     109     #endif /* __int_ptr_t_defined etc. */
                                 ;     110 
                                 ;     111    #ifndef __BIT_TYPES_DEFINED__
                                 ;     112 typedef _Longlong int64_t;
                                 ;     113    #endif /* __BIT_TYPES_DEFINED__ */
                                 ;     114 
                                 ;     115   #endif /* !defined(_MACHTYPES_H_) */
                                 ;     116 typedef _ULonglong uint64_t;
                                 ;     117 
                                 ;     118 typedef _Longlong int_least64_t;
                                 ;     119 typedef _ULonglong uint_least64_t;
                                 ;     120  #endif /* _SYS_INT_TYPES_H */
                                 ;     121 
                                 ;     122 typedef _Longlong int_fast64_t;
                                 ;     123 typedef _ULonglong uint_fast64_t;
                                 ;     124 
                                 ;     125  #if !defined(_SYS_INT_TYPES_H) && !defined(_INTMAXT)
                                 ;     126   #define _INTMAXT
                                 ;     127 typedef _Longlong intmax_t;
                                 ;     128 typedef _ULonglong uintmax_t;
                                 ;     129  #endif /* !defined(_SYS_INT_TYPES_H) etc. */
                                 ;     130 
                                 ;     131 		/* LIMIT MACROS */
                                 ;     132 #define INT8_MIN	(-0x7f - _C2)
                                 ;     133 #define INT16_MIN	(-0x7fff - _C2)
                                 ;     134 #define INT32_MIN	(-0x7fffffff - _C2)
                                 ;     135 
                                 ;     136 #define INT8_MAX	0x7f
                                 ;     137 #define INT16_MAX	0x7fff
                                 ;     138 #define INT32_MAX	0x7fffffff
                                 ;     139 #define UINT8_MAX	0xff
                                 ;     140 #define UINT16_MAX	0xffff
                                 ;     141 #define UINT32_MAX	0xffffffff
                                 ;     142 
                                 ;     143 #define INT_LEAST8_MIN		(-0x7f - _C2)
                                 ;     144 #define INT_LEAST16_MIN		(-0x7fff - _C2)
                                 ;     145 #define INT_LEAST32_MIN		(-0x7fffffff - _C2)
                                 ;     146 
                                 ;     147 #define INT_LEAST8_MAX		0x7f
                                 ;     148 #define INT_LEAST16_MAX		0x7fff
                                 ;     149 #define INT_LEAST32_MAX		0x7fffffff
                                 ;     150 #define UINT_LEAST8_MAX		0xff
                                 ;     151 #define UINT_LEAST16_MAX	0xffff
                                 ;     152 #define UINT_LEAST32_MAX	0xffffffff
                                 ;     153 
                                 ;     154 #define INT_FAST8_MIN		(-0x7f - _C2)
                                 ;     155 #define INT_FAST16_MIN		(-0x7fff - _C2)
                                 ;     156 #define INT_FAST32_MIN		(-0x7fffffff - _C2)
                                 ;     157 
                                 ;     158 #define INT_FAST8_MAX		0x7f
                                 ;     159 #define INT_FAST16_MAX		0x7fff
                                 ;     160 #define INT_FAST32_MAX		0x7fffffff
                                 ;     161 #define UINT_FAST8_MAX		0xff
                                 ;     162 #define UINT_FAST16_MAX		0xffff
                                 ;     163 #define UINT_FAST32_MAX		0xffffffff
                                 ;     164 
                                 ;     165  #if _INTPTR == 0 && !_ILONG
                                 ;     166 #define INTPTR_MAX			0x7fff
                                 ;     167 #define INTPTR_MIN			(-INTPTR_MAX - _C2)
                                 ;     168 #define UINTPTR_MAX			0xffff
                                 ;     169 
                                 ;     170  #elif _INTPTR == 1 || _INTPTR == 0 && _ILONG
                                 ;     171 #define INTPTR_MAX			0x7fffffff
                                 ;     172 #define INTPTR_MIN			(-INTPTR_MAX - _C2)
                                 ;     173 #define UINTPTR_MAX			0xffffffff
                                 ;     174 
                                 ;     175  #else /* _INTPTR == 2 */
                                 ;     176 #define INTPTR_MIN			(-_LLONG_MAX - _C2)
                                 ;     177 #define INTPTR_MAX			_LLONG_MAX
                                 ;     178 #define UINTPTR_MAX			_ULLONG_MAX
                                 ;     179 #endif /* _INTPTR */
                                 ;     180 
                                 ;     181 #define INT8_C(x)	(x)
                                 ;     182 #define INT16_C(x)	(x)
                                 ;     183 #define INT32_C(x)	((x) + (INT32_MAX - INT32_MAX))
                                 ;     184 
                                 ;     185 #define UINT8_C(x)	(x)
                                 ;     186 #define UINT16_C(x)	(x)
                                 ;     187 #define UINT32_C(x)	((x) + (UINT32_MAX - UINT32_MAX))
                                 ;     188 
                                 ;     189  #if _ILONG
                                 ;     190   #define PTRDIFF_MIN		INT32_MIN
                                 ;     191   #define PTRDIFF_MAX		INT32_MAX
                                 ;     192 
                                 ;     193   #define SIG_ATOMIC_MIN	INT32_MIN
                                 ;     194   #define SIG_ATOMIC_MAX	INT32_MAX
                                 ;     195 
                                 ;     196   #define SIZE_MAX			UINT32_MAX
                                 ;     197 
                                 ;     198  #else /* _ILONG */
                                 ;     199   #define PTRDIFF_MIN		INT16_MIN
                                 ;     200   #define PTRDIFF_MAX		INT16_MAX
                                 ;     201 
                                 ;     202   #define SIG_ATOMIC_MIN	INT16_MIN
                                 ;     203   #define SIG_ATOMIC_MAX	INT16_MAX
                                 ;     204 
                                 ;     205   #define SIZE_MAX			UINT16_MAX
                                 ;     206  #endif /* _ILONG */
                                 ;     207 
                                 ;     208 #define WCHAR_MIN	_WCMIN
                                 ;     209 #define WCHAR_MAX	_WCMAX
                                 ;     210 
                                 ;     211 #define WINT_MIN	_WCMIN
                                 ;     212 #define WINT_MAX	_WCMAX
                                 ;     213 
                                 ;     214  #define INT64_MIN	(-0x7fffffffffffffffLL - _C2)
                                 ;     215  #define INT64_MAX	0x7fffffffffffffffLL
                                 ;     216  #define UINT64_MAX	0xffffffffffffffffULL
                                 ;     217 
                                 ;     218  #define INT_LEAST64_MIN	(-0x7fffffffffffffffLL - _C2)
                                 ;     219  #define INT_LEAST64_MAX	0x7fffffffffffffffLL
                                 ;     220  #define UINT_LEAST64_MAX	0xffffffffffffffffULL
                                 ;     221 
                                 ;     222  #define INT_FAST64_MIN		(-0x7fffffffffffffffLL - _C2)
                                 ;     223  #define INT_FAST64_MAX		0x7fffffffffffffffLL
                                 ;     224  #define UINT_FAST64_MAX	0xffffffffffffffffULL
                                 ;     225 
                                 ;     226  #define INTMAX_MIN		(-0x7fffffffffffffffLL - _C2)
                                 ;     227  #define INTMAX_MAX		0x7fffffffffffffffLL
                                 ;     228  #define UINTMAX_MAX	0xffffffffffffffffULL
                                 ;     229 
                                 ;     230 #define INT64_C(x)		((x) + (INT64_MAX - INT64_MAX))
                                 ;     231 #define UINT64_C(x)		((x) + (UINT64_MAX - UINT64_MAX))
                                 ;     232 #define INTMAX_C(x)		INT64_C(x)
                                 ;     233 #define UINTMAX_C(x)	UINT64_C(x)
                                 ;     234 _C_STD_END
                                 ;     235 
                                 ;     236 #endif /* _STDINT */
                                 ;     237 
                                 ;     238  #if defined(_STD_USING)
                                 ;     239 
                                 ;     240   #ifdef _STD_USING_BIT_TYPES
                                 ;     241 using _CSTD int8_t; using _CSTD int16_t;
                                 ;     242 using _CSTD int32_t; using _CSTD int64_t;
                                 ;     243   #endif /* _STD_USING_BIT_TYPES */
                                 ;     244 
                                 ;     245   #ifdef _STD_USING_INT_TYPES
                                 ;     246 using _CSTD uint8_t; using _CSTD uint16_t;
                                 ;     247 using _CSTD uint32_t; using _CSTD uint64_t;
                                 ;     248 
                                 ;     249 using _CSTD int_least8_t; using _CSTD int_least16_t;
                                 ;     250 using _CSTD int_least32_t;  using _CSTD int_least64_t;
                                 ;     251 using _CSTD uint_least8_t; using _CSTD uint_least16_t;
                                 ;     252 using _CSTD uint_least32_t; using _CSTD uint_least64_t;
                                 ;     253 
                                 ;     254 using _CSTD intmax_t; using _CSTD uintmax_t;
                                 ;     255   #endif /* _STD_USING_INT_TYPES */
                                 ;     256 
                                 ;     257   #ifdef _STD_USING_UINTPTR_T
                                 ;     258 using _CSTD uintptr_t;
                                 ;     259   #endif /* _STD_USING_UINTPTR_T */
                                 ;     260 
                                 ;     261   #ifdef _STD_USING_INTPTR_T
                                 ;     262 using _CSTD intptr_t;
                                 ;     263   #endif /* _STD_USING_INTPTR_T */
                                 ;     264 
                                 ;     265 using _CSTD int_fast8_t; using _CSTD int_fast16_t;
                                 ;     266 using _CSTD int_fast32_t; using _CSTD int_fast64_t;
                                 ;     267 using _CSTD uint_fast8_t; using _CSTD uint_fast16_t;
                                 ;     268 using _CSTD uint_fast32_t; using _CSTD uint_fast64_t;
                                 ;     269  #endif /* defined(_STD_USING) */
                                 ;     270 
                                 ;     271 /*
                                 ;     272  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     273 V5.03:0216 */
                                 ;      18 
                                 ;      19 #ifndef LCD_H
                                 ;      20 #define LCD_H
                                 ;      21 
                                 ;      22 /**********************************************************************************
                                 ;      23 User Includes
                                 ;      24 ***********************************************************************************/
                                 ;      25 /* rsk1668def.h provides common defines for widely used items. */
                                 ;      26 #include	"rdkrx62n.h"
                                 ;      27 
                                 ;      29 #define LCD_FLASH	{Delay(0x00400000); DisplayString(LCD_LINE1, "        "); \
                                 ;      29 					 DisplayString(LCD_LINE2, "        "); Delay(0x00002000);}
                                 ;      30 
                                 ;      31 
                                 ;      32 /* RS Register Select pin */
                                 ;      33 #define RS_PIN			PORT5.DR.BIT.B1
                                 ;      34 
                                 ;      35 /* Display Enable pin */  
                                 ;      36 #define EN_PIN			PORTC.DR.BIT.B2
                                 ;      37 	
                                 ;      38 /* Data bus port */
                                 ;      39 #define DATA_PORT		PORTE.DR.BYTE
                                 ;      40 
                                 ;      41 /* Bit mask from entire port */   
                                 ;      42 #define DATA_PORT_MASK	0xF0
                                 ;      43 
                                 ;      44 #define DATA_WR 1
                                 ;      45 #define CTRL_WR 0
                                 ;      46 
                                 ;      47 /* Set to ensure base delay of 1uS minimum */
                                 ;      48 #define DELAY_TIMING	0x80
                                 ;      49 
                                 ;      50 /* Maximum characters per line of LCD display */ 
                                 ;      51 #define NUMB_CHARS_PER_LINE 8
                                 ;      52 
                                 ;      53 /* Number of lines on the LCD display */
                                 ;      54 //#define MAXIMUM_LINES	2   
                                 ;      55 
                                 ;      56 #define LCD_LINE1       0
                                 ;      57 #define LCD_LINE2       16
                                 ;      58 #define LCD_LINE3       24
                                 ;      59 #define LCD_LINE4       32
                                 ;      60 
                                 ;      61 /**********************************************************************************/
                                 ;      62 /* LCD commands - use LCD_write function to write these commands to the LCD.	  */
                                 ;      63 /**********************************************************************************/
                                 ;      64 /* Clear LCD display and home cursor */
                                 ;      65 #define LCD_CLEAR		0x01
                                 ;      66 /* move cursor to line 1 */
                                 ;      67 #define LCD_HOME_L1		0x80
                                 ;      68 /* move cursor to line 2 */	  
                                 ;      69 #define LCD_HOME_L2		0xC0
                                 ;      70 /* Cursor auto decrement after R/W */  
                                 ;      71 #define CURSOR_MODE_DEC	0x04
                                 ;      72 /* Cursor auto increment after R/W */
                                 ;      73 #define CURSOR_MODE_INC	0x06
                                 ;      74 /* Setup, 4 bits,2 lines, 5X7 */
                                 ;      75 #define FUNCTION_SET	0x28
                                 ;      76 /* Display ON with Cursor */
                                 ;      77 #define LCD_CURSOR_ON	0x0E
                                 ;      78 /* Display ON with Cursor off */
                                 ;      79 #define LCD_CURSOR_OFF	0x0C
                                 ;      80 /* Display on with blinking cursor */
                                 ;      81 #define LCD_CURSOR_BLINK 0x0D
                                 ;      82 /* Move Cursor Left One Position */
                                 ;      83 #define LCD_CURSOR_LEFT	0x10
                                 ;      84 /* Move Cursor Right One Position */
                                 ;      85 #define LCD_CURSOR_RIGHT 0x14
                                 ;      86 
                                 ;      87 #define LCD_DISPLAY_ON	0x04
                                 ;      88 #define LCD_TWO_LINE	0x08
                                 ;      89 
                                 ;      90 #define FOUR_DIGITS_PLUS_NULL   5
                                 ;      91 
                                 ;      92 /**********************************************************************************/
                                 ;      93 /* LCD functions - declaration of main LCD functions.	  */
                                 ;      94 /**********************************************************************************/
                                 ;      95 void InitialiseDisplay(void);
                                 ;      96 void DisplayString(uint8_t position, uint8_t* string);
                                 ;      97 void LCD_write(unsigned char data_or_ctrl, unsigned char value);
                                 ;      98 void LCD_nibble_write(unsigned char data_or_ctrl, unsigned char value);
                                 ;      99 void DisplayDelay(unsigned long int units);
                                 ;     100 //void Convert_16BitNumber_ToString(unsigned int c, char* buffer);
                                 ;     101 void LcdShow2DigHex( uint8_t  data, uint8_t  position);
                                 ;     102 void LcdShow4DigHex(	uint8_t  msbyte, 
                                 ;     103 						uint8_t  lsbyte,
                                 ;     104 						uint8_t	 position);
                                 ;     105 void IntToAsciiHex( uint8_t*    dest_string,
                                 ;     106 					uint8_t		min_digits, 
                                 ;     107 					uint32_t 	value );
                                 ;     108 						
                                 ;     109 /* LCD_H */
                                 ;     110 #endif 
                                 ;     101 #include "stdint.h"
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 /* stdint.h standard header */
                                 ;       8 #ifndef _STDINT
                                 ;       9 #define _STDINT
                                 ;      10 #include <macro.h>
                                 ;      11 #ifndef _YVALS
                                 ;      12 #include <sys/yvals.h>
                                 ;      13 #endif /* _YVALS */
                                 ;      14 
                                 ;      15  #if _BITS_BYTE != 8
                                 ;      16   #error <stdint.h> assumes 8 bits per byte
                                 ;      17  #endif /* _BITS_BYTE != 8 */
                                 ;      18 
                                 ;      19 /* NB: also assumes
                                 ;      20 	long is 32 bits
                                 ;      21 	pointer can convert to and from long long
                                 ;      22 	long long is longest type
                                 ;      23  */
                                 ;      24 
                                 ;      25  #if __STDC_WANT_LIB_EXT1__
                                 ;      26   #define RSIZE_MAX	_RSIZE_MAX
                                 ;      27  #endif /* __STDC_WANT_LIB_EXT1__ */
                                 ;      28 
                                 ;      29 _C_STD_BEGIN
                                 ;      30 
                                 ;      31 		/* TYPE DEFINITIONS */
                                 ;      32  #ifndef _SYS_INT_TYPES_H
                                 ;      33   #define _STD_USING_INT_TYPES
                                 ;      34 
                                 ;      36   #if !defined(__BIT_TYPES_DEFINED__) && !defined(_MACHTYPES_H_) \
                                 ;      36 	&& !defined(__int8_t_defined)
                                 ;      37    #define _STD_USING_BIT_TYPES
                                 ;      38    #define __int8_t_defined
                                 ;      39 
                                 ;      40 typedef signed char int8_t;
                                 ;      41 typedef short int16_t;
                                 ;      42 typedef _Int32t int32_t;
                                 ;      43   #endif /* !defined(__BIT_TYPES_DEFINED__) etc. */
                                 ;      44 
                                 ;      45 typedef unsigned char uint8_t;
                                 ;      46 typedef unsigned short uint16_t;
                                 ;      47 typedef _Uint32t uint32_t;
                                 ;      48 
                                 ;      49 typedef signed char int_least8_t;
                                 ;      50 typedef short int_least16_t;
                                 ;      51 typedef _Int32t int_least32_t;
                                 ;      52 typedef unsigned char uint_least8_t;
                                 ;      53 typedef unsigned short uint_least16_t;
                                 ;      54 typedef _Uint32t uint_least32_t;
                                 ;      55  #endif /* _SYS_INT_TYPES_H */
                                 ;      56 
                                 ;      57 typedef signed char int_fast8_t;
                                 ;      58 typedef short int_fast16_t;
                                 ;      59 typedef _Int32t int_fast32_t;
                                 ;      60 
                                 ;      61 typedef unsigned char uint_fast8_t;
                                 ;      62 typedef unsigned short uint_fast16_t;
                                 ;      63 typedef _Uint32t uint_fast32_t;
                                 ;      64 
                                 ;      65  #ifndef _INTPTR
                                 ;      66   #define _INTPTR	0	/* 0 => int, 1 => long, 2 => long long */
                                 ;      67  #endif /* _INTPTR */
                                 ;      68 
                                 ;      69  #ifndef _SYS_INT_TYPES_H
                                 ;      70 
                                 ;      71   #if !defined(_MACHTYPES_H_)
                                 ;      72 
                                 ;      73    #if !defined(_UINTPTR_T_DEFINED)
                                 ;      74     #define _UINTPTR_T_DEFINED
                                 ;      75     #define _STD_USING_UINTPTR_T
                                 ;      76 
                                 ;      77     #if _INTPTR == 0
                                 ;      78 typedef unsigned long uintptr_t;
                                 ;      79 
                                 ;      80     #elif _INTPTR == 1
                                 ;      81 typedef unsigned long uintptr_t;
                                 ;      82 
                                 ;      83     #elif _INTPTR == 2
                                 ;      84 typedef _ULonglong uintptr_t;
                                 ;      85 
                                 ;      86     #else /* _INTPTR */
                                 ;      87      #error bad _INTPTR value
                                 ;      88     #endif /* _INTPTR */
                                 ;      89 
                                 ;      90    #endif /* _UNITPTR_T_DEFINED */
                                 ;      91 
                                 ;      92    #if !defined(__int_ptr_t_defined) && !defined(_INTPTR_T_DEFINED)
                                 ;      93     #define _INTPTR_T_DEFINED
                                 ;      94     #define _STD_USING_INTPTR_T
                                 ;      95 
                                 ;      96     #if _INTPTR == 0
                                 ;      97 typedef long intptr_t;
                                 ;      98 
                                 ;      99     #elif _INTPTR == 1
                                 ;     100 typedef long intptr_t;
                                 ;     101 
                                 ;     102     #elif _INTPTR == 2
                                 ;     103 typedef _Longlong intptr_t;
                                 ;     104 
                                 ;     105     #else /* _INTPTR */
                                 ;     106      #error bad _INTPTR value
                                 ;     107     #endif /* _INTPTR */
                                 ;     108 
                                 ;     109     #endif /* __int_ptr_t_defined etc. */
                                 ;     110 
                                 ;     111    #ifndef __BIT_TYPES_DEFINED__
                                 ;     112 typedef _Longlong int64_t;
                                 ;     113    #endif /* __BIT_TYPES_DEFINED__ */
                                 ;     114 
                                 ;     115   #endif /* !defined(_MACHTYPES_H_) */
                                 ;     116 typedef _ULonglong uint64_t;
                                 ;     117 
                                 ;     118 typedef _Longlong int_least64_t;
                                 ;     119 typedef _ULonglong uint_least64_t;
                                 ;     120  #endif /* _SYS_INT_TYPES_H */
                                 ;     121 
                                 ;     122 typedef _Longlong int_fast64_t;
                                 ;     123 typedef _ULonglong uint_fast64_t;
                                 ;     124 
                                 ;     125  #if !defined(_SYS_INT_TYPES_H) && !defined(_INTMAXT)
                                 ;     126   #define _INTMAXT
                                 ;     127 typedef _Longlong intmax_t;
                                 ;     128 typedef _ULonglong uintmax_t;
                                 ;     129  #endif /* !defined(_SYS_INT_TYPES_H) etc. */
                                 ;     130 
                                 ;     131 		/* LIMIT MACROS */
                                 ;     132 #define INT8_MIN	(-0x7f - _C2)
                                 ;     133 #define INT16_MIN	(-0x7fff - _C2)
                                 ;     134 #define INT32_MIN	(-0x7fffffff - _C2)
                                 ;     135 
                                 ;     136 #define INT8_MAX	0x7f
                                 ;     137 #define INT16_MAX	0x7fff
                                 ;     138 #define INT32_MAX	0x7fffffff
                                 ;     139 #define UINT8_MAX	0xff
                                 ;     140 #define UINT16_MAX	0xffff
                                 ;     141 #define UINT32_MAX	0xffffffff
                                 ;     142 
                                 ;     143 #define INT_LEAST8_MIN		(-0x7f - _C2)
                                 ;     144 #define INT_LEAST16_MIN		(-0x7fff - _C2)
                                 ;     145 #define INT_LEAST32_MIN		(-0x7fffffff - _C2)
                                 ;     146 
                                 ;     147 #define INT_LEAST8_MAX		0x7f
                                 ;     148 #define INT_LEAST16_MAX		0x7fff
                                 ;     149 #define INT_LEAST32_MAX		0x7fffffff
                                 ;     150 #define UINT_LEAST8_MAX		0xff
                                 ;     151 #define UINT_LEAST16_MAX	0xffff
                                 ;     152 #define UINT_LEAST32_MAX	0xffffffff
                                 ;     153 
                                 ;     154 #define INT_FAST8_MIN		(-0x7f - _C2)
                                 ;     155 #define INT_FAST16_MIN		(-0x7fff - _C2)
                                 ;     156 #define INT_FAST32_MIN		(-0x7fffffff - _C2)
                                 ;     157 
                                 ;     158 #define INT_FAST8_MAX		0x7f
                                 ;     159 #define INT_FAST16_MAX		0x7fff
                                 ;     160 #define INT_FAST32_MAX		0x7fffffff
                                 ;     161 #define UINT_FAST8_MAX		0xff
                                 ;     162 #define UINT_FAST16_MAX		0xffff
                                 ;     163 #define UINT_FAST32_MAX		0xffffffff
                                 ;     164 
                                 ;     165  #if _INTPTR == 0 && !_ILONG
                                 ;     166 #define INTPTR_MAX			0x7fff
                                 ;     167 #define INTPTR_MIN			(-INTPTR_MAX - _C2)
                                 ;     168 #define UINTPTR_MAX			0xffff
                                 ;     169 
                                 ;     170  #elif _INTPTR == 1 || _INTPTR == 0 && _ILONG
                                 ;     171 #define INTPTR_MAX			0x7fffffff
                                 ;     172 #define INTPTR_MIN			(-INTPTR_MAX - _C2)
                                 ;     173 #define UINTPTR_MAX			0xffffffff
                                 ;     174 
                                 ;     175  #else /* _INTPTR == 2 */
                                 ;     176 #define INTPTR_MIN			(-_LLONG_MAX - _C2)
                                 ;     177 #define INTPTR_MAX			_LLONG_MAX
                                 ;     178 #define UINTPTR_MAX			_ULLONG_MAX
                                 ;     179 #endif /* _INTPTR */
                                 ;     180 
                                 ;     181 #define INT8_C(x)	(x)
                                 ;     182 #define INT16_C(x)	(x)
                                 ;     183 #define INT32_C(x)	((x) + (INT32_MAX - INT32_MAX))
                                 ;     184 
                                 ;     185 #define UINT8_C(x)	(x)
                                 ;     186 #define UINT16_C(x)	(x)
                                 ;     187 #define UINT32_C(x)	((x) + (UINT32_MAX - UINT32_MAX))
                                 ;     188 
                                 ;     189  #if _ILONG
                                 ;     190   #define PTRDIFF_MIN		INT32_MIN
                                 ;     191   #define PTRDIFF_MAX		INT32_MAX
                                 ;     192 
                                 ;     193   #define SIG_ATOMIC_MIN	INT32_MIN
                                 ;     194   #define SIG_ATOMIC_MAX	INT32_MAX
                                 ;     195 
                                 ;     196   #define SIZE_MAX			UINT32_MAX
                                 ;     197 
                                 ;     198  #else /* _ILONG */
                                 ;     199   #define PTRDIFF_MIN		INT16_MIN
                                 ;     200   #define PTRDIFF_MAX		INT16_MAX
                                 ;     201 
                                 ;     202   #define SIG_ATOMIC_MIN	INT16_MIN
                                 ;     203   #define SIG_ATOMIC_MAX	INT16_MAX
                                 ;     204 
                                 ;     205   #define SIZE_MAX			UINT16_MAX
                                 ;     206  #endif /* _ILONG */
                                 ;     207 
                                 ;     208 #define WCHAR_MIN	_WCMIN
                                 ;     209 #define WCHAR_MAX	_WCMAX
                                 ;     210 
                                 ;     211 #define WINT_MIN	_WCMIN
                                 ;     212 #define WINT_MAX	_WCMAX
                                 ;     213 
                                 ;     214  #define INT64_MIN	(-0x7fffffffffffffffLL - _C2)
                                 ;     215  #define INT64_MAX	0x7fffffffffffffffLL
                                 ;     216  #define UINT64_MAX	0xffffffffffffffffULL
                                 ;     217 
                                 ;     218  #define INT_LEAST64_MIN	(-0x7fffffffffffffffLL - _C2)
                                 ;     219  #define INT_LEAST64_MAX	0x7fffffffffffffffLL
                                 ;     220  #define UINT_LEAST64_MAX	0xffffffffffffffffULL
                                 ;     221 
                                 ;     222  #define INT_FAST64_MIN		(-0x7fffffffffffffffLL - _C2)
                                 ;     223  #define INT_FAST64_MAX		0x7fffffffffffffffLL
                                 ;     224  #define UINT_FAST64_MAX	0xffffffffffffffffULL
                                 ;     225 
                                 ;     226  #define INTMAX_MIN		(-0x7fffffffffffffffLL - _C2)
                                 ;     227  #define INTMAX_MAX		0x7fffffffffffffffLL
                                 ;     228  #define UINTMAX_MAX	0xffffffffffffffffULL
                                 ;     229 
                                 ;     230 #define INT64_C(x)		((x) + (INT64_MAX - INT64_MAX))
                                 ;     231 #define UINT64_C(x)		((x) + (UINT64_MAX - UINT64_MAX))
                                 ;     232 #define INTMAX_C(x)		INT64_C(x)
                                 ;     233 #define UINTMAX_C(x)	UINT64_C(x)
                                 ;     234 _C_STD_END
                                 ;     235 
                                 ;     236 #endif /* _STDINT */
                                 ;     237 
                                 ;     238  #if defined(_STD_USING)
                                 ;     239 
                                 ;     240   #ifdef _STD_USING_BIT_TYPES
                                 ;     241 using _CSTD int8_t; using _CSTD int16_t;
                                 ;     242 using _CSTD int32_t; using _CSTD int64_t;
                                 ;     243   #endif /* _STD_USING_BIT_TYPES */
                                 ;     244 
                                 ;     245   #ifdef _STD_USING_INT_TYPES
                                 ;     246 using _CSTD uint8_t; using _CSTD uint16_t;
                                 ;     247 using _CSTD uint32_t; using _CSTD uint64_t;
                                 ;     248 
                                 ;     249 using _CSTD int_least8_t; using _CSTD int_least16_t;
                                 ;     250 using _CSTD int_least32_t;  using _CSTD int_least64_t;
                                 ;     251 using _CSTD uint_least8_t; using _CSTD uint_least16_t;
                                 ;     252 using _CSTD uint_least32_t; using _CSTD uint_least64_t;
                                 ;     253 
                                 ;     254 using _CSTD intmax_t; using _CSTD uintmax_t;
                                 ;     255   #endif /* _STD_USING_INT_TYPES */
                                 ;     256 
                                 ;     257   #ifdef _STD_USING_UINTPTR_T
                                 ;     258 using _CSTD uintptr_t;
                                 ;     259   #endif /* _STD_USING_UINTPTR_T */
                                 ;     260 
                                 ;     261   #ifdef _STD_USING_INTPTR_T
                                 ;     262 using _CSTD intptr_t;
                                 ;     263   #endif /* _STD_USING_INTPTR_T */
                                 ;     264 
                                 ;     265 using _CSTD int_fast8_t; using _CSTD int_fast16_t;
                                 ;     266 using _CSTD int_fast32_t; using _CSTD int_fast64_t;
                                 ;     267 using _CSTD uint_fast8_t; using _CSTD uint_fast16_t;
                                 ;     268 using _CSTD uint_fast32_t; using _CSTD uint_fast64_t;
                                 ;     269  #endif /* defined(_STD_USING) */
                                 ;     270 
                                 ;     271 /*
                                 ;     272  * Copyright (c) 1992-2007 by P.J. Plauger.  ALL RIGHTS RESERVED.
                                 ;     273 V5.03:0216 */
                                 ;     102 #include "switches.h"
                                 ;       1 #ifndef SWITCHES_H
                                 ;       2 #define SWITCHES_H
                                 ;       3 /******************************************************************************
                                 ;       4 * DISCLAIMER:                                                        
                                 ;       5 * The software supplied by Renesas Electronics Corp. Inc. is        
                                 ;       6 * intended and supplied for use on Renesas Electronics products.      
                                 ;       7 * This software is owned by Renesas Electronics Corp., Inc. or      
                                 ;       8 * Renesas Electronics Corporation and is protected under applicable   
                                 ;       9 * copyright laws. All rights are reserved.                           
                                 ;      10 *                                                                    
                                 ;      11 * THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, 
                                 ;      12 * IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO IMPLIED         
                                 ;      13 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
                                 ;      14 * APPLY TO THIS SOFTWARE. RENESAS ELECTRONICS CORP., INC. AND       
                                 ;      15 * AND RENESAS ELECTRONICS CORPORATION RESERVE THE RIGHT, WITHOUT      
                                 ;      16 * NOTICE, TO MAKE CHANGES TO THIS SOFTWARE. NEITHER RENESAS          
                                 ;      17 * ELECTRONICS CORP., INC. NOR RENESAS ELECTRONICS CORPORATION SHALL, 
                                 ;      18 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR        
                                 ;      19 * CONSEQUENTIAL DAMAGES FOR ANY REASON WHATSOEVER ARISING OUT OF THE 
                                 ;      20 * USE OR APPLICATION OF THIS SOFTWARE.                               
                                 ;      21 ******************************************************************************/
                                 ;      22 
                                 ;      23 /******************************************************************************
                                 ;      24 File: SWITCHES.C
                                 ;      25 
                                 ;      26 This is the main tutorial code. Please refer to the tutorial manual for more 
                                 ;      27 information on the program flow.
                                 ;      28 
                                 ;      29 tab space = 4 
                                 ;      30 
                                 ;      31 Revision History
                                 ;      32 Date        OSO-UID     Description
                                 ;      33 Nov 1 '08   RTA-CSS     For CAN-D-Kit version 3.00.
                                 ;      34 Mar 22 '10  RTA-CSS  	For RX62N with new CAN API.
                                 ;      35 ******************************************************************************/
                                 ;      36 
                                 ;      37 /*****************************************************************************
                                 ;      38 System Includes
                                 ;      39 ******************************************************************************/
                                 ;      40 /*****************************************************************************
                                 ;      41 User Includes
                                 ;      42 ******************************************************************************/
                                 ;      43 /******************************************************************************
                                 ;      44 Constant definitions
                                 ;      45 *****************************************************************************/
                                 ;      46 /******************************************************************************
                                 ;      47 Global variables and functions exported
                                 ;      48 ******************************************************************************/
                                 ;      49 /* Data */
                                 ;      50 /* Functions */
                                 ;      51 extern void ReadSwitches(void);
                                 ;      52 
                                 ;      53 #endif
                                 ;      54 /* eof */
                                 ;     103 #include "rdkrx62n.h"
                                 ;     104 
                                 ;     105 /******************************************************************************
                                 ;     106 Typedef definitions
                                 ;     107 ******************************************************************************/
                                 ;     108 /******************************************************************************
                                 ;     109 Macro definitions
                                 ;     110 ******************************************************************************/
                                 ;     111 #define LED_DELAY				0x00080000
                                 ;     112 #define NR_STARTUP_TEST_FRAMES	10
                                 ;     113 
                                 ;     114 /******************************************************************************
                                 ;     115 Global variables and functions imported (externs)
                                 ;     116 ******************************************************************************/
                                 ;     117 /* Data */
                                 ;     118 /* Functions */
                                 ;     119 /******************************************************************************
                                 ;     120 Constant definitions
                                 ;     121 *****************************************************************************/
                                 ;     122 /******************************************************************************
                                 ;     123 Global variables and functions exported
                                 ;     124 ******************************************************************************/
                                 ;     125 /* Demo data */
                                 ;     126 can_std_frame_t		tx_dataframe, rx_dataframe, remote_frame;
                                 ;     127 /* Demo flags. */
                                 ;     128 #ifndef USE_CAN_POLL
                                 ;     129 uint32_t			can0_tx_sentdata_flag = 0;
                                 ;     130 uint32_t			can0_tx_remote_sentdata_flag = 0;
                                 ;     131 uint32_t			can0_rx_newdata_flag = 0;
                                 ;     132 uint32_t			can0_rx_test_newdata_flag = 0;
                                 ;     133 uint32_t			can0_rx_remote_frame_flag = 0;
                                 ;     134 #endif //USE_CAN_POLL
                                 ;     135 enum app_err_enum	app_err_nr;
                                 ;     136 /* Functions */
                                 ;     137 
                                 ;     138 /******************************************************************************
                                 ;     139 Global variables and functions private to the file
                                 ;     140 ******************************************************************************/
                                 ;     141 /* Data */
                                 ;     142 /* Errors. Peripheral and bus errors. Prepared for two buses, but only one in RX62N. */
                                 ;     143 static uint32_t		error_bus_status[2], error_bus_status_prev[2];
                                 ;     144 static uint32_t		can_state[2];
                                 ;     145 static uint32_t		nr_times_reached_busoff[2];
                                 ;     146 
                                 ;     147 /* Functions */
                                 ;     148 static uint32_t InitCanApp(void);
                                 ;     149 static void CheckCANerrors(void);
                                 ;     150 static void HandleCanBusState(uint8_t ch_nr);
                                 ;     151 static void TestLEDs(uint32_t nr_led_flashes);
                                 ;     152 
                                 ;     153 #ifdef USE_CAN_POLL
                                 ;     154 static void CanPollDemo(void);
                                 ;     155 #else 
                                 ;     156 static void CanIntDemo(void);
                                 ;     157 #endif //USE_CAN_POLL
                                 ;     158 
                                 ;     159 /**********************************************************************************
                                 ;     160 User Program Code
                                 ;     161 ***********************************************************************************/
                                 ;     162 /*****************************************************************************
                                 ;     163 Name		: main
                                 ;     164 Parameters : none
                                 ;     165 Returns	 : nothing
                                 ;     166 Description: Main Can D-Kit demo program
                                 ;     167 *****************************************************************************/
                                 ;     168 void main(void)
                                             .glb        _main
00000000                         _main:                             ; function: main
                                             .STACK      _main=4
00000000                         L10:
00000000 05rrrrrr             A              BSR         _HardwareSetup
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",176
                                 ;     169 {
                                 ;     170 	uint32_t i, api_status = R_CAN_OK;
                                 ;     171 	
                                 ;     172 	/* Configure MCU for 100MHz CPU Clock, ports, peripherals,... */
                                 ;     173 	HardwareSetup();
                                 ;     174 	
                                 ;     175 	/* Setup LCD. */
                                 ;     176 	InitialiseDisplay();
00000004 05rrrrrr             A              BSR         _InitialiseDisplay
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",177
                                 ;     177 	DisplayString(LCD_LINE1, "RX62N ");
00000008 FB22rrrrrrrr                        MOV.L       #L66,R2
0000000E 6601                                MOV.L       #00000000H,R1
00000010 05rrrrrr             A              BSR         _DisplayString
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",178
                                 ;     178 	DisplayString(LCD_LINE2, "Simple");
00000014 FB22rrrrrrrr                        MOV.L       #L67,R2
0000001A 754110                              MOV.L       #00000010H,R1
0000001D 05rrrrrr             A              BSR         _DisplayString
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",179
                                 ;     179 	DisplayString(LCD_LINE3, "TxRx");
00000021 FB22rrrrrrrr                        MOV.L       #L68,R2
00000027 754118                              MOV.L       #00000018H,R1
0000002A 05rrrrrr             A              BSR         _DisplayString
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",180
                                 ;     180 	DisplayString(LCD_LINE4, "CAN Demo");
0000002E FB22rrrrrrrr                        MOV.L       #L69,R2
00000034 754120                              MOV.L       #00000020H,R1
00000037 05rrrrrr             A              BSR         _DisplayString
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",183
                                 ;     181 	
                                 ;     182 	/* Blink LEDs. */
                                 ;     183 	TestLEDs(20);
0000003B 754114                              MOV.L       #00000014H,R1
0000003E 39rrrr               W              BSR         __$TestLEDs
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",186
                                 ;     184 
                                 ;     185 	/* Init CAN. */
                                 ;     186 	api_status = R_CAN_Create(0);
00000041 6601                                MOV.L       #00000000H,R1
00000043 05rrrrrr             A              BSR         _R_CAN_Create
00000047 EF16                                MOV.L       R1,R6
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",192
                                 ;     187 						
                                 ;     188 	/*********************************
                                 ;     189 	* Pick ONE R_CAN_PortSet call below!	*
                                 ;     190 	**********************************/
                                 ;     191 	/* Normal CAN bus usage. */
                                 ;     192 	R_CAN_PortSet(0, ENABLE);
00000049 6612                                MOV.L       #00000001H,R2
0000004B 6601                                MOV.L       #00000000H,R1
0000004D 05rrrrrr             A              BSR         _R_CAN_PortSet
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",199
                                 ;     193 	/* Test modes. With Internal loopback mode you only need one board! */
                                 ;     194 	//R_CAN_PortSet(0, CANPORT_TEST_1_INT_LOOPBACK);
                                 ;     195 	//R_CAN_PortSet(0, CANPORT_TEST_0_EXT_LOOPBACK);
                                 ;     196 	//R_CAN_PortSet(0, CANPORT_TEST_LISTEN_ONLY);
                                 ;     197 	
                                 ;     198 	/* Init CAN mailboxes. */
                                 ;     199 	api_status |= InitCanApp();
00000051 39rrrr               W              BSR         __$InitCanApp
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",173
00000054 FB82rrrrrrrr                        MOV.L       #L70,R8
0000005A 5716                                OR          R1,R6
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",202
                                 ;     200 	
                                 ;     201 	/* Is all OK after all CAN initialization? */
                                 ;     202 	if (api_status != R_CAN_OK)
0000005C 20rr                                BEQ         L12
0000005E                         L11:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",205
                                 ;     203 	{
                                 ;     204 		api_status  = R_CAN_OK;
                                 ;     205 		app_err_nr  = APP_ERR_CAN_INIT;
0000005E FB42rrrrrrrr                        MOV.L       #_app_err_nr,R4
00000064 F84602                              MOV.L       #00000002H,[R4]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",204
00000067 6606                                MOV.L       #00000000H,R6
00000069                         L12:
00000069 6604                                MOV.L       #00000000H,R4
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",211
                                 ;     206 	}
                                 ;     207 	
                                 ;     208 	/* Interrupt Enable flag is set by default. */
                                 ;     209 	
                                 ;     210 	/* Send several test messages back to back. */
                                 ;     211 	api_status |= R_CAN_TxSet(0, CANBOX_TX, &tx_dataframe, DATA_FRAME);
0000006B FB32rrrrrrrr                        MOV.L       #_tx_dataframe,R3
00000071 6612                                MOV.L       #00000001H,R2
00000073 EF41                                MOV.L       R4,R1
00000075 05rrrrrr             A              BSR         _R_CAN_TxSet
00000079 5716                                OR          R1,R6
0000007B                         L13:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",213
                                 ;     212 	#ifdef USE_CAN_POLL
                                 ;     213 		while (R_CAN_TxCheck(0, CANBOX_TX))
0000007B 6612                                MOV.L       #00000001H,R2
0000007D 6601                                MOV.L       #00000000H,R1
0000007F 05rrrrrr             A              BSR         _R_CAN_TxCheck
00000083 6101                                CMP         #00H,R1
00000085 21rr                                BNE         L13
00000087                         L14:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",215
                                 ;     214 			;
                                 ;     215 		for (i = 0; i < NR_STARTUP_TEST_FRAMES; i++)
00000087 66A7                                MOV.L       #0000000AH,R7
00000089                         L15:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",217
                                 ;     216 		{
                                 ;     217 			api_status |= R_CAN_Tx(0, CANBOX_TX);
00000089 6612                                MOV.L       #00000001H,R2
0000008B 6601                                MOV.L       #00000000H,R1
0000008D 05rrrrrr             A              BSR         _R_CAN_Tx
00000091 5716                                OR          R1,R6
00000093                         L16:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",218
                                 ;     218 			while (R_CAN_TxCheck(0, CANBOX_TX))
00000093 6612                                MOV.L       #00000001H,R2
00000095 6601                                MOV.L       #00000000H,R1
00000097 05rrrrrr             A              BSR         _R_CAN_TxCheck
0000009B 6101                                CMP         #00H,R1
0000009D 21rr                                BNE         L16
0000009F                         L17:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",215
0000009F 6017                                SUB         #01H,R7
000000A1 21rr                                BNE         L15
000000A3                         L18:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",240
                                 ;     219 		    {
                                 ;     220 			}
                                 ;     221 		}
                                 ;     222 	#else	//Using CAN interrupts.
                                 ;     223 		while (can0_tx_sentdata_flag == 0)
                                 ;     224 			;
                                 ;     225 		can0_tx_sentdata_flag = 0;
                                 ;     226 		for (i = 0; i < NR_STARTUP_TEST_FRAMES; i++)
                                 ;     227 		{
                                 ;     228 			api_status |= R_CAN_Tx(0, CANBOX_TX);
                                 ;     229 			while (can0_tx_sentdata_flag == 0)
                                 ;     230 			{
                                 ;     231 			}
                                 ;     232 			can0_tx_sentdata_flag = 0;
                                 ;     233 		}
                                 ;     234 	#endif
                                 ;     235 	
                                 ;     236 	/*	M A I N	L O O P	* * * * * * * * * * * * * * * * * * * * * * * * * */	
                                 ;     237 	while(1)
                                 ;     238 	{
                                 ;     239 		/* User pressing switch(es)? */
                                 ;     240 		ReadSwitches();
000000A3 05rrrrrr             A              BSR         _ReadSwitches
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",243
                                 ;     241 
                                 ;     242 		/* Check for CAN errors. */
                                 ;     243 		 CheckCANerrors();
000000A7 39rrrr               W              BSR         __$CheckCANerrors
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",245
                                 ;     244 	
                                 ;     245 		if (can_state[0] != R_CAN_STATUS_BUSOFF)
000000AA FBE2rrrrrrrr                        MOV.L       #__$can_state,R14
000000B0 ECE5                                MOV.L       [R14],R5
000000B2 6145                                CMP         #04H,R5
000000B4 10                   S              BEQ         L20
000000B5                         L19:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",248
                                 ;     246 		{
                                 ;     247 			#ifdef USE_CAN_POLL
                                 ;     248 				CanPollDemo();
000000B5 39rrrr               W              BSR         __$CanPollDemo
000000B8 2Err                 B              BRA         L21
000000BA                         L20:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",256
                                 ;     249 			#else
                                 ;     250 				CanIntDemo();
                                 ;     251 			#endif //USE_CAN_POLL
                                 ;     252 		}
                                 ;     253 		 else
                                 ;     254 		/* Bus Off. */
                                 ;     255 		{
                                 ;     256 			DisplayString(LCD_LINE1, "App in	");
000000BA 6601                                MOV.L       #00000000H,R1
000000BC FB22rrrrrrrr                        MOV.L       #L71,R2
000000C2 05rrrrrr             A              BSR         _DisplayString
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",257
                                 ;     257 			DisplayString(LCD_LINE2, "Bus Off ");
000000C6 754110                              MOV.L       #00000010H,R1
000000C9 FB22rrrrrrrr                        MOV.L       #L72,R2
000000CF 05rrrrrr             A              BSR         _DisplayString
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",260
                                 ;     258 			
                                 ;     259 			/* HandleCanBusState() will restart app. */
                                 ;     260 			LCD_FLASH
000000D3 FB1E000040                          MOV.L       #00400000H,R1
000000D8 39rrrr               W              BSR         _Delay
000000DB 6601                                MOV.L       #00000000H,R1
000000DD EF82                                MOV.L       R8,R2
000000DF 05rrrrrr             A              BSR         _DisplayString
000000E3 754110                              MOV.L       #00000010H,R1
000000E6 EF82                                MOV.L       R8,R2
000000E8 05rrrrrr             A              BSR         _DisplayString
000000EC FB1A0020                            MOV.L       #00002000H,R1
000000F0 39rrrr               W              BSR         _Delay
000000F3                         L21:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",263
                                 ;     261 		}
                                 ;     262 		/* Reset receive/transmit indication. */
                                 ;     263 		LED2 = LED_OFF;
000000F3 FBFE0DC008                          MOV.L       #0008C00DH,R15
000000F8 F1F120                              BSET        #01H,20H[R15]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",264
                                 ;     264 		LED1 = LED_OFF;
000000FB F1F020                              BSET        #00H,20H[R15]
000000FE 2Err                 B              BRA         L18
00000100                         L22:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",275
                                 ;     265 	}
                                 ;     266 }/* end main() */
                                 ;     267 
                                 ;     268 #ifdef USE_CAN_POLL
                                 ;     269 /*****************************************************************************
                                 ;     270 Name:			CanPollDemo
                                 ;     271 Parameters:		-
                                 ;     272 Returns:		-
                                 ;     273 Description:	POLLED CAN demo version
                                 ;     274 *****************************************************************************/
                                 ;     275 static void CanPollDemo(void)
00000100                         __$CanPollDemo:                    ; function: __$CanPollDemo
                                             .STACK      __$CanPollDemo=12
00000100 6E67                                PUSHM       R6-R7
00000102                         L23:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",280
                                 ;     276 {
                                 ;     277 	uint32_t	api_status = R_CAN_OK;
                                 ;     278 	
                                 ;     279 	/*** TRANSMITTED any frames? */
                                 ;     280 	api_status = R_CAN_TxCheck(0, CANBOX_TX);
00000102 6612                                MOV.L       #00000001H,R2
00000104 6601                                MOV.L       #00000000H,R1
00000106 05rrrrrr             A              BSR         _R_CAN_TxCheck
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",281
                                 ;     281 	if (api_status == R_CAN_OK)
0000010A 6101                                CMP         #00H,R1
0000010C 21rr                                BNE         L25
0000010E                         L24:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",283
                                 ;     282 	{
                                 ;     283 		LED2 = LED_ON;
0000010E FB5E0DC008                          MOV.L       #0008C00DH,R5
00000113 F15920                              BCLR        #01H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",284
                                 ;     284 		DisplayString(LCD_LINE1, "TxChk OK");
00000116 FB22rrrrrrrr                        MOV.L       #L74,R2
0000011C 6601                                MOV.L       #00000000H,R1
0000011E 05rrrrrr             A              BSR         _DisplayString
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",285
                                 ;     285 		LcdShow4DigHex(tx_dataframe.data[0], tx_dataframe.data[1], 16);
00000122 FB52rrrrrrrr                        MOV.L       #_tx_dataframe+05H,R5
00000128 B05A                                MOVU.B      01H[R5],R2
0000012A 5851                                MOVU.B      [R5],R1
0000012C 754310                              MOV.L       #00000010H,R3
0000012F 05rrrrrr             A              BSR         _LcdShow4DigHex
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",286
                                 ;     286 		LcdShow4DigHex(tx_dataframe.data[2], tx_dataframe.data[3], 20); LCD_FLASH
00000133 FB52rrrrrrrr                        MOV.L       #_tx_dataframe+05H,R5
00000139 B0DA                                MOVU.B      03H[R5],R2
0000013B B0D1                                MOVU.B      02H[R5],R1
0000013D 754314                              MOV.L       #00000014H,R3
00000140 05rrrrrr             A              BSR         _LcdShow4DigHex
00000144 FB1E000040                          MOV.L       #00400000H,R1
00000149 FB62rrrrrrrr                        MOV.L       #L70,R6
0000014F 39rrrr               W              BSR         _Delay
00000152 EF62                                MOV.L       R6,R2
00000154 6601                                MOV.L       #00000000H,R1
00000156 05rrrrrr             A              BSR         _DisplayString
0000015A EF62                                MOV.L       R6,R2
0000015C 754110                              MOV.L       #00000010H,R1
0000015F 05rrrrrr             A              BSR         _DisplayString
00000163 FB1A0020                            MOV.L       #00002000H,R1
00000167 39rrrr               W              BSR         _Delay
0000016A                         L25:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",292
                                 ;     287 	}
                                 ;     288 	/* Since we are always polling for transmits, api_status for R_CAN_TxCheck 
                                 ;     289 	will most often be other than R_CAN_OK, don't show that. */
                                 ;     290 	
                                 ;     291 	/*** RECEIVED any frames? */
                                 ;     292 	api_status = R_CAN_RxPoll(0, CANBOX_RX);
0000016A 6642                                MOV.L       #00000004H,R2
0000016C 6601                                MOV.L       #00000000H,R1
0000016E 05rrrrrr             A              BSR         _R_CAN_RxPoll
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",293
                                 ;     293 	if (api_status == R_CAN_OK)
00000172 6101                                CMP         #00H,R1
00000174 3Brrrr               W              BNE         L27
00000177                         L26:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",295
                                 ;     294 	{
                                 ;     295 		LED1 = LED_ON;
00000177 FB5E0DC008                          MOV.L       #0008C00DH,R5
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",296
                                 ;     296 		DisplayString(LCD_LINE1, "RxPollOK"); LCD_FLASH
0000017C FB22rrrrrrrr                        MOV.L       #L75,R2
00000182 6601                                MOV.L       #00000000H,R1
00000184 F15820                              BCLR        #00H,20H[R5]
00000187 05rrrrrr             A              BSR         _DisplayString
0000018B FB1E000040                          MOV.L       #00400000H,R1
00000190 FB72rrrrrrrr                        MOV.L       #L70,R7
00000196 39rrrr               W              BSR         _Delay
00000199 EF72                                MOV.L       R7,R2
0000019B 6601                                MOV.L       #00000000H,R1
0000019D 05rrrrrr             A              BSR         _DisplayString
000001A1 EF72                                MOV.L       R7,R2
000001A3 754110                              MOV.L       #00000010H,R1
000001A6 05rrrrrr             A              BSR         _DisplayString
000001AA FB1A0020                            MOV.L       #00002000H,R1
000001AE 39rrrr               W              BSR         _Delay
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",297
                                 ;     297 		DisplayString(LCD_LINE1, "RxRead: ");
000001B1 FB22rrrrrrrr                        MOV.L       #L76,R2
000001B7 6601                                MOV.L       #00000000H,R1
000001B9 05rrrrrr             A              BSR         _DisplayString
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",300
                                 ;     298 		
                                 ;     299 		/* Read CAN data and show. */
                                 ;     300 		api_status = R_CAN_RxRead(0, CANBOX_RX, &rx_dataframe);
000001BD FB32rrrrrrrr                        MOV.L       #_rx_dataframe,R3
000001C3 6642                                MOV.L       #00000004H,R2
000001C5 6601                                MOV.L       #00000000H,R1
000001C7 05rrrrrr             A              BSR         _R_CAN_RxRead
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",301
                                 ;     301 		LcdShow4DigHex(rx_dataframe.data[0], rx_dataframe.data[1], 16);
000001CB FB52rrrrrrrr                        MOV.L       #_rx_dataframe+05H,R5
000001D1 EF16                                MOV.L       R1,R6
000001D3 B05A                                MOVU.B      01H[R5],R2
000001D5 5851                                MOVU.B      [R5],R1
000001D7 754310                              MOV.L       #00000010H,R3
000001DA 05rrrrrr             A              BSR         _LcdShow4DigHex
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",302
                                 ;     302 		LcdShow4DigHex(rx_dataframe.data[2], rx_dataframe.data[3], 20); LCD_FLASH
000001DE FB52rrrrrrrr                        MOV.L       #_rx_dataframe+05H,R5
000001E4 B0DA                                MOVU.B      03H[R5],R2
000001E6 B0D1                                MOVU.B      02H[R5],R1
000001E8 754314                              MOV.L       #00000014H,R3
000001EB 05rrrrrr             A              BSR         _LcdShow4DigHex
000001EF FB1E000040                          MOV.L       #00400000H,R1
000001F4 39rrrr               W              BSR         _Delay
000001F7 EF72                                MOV.L       R7,R2
000001F9 6601                                MOV.L       #00000000H,R1
000001FB 05rrrrrr             A              BSR         _DisplayString
000001FF EF72                                MOV.L       R7,R2
00000201 754110                              MOV.L       #00000010H,R1
00000204 05rrrrrr             A              BSR         _DisplayString
00000208 FB1A0020                            MOV.L       #00002000H,R1
0000020C 39rrrr               W              BSR         _Delay
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",303
                                 ;     303 		if (api_status == R_CAN_MSGLOST)
0000020F 6146                                CMP         #04H,R6
00000211 21rr                                BNE         L27
00000213                         L28:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",305
                                 ;     304 		{
                                 ;     305 			DisplayString(LCD_LINE2, "MSGLOST"); LCD_FLASH
00000213 FB22rrrrrrrr                        MOV.L       #L77,R2
00000219 754110                              MOV.L       #00000010H,R1
0000021C 05rrrrrr             A              BSR         _DisplayString
00000220 FB1E000040                          MOV.L       #00400000H,R1
00000225 39rrrr               W              BSR         _Delay
00000228 EF72                                MOV.L       R7,R2
0000022A 6601                                MOV.L       #00000000H,R1
0000022C 05rrrrrr             A              BSR         _DisplayString
00000230 EF72                                MOV.L       R7,R2
00000232 754110                              MOV.L       #00000010H,R1
00000235 05rrrrrr             A              BSR         _DisplayString
00000239 FB1A0020                            MOV.L       #00002000H,R1
0000023D 39rrrr               W              BSR         _Delay
00000240                         L27:
00000240 3F6702                              RTSD        #08H,R6-R7
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",382
                                 ;     306 		}
                                 ;     307 	}
                                 ;     308 }/* end CanPollDemo() */
                                 ;     309 
                                 ;     310 #else
                                 ;     311 
                                 ;     312 /*****************************************************************************
                                 ;     313 Name:			CanIntDemo
                                 ;     314 Parameters:		-
                                 ;     315 Returns:		-
                                 ;     316 Description:	INTERRUPT driven CAN demo version
                                 ;     317 *****************************************************************************/
                                 ;     318 static void CanIntDemo(void)
                                 ;     319 {
                                 ;     320 	uint32_t	api_status = R_CAN_OK;
                                 ;     321 	
                                 ;     322 	/************************************************************************
                                 ;     323 	* Using CAN INTERRUPTS.													*
                                 ;     324 	* See also r_can_api.c for the ISR example.								*
                                 ;     325 	*************************************************************************/
                                 ;     326 	/*** TRANSMITTED any frames? Only need to check if flag is set by CAN Tx ISR. */
                                 ;     327 	if (can0_tx_sentdata_flag)
                                 ;     328 	{
                                 ;     329 		can0_tx_sentdata_flag = 0;
                                 ;     330 		LED2 = LED_ON;
                                 ;     331 		/* Show CAN frame was sent. */
                                 ;     332 		DisplayString(LCD_LINE1, "Tx OK   ");
                                 ;     333 		LcdShow4DigHex(tx_dataframe.data[0], tx_dataframe.data[1], 16);
                                 ;     334 		LcdShow4DigHex(tx_dataframe.data[2], tx_dataframe.data[3], 20); LCD_FLASH
                                 ;     335 	}
                                 ;     336 	if (can0_tx_remote_sentdata_flag)
                                 ;     337 	{
                                 ;     338 		can0_tx_remote_sentdata_flag = 0;
                                 ;     339 		DisplayString(LCD_LINE1, "TxRemote"); LCD_FLASH
                                 ;     340 	}					
                                 ;     341 	
                                 ;     342 	/*** RECEIVED any frames? Only need to check if flag is set by CAN Rx ISR.
                                 ;     343 	 Will only receive own frames in CAN port test modes 0 and 1. */
                                 ;     344 	if (can0_rx_newdata_flag)
                                 ;     345 	{
                                 ;     346 		can0_rx_newdata_flag = 0;
                                 ;     347 		LED1 = LED_ON;
                                 ;     348 		DisplayString(LCD_LINE1, "Rx OK   "); LCD_FLASH
                                 ;     349 		DisplayString(LCD_LINE1, "Rx Read:");
                                 ;     350 	
                                 ;     351 		/* Read CAN data and show. */
                                 ;     352 		api_status = R_CAN_RxRead(0, CANBOX_RX, &rx_dataframe);
                                 ;     353 		LcdShow4DigHex(rx_dataframe.data[0], rx_dataframe.data[1], 16);
                                 ;     354 		LcdShow4DigHex(rx_dataframe.data[2], rx_dataframe.data[3], 20); LCD_FLASH
                                 ;     355 		if (api_status == R_CAN_MSGLOST)
                                 ;     356 		{
                                 ;     357 			//DisplayString(LCD_LINE2, "MSGLOST"); LCD_FLASH
                                 ;     358 		}
                                 ;     359 	}
                                 ;     360 	if (can0_rx_test_newdata_flag)
                                 ;     361 	{
                                 ;     362 		can0_rx_test_newdata_flag = 0;
                                 ;     363 		LED1 = LED_ON;
                                 ;     364 		DisplayString(LCD_LINE1, "Rx Test"); LCD_FLASH
                                 ;     365 	}
                                 ;     366 	/* Set up remote reply if remote request came in. */
                                 ;     367 	if (can0_rx_remote_frame_flag == 1)
                                 ;     368 	{
                                 ;     369 		can0_rx_remote_frame_flag = 0;
                                 ;     370 		remote_frame.data[0]++;
                                 ;     371 		R_CAN_TxSet(0, CANBOX_REMOTE_TX, &remote_frame, DATA_FRAME);
                                 ;     372 	}
                                 ;     373 }/* end CanIntDemo() */
                                 ;     374 #endif //USE_CAN_POLL
                                 ;     375 
                                 ;     376 /*****************************************************************************
                                 ;     377 Name:			InitCanApp
                                 ;     378 Parameters:		-
                                 ;     379 Returns:		-
                                 ;     380 Description:	Initialize CAN demo application
                                 ;     381 *****************************************************************************/
                                 ;     382 static uint32_t InitCanApp(void)
00000243                         __$InitCanApp:                     ; function: __$InitCanApp
                                             .STACK      __$InitCanApp=8
00000243 7EA6                                PUSH.L      R6
00000245                         L29:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",386
                                 ;     383 {	
                                 ;     384 	uint32_t	api_status = R_CAN_OK;
                                 ;     385 	
                                 ;     386 	can_state[0] = R_CAN_STATUS_ERROR_ACTIVE;
00000245 FB52rrrrrrrr                        MOV.L       #__$can_state,R5
0000024B F85601                              MOV.L       #00000001H,[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",389
                                 ;     387 	
                                 ;     388 	/* Configure mailboxes in Halt mode. */
                                 ;     389 	api_status |= R_CAN_Control(0, HALT_CANMODE);
0000024E 6652                                MOV.L       #00000005H,R2
00000250 6601                                MOV.L       #00000000H,R1
00000252 05rrrrrr             A              BSR         _R_CAN_Control
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",394
                                 ;     390 	
                                 ;     391 	/********	Init demo to recieve data	********/	
                                 ;     392 	/* Use API to set one CAN mailbox for demo receive. */
                                 ;     393 	/* Standard id. Choose value 0-0x07FF (2047). */
                                 ;     394 	api_status |= R_CAN_RxSet(0, CANBOX_RX, RX_ID_DEFAULT, DATA_FRAME);
00000256 6604                                MOV.L       #00000000H,R4
00000258 EF16                                MOV.L       R1,R6
0000025A 6613                                MOV.L       #00000001H,R3
0000025C 6642                                MOV.L       #00000004H,R2
0000025E EF41                                MOV.L       R4,R1
00000260 05rrrrrr             A              BSR         _R_CAN_RxSet
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",398
                                 ;     395 	
                                 ;     396 	/********	Init. demo Tx dataframe RAM structure	********/	
                                 ;     397 	/* Standard id. Choose value 0-0x07FF (2047). */
                                 ;     398 	tx_dataframe.id		    =	TX_ID_DEFAULT;
00000264 FB42rrrrrrrr                        MOV.L       #_tx_dataframe,R4
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",400
                                 ;     399 	tx_dataframe.dlc		=	8;
                                 ;     400 	tx_dataframe.data[0]	=	0x00;
0000026A FB52rrrrrrrr                        MOV.L       #_tx_dataframe+05H,R5
00000270 5716                                OR          R1,R6
00000272 F84601                              MOV.L       #00000001H,[R4]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",399
00000275 3C4408                              MOV.B       #08H,04H[R4]
00000278 F85200112233                        MOV.L       #33221100H,[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",404
                                 ;     401 	tx_dataframe.data[1]	=	0x11;
                                 ;     402 	tx_dataframe.data[2]	=	0x22;
                                 ;     403 	tx_dataframe.data[3]	=	0x33;
                                 ;     404 	tx_dataframe.data[4]	=	0x44;
0000027E F9520144556677                      MOV.L       #77665544H,04H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",412
                                 ;     405 	tx_dataframe.data[5]	=	0x55;
                                 ;     406 	tx_dataframe.data[6]	=	0x66;
                                 ;     407 	tx_dataframe.data[7]	=	0x77;
                                 ;     408 
                                 ;     409 	/* Mask for receive box. Write to mask only in Halt mode. */
                                 ;     410 	/* 0x7FF = no mask. 0x7FD = mask bit 1, for example; If receive ID is set to 1, both
                                 ;     411 	ID 1 and 3 should be received. */
                                 ;     412 	R_CAN_RxSetMask( 0, CANBOX_RX, 0x7FF);
00000285 FB3AFF07                            MOV.L       #000007FFH,R3
00000289 6642                                MOV.L       #00000004H,R2
0000028B 6601                                MOV.L       #00000000H,R1
0000028D 05rrrrrr             A              BSR         _R_CAN_RxSetMask
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",416
                                 ;     413 		
                                 ;     414 	/* API to send will be set up in SW1Func() in file switches.c. */
                                 ;     415 
                                 ;     416 	api_status |= R_CAN_Control(0, OPERATE_CANMODE);
00000291 6662                                MOV.L       #00000006H,R2
00000293 6601                                MOV.L       #00000000H,R1
00000295 05rrrrrr             A              BSR         _R_CAN_Control
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",420
                                 ;     417 
                                 ;     418 	
                                 ;     419 	/***************	Init. remote dataframe response **********************/
                                 ;     420 	remote_frame.id = REMOTE_TEST_ID;
00000299 754350                              MOV.L       #00000050H,R3
0000029C FB42rrrrrrrr                        MOV.L       #_remote_frame,R4
000002A2 5716                                OR          R1,R6
000002A4 E343                                MOV.L       R3,[R4]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",424
                                 ;     421 
                                 ;     422 	/* Length is specified by the remote request. */
                                 ;     423 	
                                 ;     424 	R_CAN_RxSet(0, CANBOX_REMOTE_RX, REMOTE_TEST_ID, REMOTE_FRAME);
000002A6 6614                                MOV.L       #00000001H,R4
000002A8 6682                                MOV.L       #00000008H,R2
000002AA 6601                                MOV.L       #00000000H,R1
000002AC 05rrrrrr             A              BSR         _R_CAN_RxSet
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",428
                                 ;     425 	/***********************************************************************/
                                 ;     426 	
                                 ;     427 	/* Set frame buffer id so LCD shows correct receive ID from start. */
                                 ;     428 	 rx_dataframe.id = RX_ID_DEFAULT;
000002B0 FB42rrrrrrrr                        MOV.L       #_rx_dataframe,R4
000002B6 F84601                              MOV.L       #00000001H,[R4]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",430
                                 ;     429 	
                                 ;     430 	 return api_status;
000002B9 EF61                                MOV.L       R6,R1
000002BB 3F6601                              RTSD        #04H,R6-R6
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",441
                                 ;     431 
                                 ;     432 } /* end InitCanApp */
                                 ;     433 
                                 ;     434 /*****************************************************************************
                                 ;     435 Name:			CheckCANerrors
                                 ;     436 Parameters:		-
                                 ;     437 Returns:		-
                                 ;     438 Description:	Check for all possible errors, in app and peripheral. Add 
                                 ;     439 				checking for your app here.
                                 ;     440 *****************************************************************************/
                                 ;     441 static void CheckCANerrors(void)
000002BE                         __$CheckCANerrors:                 ; function: __$CheckCANerrors
                                             .STACK      __$CheckCANerrors=4
000002BE                         L30:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",444
                                 ;     442 {
                                 ;     443 	/* Error passive or more? */
                                 ;     444 	 HandleCanBusState(0);
000002BE 6601                                MOV.L       #00000000H,R1
000002C0 39rrrr               W              BSR         __$HandleCanBusState
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",446
                                 ;     445 		
                                 ;     446 	if (app_err_nr)
000002C3 FB32rrrrrrrr                        MOV.L       #_app_err_nr,R3
000002C9 EC35                                MOV.L       [R3],R5
000002CB 6105                                CMP         #00H,R5
000002CD 20rr                                BEQ         L32
000002CF                         L31:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",450
                                 ;     447 	{
                                 ;     448 		/* Show error to user */
                                 ;     449 		/* RESET ERRORs with SW1. */
                                 ;     450 		LED4 = LED_ON;
000002CF FB4E0DC008                          MOV.L       #0008C00DH,R4
000002D4 F14B20                              BCLR        #03H,20H[R4]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",451
                                 ;     451 		DisplayString(LCD_LINE1,"App err");
000002D7 FB22rrrrrrrr                        MOV.L       #L80,R2
000002DD 6601                                MOV.L       #00000000H,R1
000002DF 05rrrrrr             A              BSR         _DisplayString
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",452
                                 ;     452 		LcdShow2DigHex(app_err_nr, 1 * 16 + 4);
000002E3 FB32rrrrrrrr                        MOV.L       #_app_err_nr,R3
000002E9 5831                                MOVU.B      [R3],R1
000002EB 754214                              MOV.L       #00000014H,R2
000002EE 05rrrrrr             A              BSR         _LcdShow2DigHex
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",453
                                 ;     453 		LCD_FLASH
000002F2 FB1E000040                          MOV.L       #00400000H,R1
000002F7 39rrrr               W              BSR         _Delay
000002FA FB22rrrrrrrr                        MOV.L       #L70,R2
00000300 6601                                MOV.L       #00000000H,R1
00000302 05rrrrrr             A              BSR         _DisplayString
00000306 FB22rrrrrrrr                        MOV.L       #L70,R2
0000030C 754110                              MOV.L       #00000010H,R1
0000030F 05rrrrrr             A              BSR         _DisplayString
00000313 FB1A0020                            MOV.L       #00002000H,R1
00000317 39rrrr               W              BSR         _Delay
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",454
                                 ;     454 		LED4 = LED_OFF;
0000031A FB4E0DC008                          MOV.L       #0008C00DH,R4
0000031F F14320                              BSET        #03H,20H[R4]
00000322                         L32:
00000322 02                                  RTS
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",464
                                 ;     455 	}
                                 ;     456 }/* end CheckCANerrors() */
                                 ;     457 
                                 ;     458 /*****************************************************************************
                                 ;     459 Name:				HandleCanBusState
                                 ;     460 Parameters:			Bus number, 0 or 1.
                                 ;     461 Returns:			-
                                 ;     462 Description:		Check CAN peripheral bus state.
                                 ;     463 *****************************************************************************/
                                 ;     464 static void HandleCanBusState(uint8_t	ch_nr)
00000323                         __$HandleCanBusState:              ; function: __$HandleCanBusState
                                             .STACK      __$HandleCanBusState=40
00000323 6E6A                                PUSHM       R6-R10
00000325 7100F0                              ADD         #0FFFFFFF0H,R0,R0
00000328                         L38:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",469
                                 ;     465 {
                                 ;     466 	can_std_frame_t err_tx_dataframe;
                                 ;     467 	
                                 ;     468 	/* Has the status register reached error passive or more? */
                                 ;     469 	if (ch_nr == 0)
00000328 5B1A                                MOVU.B      R1,R10
0000032A FDC2A9                              SHLL        #02H,R10,R9
0000032D FB82rrrrrrrr                        MOV.L       #__$error_bus_status,R8
00000333 4B98                                ADD         R9,R8
00000335 610A                                CMP         #00H,R10
00000337 18                   S              BNE         L40
00000338                         L39:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",470
                                 ;     470 		error_bus_status[ch_nr] = R_CAN_CheckErr(0);
00000338 6601                                MOV.L       #00000000H,R1
0000033A 05rrrrrr             A              BSR         _R_CAN_CheckErr
0000033E E381                                MOV.L       R1,[R8]
00000340                         L40:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",476
                                 ;     471 	/*else
                                 ;     472 		error_bus_status[ch_nr] = R_CAN1_CheckErr(1);*/
                                 ;     473 
                                 ;     474 	/* Tell user if CAN bus status changed.
                                 ;     475 		All Status bits are read only. */
                                 ;     476 	if (error_bus_status[ch_nr] != error_bus_status_prev[ch_nr])
00000340 FB72rrrrrrrr                        MOV.L       #__$error_bus_status_prev,R7
00000346 4B97                                ADD         R9,R7
00000348 EC85                                MOV.L       [R8],R5
0000034A EC74                                MOV.L       [R7],R4
0000034C 4745                                CMP         R4,R5
0000034E 3Arrrr               W              BEQ         L42
00000351                         L41:
00000351 6115                                CMP         #01H,R5
00000353 21rr                                BNE         L44
00000355                         L35:
00000355                         L43:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",483
                                 ;     477 	{	
                                 ;     478 		 switch (error_bus_status[ch_nr])
                                 ;     479 		{
                                 ;     480 			/* Error Active. */
                                 ;     481 			 case R_CAN_STATUS_ERROR_ACTIVE:
                                 ;     482 				/* Only report if there was a previous error. */
                                 ;     483 				 if (error_bus_status_prev[ch_nr] > R_CAN_STATUS_ERROR_ACTIVE)
00000355 6114                                CMP         #01H,R4
00000357 25rr                                BLEU        L46
00000359                         L45:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",485
                                 ;     484 				{
                                 ;     485 					 if (ch_nr == 0)
00000359 FB22rrrrrrrr                        MOV.L       #L82,R2
0000035F 610A                                CMP         #00H,R10
00000361 18                   S              BNE         L48
00000362                         L47:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",487
                                 ;     486 					{
                                 ;     487 						DisplayString(LCD_LINE1, "Bus0: OK");
00000362 FB22rrrrrrrr                        MOV.L       #L83,R2
00000368                         L48:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",494
                                 ;     488 					}
                                 ;     489 					else
                                 ;     490 					{
                                 ;     491 						DisplayString(LCD_LINE1, "Bus1: OK");
                                 ;     492 					}
                                 ;     493 					/* Show user */
                                 ;     494 					 Delay(0x400000);
00000368 6601                                MOV.L       #00000000H,R1
0000036A 05rrrrrr             A              BSR         _DisplayString
0000036E FB1E000040                          MOV.L       #00400000H,R1
00000373 39rrrr               W              BSR         _Delay
00000376 EC74                                MOV.L       [R7],R4
00000378                         L46:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",497
                                 ;     495 				}
                                 ;     496 				/* Restart if returned from Bus Off. */
                                 ;     497 				 if (error_bus_status_prev[ch_nr] == R_CAN_STATUS_BUSOFF)
00000378 6144                                CMP         #04H,R4
0000037A 21rr                                BNE         L50
0000037C                         L49:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",500
                                 ;     498 				{
                                 ;     499 					/* Restart CAN */
                                 ;     500 					 if (R_CAN_Create(0) != R_CAN_OK)
0000037C 6601                                MOV.L       #00000000H,R1
0000037E 05rrrrrr             A              BSR         _R_CAN_Create
00000382 6101                                CMP         #00H,R1
00000384 10                   S              BEQ         L52
00000385                         L51:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",501
                                 ;     501 						app_err_nr |= APP_ERR_CAN_PERIPH;
00000385 FB42rrrrrrrr                        MOV.L       #_app_err_nr,R4
0000038B F040                                BSET        #00H,[R4]
0000038D                         L52:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",504
                                 ;     502 					
                                 ;     503 					/* Restart CAN demos even if only one channel failed. */
                                 ;     504 					 InitCanApp();
0000038D 39rrrr               W              BSR         __$InitCanApp
00000390 2Err                 B              BRA         L50
00000392                         L36:
00000392                         L37:
00000392                         L34:
00000392                         L44:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",516
                                 ;     505 				}
                                 ;     506 				 break;	
                                 ;     507 
                                 ;     508 			/* Error Passive. */
                                 ;     509 			 case R_CAN_STATUS_ERROR_PASSIVE:
                                 ;     510 			/* Continue into Busoff case to display. */
                                 ;     511 
                                 ;     512 			/* Bus Off. */
                                 ;     513 			 case R_CAN_STATUS_BUSOFF:
                                 ;     514 			 default:
                                 ;     515 				//demo_state[ch_nr] = CAN_BUS_OFF;
                                 ;     516 				 if (ch_nr == 0)
00000392 610A                                CMP         #00H,R10
00000394 18                   S              BNE         L54
00000395                         L53:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",517
                                 ;     517 					DisplayString(LCD_LINE1, "bus0:	");
00000395 FB22rrrrrrrr                        MOV.L       #L84,R2
0000039B 6601                                MOV.L       #00000000H,R1
0000039D 08                   S              BRA         L55
0000039E                         L54:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",519
                                 ;     518 				else
                                 ;     519 					DisplayString(LCD_LINE2, "bus1:	");
0000039E FB22rrrrrrrr                        MOV.L       #L85,R2
000003A4 754110                              MOV.L       #00000010H,R1
000003A7                         L55:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",522
                                 ;     520 				
                                 ;     521 				/* Show user */
                                 ;     522 				 LcdShow2DigHex((uint8_t)error_bus_status[ch_nr], ch_nr * 16 + 6);
000003A7 05rrrrrr             A              BSR         _DisplayString
000003AB FDC4A6                              SHLL        #04H,R10,R6
000003AE 6266                                ADD         #06H,R6
000003B0 5881                                MOVU.B      [R8],R1
000003B2 5B62                                MOVU.B      R6,R2
000003B4 05rrrrrr             A              BSR         _LcdShow2DigHex
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",523
                                 ;     523 				 Delay(0x400000);
000003B8 FB1E000040                          MOV.L       #00400000H,R1
000003BD 39rrrr               W              BSR         _Delay
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",524
                                 ;     524 				 nr_times_reached_busoff[ch_nr]++;
000003C0 FB42rrrrrrrr                        MOV.L       #__$nr_times_reached_busoff,R4
000003C6 4B94                                ADD         R9,R4
000003C8 EC45                                MOV.L       [R4],R5
000003CA 6215                                ADD         #01H,R5
000003CC E345                                MOV.L       R5,[R4]
000003CE                         L50:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",527
                                 ;     525 				 break;
                                 ;     526 		}
                                 ;     527 		 error_bus_status_prev[ch_nr] = error_bus_status[ch_nr];
000003CE EC84                                MOV.L       [R8],R4
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",530
                                 ;     528 
                                 ;     529 		/* Transmit CAN bus status change */
                                 ;     530 		err_tx_dataframe.id  = 0x700 + ch_nr;
000003D0 72A50007                            ADD         #0700H,R10,R5
000003D4 E374                                MOV.L       R4,[R7]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",531
                                 ;     531 		err_tx_dataframe.dlc =	1;
000003D6 6612                                MOV.L       #00000001H,R2
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",532
                                 ;     532 		err_tx_dataframe.data[0] = error_bus_status[ch_nr];
000003D8 810C                                MOV.B       R4,05H[R0]
000003DA 6604                                MOV.L       #00000000H,R4
000003DC E305                                MOV.L       R5,[R0]
000003DE 8102                                MOV.B       R2,04H[R0]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",540
                                 ;     533 		
                                 ;     534 		/* Send Error state on both channels. Maybe at least one is up. 
                                 ;     535 		 Warning: If CAN0 and CAN1 are connected to eachother, they will try to
                                 ;     536 		 send practically simultaneously. Let this be a lesson; sending the same 
                                 ;     537 		 ID from two nodes onto the same bus at the same time is very hazardous
                                 ;     538 		 as the arbitration cannot take place. Only use both lines below if 
                                 ;     539 		 CAN0 and CAN1 are on different buses. */
                                 ;     540 		 R_CAN_TxSet(0, TX_ID_DEFAULT, &err_tx_dataframe, DATA_FRAME);
000003E0 EF03                                MOV.L       R0,R3
000003E2 EF41                                MOV.L       R4,R1
000003E4 05rrrrrr             A              BSR         _R_CAN_TxSet
000003E8                         L42:
000003E8 3F6A09                              RTSD        #24H,R6-R10
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",551
                                 ;     541 	   //R_CAN_TxSet(1, TX_ID_DEFAULT, &err_tx_dataframe, DATA_FRAME);
                                 ;     542 	 }
                                 ;     543 }/* end HandleCanBusState() */
                                 ;     544 
                                 ;     545 /*******************************************************************************
                                 ;     546 Function Name:	ResetAllErrors
                                 ;     547 Description:	Reset all types of errors, application and CAN peripeheral errors.
                                 ;     548 Parameters:	 	-
                                 ;     549 Return value:	CAN API code
                                 ;     550 *******************************************************************************/
                                 ;     551 uint32_t ResetAllErrors(void)
                                             .glb        _ResetAllErrors
000003EB                         _ResetAllErrors:                   ; function: ResetAllErrors
                                             .STACK      _ResetAllErrors=4
000003EB                         L56:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",558
                                 ;     552 {		
                                 ;     553 	 uint32_t status = 0;
                                 ;     554 	
                                 ;     555 	/* Reset errors */
                                 ;     556 	 app_err_nr = APP_NO_ERR;
                                 ;     557 	
                                 ;     558 	 error_bus_status[0] = 0;
000003EB FB52rrrrrrrr                        MOV.L       #__$error_bus_status,R5
000003F1 6601                                MOV.L       #00000000H,R1
000003F3 E351                                MOV.L       R1,[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",559
                                 ;     559 	 error_bus_status[1] = 0;
000003F5 A059                                MOV.L       R1,04H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",563
                                 ;     560 
                                 ;     561 	/* You can chooose to not reset error_bus_status_prev; if there was an error, 
                                 ;     562 	 keep info to signal recovery */
                                 ;     563 	 error_bus_status_prev[0] = 0; 
000003F7 FB52rrrrrrrr                        MOV.L       #__$error_bus_status_prev,R5
000003FD E351                                MOV.L       R1,[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",564
                                 ;     564 	 error_bus_status_prev[1] = 0;
000003FF A059                                MOV.L       R1,04H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",566
                                 ;     565 	
                                 ;     566 	 nr_times_reached_busoff[0] = 0;
00000401 FB52rrrrrrrr                        MOV.L       #__$nr_times_reached_busoff,R5
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",556
00000407 FB42rrrrrrrr                        MOV.L       #_app_err_nr,R4
0000040D E351                                MOV.L       R1,[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",567
                                 ;     567 	 nr_times_reached_busoff[1] = 0;
0000040F A059                                MOV.L       R1,04H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",570
                                 ;     568 	
                                 ;     569 	/* Reset Error Judge Factor and Error Code registers */
                                 ;     570 	 CAN0.EIFR.BYTE /*= CAN1.EIFR.BYTE*/ = 0;
00000411 FB5E000209                          MOV.L       #00090200H,R5
00000416 F84600                              MOV.L       #00000000H,[R4]
00000419 CB514D06                            MOV.B       R1,064DH[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",573
                                 ;     571 	
                                 ;     572 	/* Reset CAN0 Error Code Store Register (ECSR). */
                                 ;     573 	CAN0.ECSR.BYTE = 0;
0000041D CB515006                            MOV.B       R1,0650H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",576
                                 ;     574 	
                                 ;     575 	/* Reset CAN0 Error Counters. */
                                 ;     576 	CAN0.RECR = 0;
00000421 CB514E06                            MOV.B       R1,064EH[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",577
                                 ;     577 	CAN0.TECR = 0;
00000425 CB514F06                            MOV.B       R1,064FH[R5]
00000429 02                                  RTS
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",588
                                 ;     578 
                                 ;     579 	return status;
                                 ;     580 }/* end ResetAllErrors() */
                                 ;     581 
                                 ;     582 /******************************************************************************
                                 ;     583 Function Name:		TestLEDs
                                 ;     584 Parameters:			-
                                 ;     585 Return value:		-
                                 ;     586 Description:		Blink the LEDs
                                 ;     587 ******************************************************************************/
                                 ;     588 void TestLEDs(uint32_t nr_led_flashes)
0000042A                         __$TestLEDs:                       ; function: __$TestLEDs
                                             .STACK      __$TestLEDs=4
0000042A                         L57:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",593
                                 ;     589 {
                                 ;     590 	uint32_t i = LED_DELAY;
                                 ;     591 	uint32_t j;
                                 ;     592 	
                                 ;     593 	LED1 = LED_ON;
0000042A FB5E0DC008                          MOV.L       #0008C00DH,R5
0000042F F15820                              BCLR        #00H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",594
                                 ;     594 	LED2 = LED_OFF;
00000432 F15120                              BSET        #01H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",595
                                 ;     595 	LED3 = LED_ON;
00000435 F15A20                              BCLR        #02H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",596
                                 ;     596 	LED4 = LED_OFF;
00000438 F15320                              BSET        #03H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",597
                                 ;     597 	LED5 = LED_ON;
0000043B F15C20                              BCLR        #04H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",590
0000043E FBFE000008                          MOV.L       #00080000H,R15
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",598
                                 ;     598 	LED6 = LED_OFF;
00000443 F15520                              BSET        #05H,20H[R5]
00000446 EFF3                                MOV.L       R15,R3
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",600
                                 ;     599 	
                                 ;     600 	for (j = 0; j < nr_led_flashes; j++)
00000448 6602                                MOV.L       #00000000H,R2
0000044A 2Err                 B              BRA         L58
0000044C                         L59:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",602
                                 ;     601 	{
                                 ;     602 		while(i--)
0000044C EF34                                MOV.L       R3,R4
0000044E 6013                                SUB         #01H,R3
00000450 6104                                CMP         #00H,R4
00000452 21rr                                BNE         L59
00000454                         L60:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",608
                                 ;     603 		{
                                 ;     604 		}
                                 ;     605 		
                                 ;     606 		i = LED_DELAY;
                                 ;     607 		
                                 ;     608 		LED1 ^= 1;
00000454 FCE15F20                            BNOT        #00H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",609
                                 ;     609 		LED2 ^= 1;
00000458 FCE55F20                            BNOT        #01H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",610
                                 ;     610 		LED3 ^= 1;
0000045C FCE95F20                            BNOT        #02H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",611
                                 ;     611 		LED4 ^= 1;
00000460 FCED5F20                            BNOT        #03H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",612
                                 ;     612 		LED5 ^= 1;
00000464 FCF15F20                            BNOT        #04H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",613
                                 ;     613 		LED6 ^= 1;
00000468 FCF55F20                            BNOT        #05H,20H[R5]
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",606
0000046C EFF3                                MOV.L       R15,R3
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",600
0000046E 6212                                ADD         #01H,R2
00000470                         L58:
00000470 4712                                CMP         R1,R2
00000472 23rr                                BLTU        L59
00000474                         L61:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",615
                                 ;     614 	}
                                 ;     615 	ALL_LEDS_OFF
00000474 F15520                              BSET        #05H,20H[R5]
00000477 F55520                              BTST        #05H,20H[R5]
0000047A FCF15220                            BMGEU       #04H,20H[R5]
0000047E F55420                              BTST        #04H,20H[R5]
00000481 FCED5220                            BMGEU       #03H,20H[R5]
00000485 F55320                              BTST        #03H,20H[R5]
00000488 FCE95220                            BMGEU       #02H,20H[R5]
0000048C F55220                              BTST        #02H,20H[R5]
0000048F FCE55220                            BMGEU       #01H,20H[R5]
00000493 F55120                              BTST        #01H,20H[R5]
00000496 FCE15220                            BMGEU       #00H,20H[R5]
0000049A 02                                  RTS
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",624
                                 ;     616 } /* end TestLEDs() */
                                 ;     617 
                                 ;     618 /*******************************************************************************
                                 ;     619 Function Name:	Delay
                                 ;     620 Description:	Demo delay
                                 ;     621 Parameters:	 	32-bit delay count value
                                 ;     622 Return value:	-
                                 ;     623 *******************************************************************************/
                                 ;     624 void Delay(uint32_t n)
                                             .glb        _Delay
0000049B                         _Delay:                            ; function: Delay
                                             .STACK      _Delay=4
0000049B                         L62:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",628
                                 ;     625 {
                                 ;     626 	uint32_t i;
                                 ;     627 	
                                 ;     628 	 for(i = 0; i < n; i++)
0000049B 6605                                MOV.L       #00000000H,R5
0000049D 08                   S              BRA         L63
0000049E                         L64:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",630
                                 ;     629 	 {
                                 ;     630 		 nop();
0000049E 03                                  NOP
0000049F 6215                                ADD         #01H,R5
000004A1                         L63:
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\api_demo.c",628
000004A1 4715                                CMP         R1,R5
000004A3 23rr                                BLTU        L64
000004A5                         L65:
000004A5 02                                  RTS
                                 ;     631 	 }
                                 ;     632 }/* end Delay() */
                                 ;     633 
                                 ;     634 
                                 ;     635 /*******************************************************************************
                                 ;     636 
                                 ;     637 
                                 ;     638 						CAN INTERRRUPTS 
                                 ;     639 
                                 ;     640 
                                 ;     641 *******************************************************************************/
                                 ;     642 #ifndef USE_CAN_POLL
                                 ;     643 #ifdef CAPI_CFG_CAN0_ISR
                                 ;     644 /*****************************************************************************
                                 ;     645 Name:				CAN0 ISRs
                                 ;     646 Parameters:		-
                                 ;     647 Returns:			-
                                 ;     648 Description:		CAN interrupt routine examples.
                                 ;     649 *****************************************************************************/
                                 ;     650 /*****************************************************************************
                                 ;     651 Name:			CAN0_TXM0_ISR
                                 ;     652 Parameters:		-
                                 ;     653 Returns:		-
                                 ;     654 Description:	CAN0 Transmit interrupt.
                                 ;     655 				Check which mailbox transmitted data and process it.
                                 ;     656 *****************************************************************************/
                                 ;     657 #pragma interrupt CAN0_TXM0_ISR(vect=VECT_CAN0_TXM0, enable) 
                                 ;     658 void CAN0_TXM0_ISR(void)
                                 ;     659 {
                                 ;     660 	uint32_t api_status = R_CAN_OK;
                                 ;     661 
                                 ;     662 	api_status = R_CAN_TxCheck(0, CANBOX_TX);
                                 ;     663 	if (api_status == R_CAN_OK)
                                 ;     664 		can0_tx_sentdata_flag = 1;
                                 ;     665 	api_status = R_CAN_TxCheck(0, CANBOX_REMOTE_TX);
                                 ;     666 	if (api_status == R_CAN_OK)
                                 ;     667 		can0_tx_remote_sentdata_flag = 1;
                                 ;     668 	
                                 ;     669 	/* Use mailbox search reg. Should be faster than above if a lot of mailboxes to check. 
                                 ;     670 	Not verified. */
                                 ;     671 }/* end CAN0_TXM0_ISR() */
                                 ;     672 
                                 ;     673 /*****************************************************************************
                                 ;     674 Name:			CAN0_RXM0_ISR
                                 ;     675 Parameters:		-
                                 ;     676 Returns:		-
                                 ;     677 Description:	CAN0 Receive interrupt.
                                 ;     678 				Check which mailbox received data and process it.
                                 ;     679 *****************************************************************************/
                                 ;     680 #pragma interrupt CAN0_RXM0_ISR(vect=VECT_CAN0_RXM0, enable)
                                 ;     681 void CAN0_RXM0_ISR(void)
                                 ;     682 {
                                 ;     683 	/* Use CAN API. */
                                 ;     684 	uint32_t api_status = R_CAN_OK;
                                 ;     685 
                                 ;     686 	api_status = R_CAN_RxPoll(0, CANBOX_RX);
                                 ;     687 	if (api_status == R_CAN_OK)
                                 ;     688 		can0_rx_newdata_flag = 1;
                                 ;     689 		
                                 ;     690 	api_status = R_CAN_RxPoll(0, CANBOX_REMOTE_RX);
                                 ;     691 	if (api_status == R_CAN_OK)
                                 ;     692 	{
                                 ;     693 		/* REMOTE_FRAME FRAME REQUEST RECEIVED */
                                 ;     694 		/* Do not set BP on the next line to check for Remote frame. By the time you 
                                 ;     695 		continue, the recsucc flag will already have changed to be a trmsucc flag in 
                                 ;     696 		the CAN status reg. */
                                 ;     697 	
                                 ;     698 		/* Reset of the receive/transmit flag in the MCTL register will be done by 
                                 ;     699 		set_remote_reply_std_can0(). */
                                 ;     700 
                                 ;     701 		/* Tell application. */
                                 ;     702 		can0_rx_remote_frame_flag = 1;
                                 ;     703 		
                                 ;     704 		remote_frame.dlc = CAN0.MB[CANBOX_REMOTE_RX].DLC.BIT.DLC;
                                 ;     705 		
                                 ;     706 		/* Reset NEWDATA flag since we won't be reading the mailbox. */
                                 ;     707 		CAN0.MCTL[CANBOX_REMOTE_RX].BIT.RX.NEWDATA = 0;
                                 ;     708 	}
                                 ;     709 	
                                 ;     710 	/* Use mailbox search reg. Should be faster if a lot of mailboxes to check. 
                                 ;     711 	Not verified. */
                                 ;     712 }/* end CAN0_RXM0_ISR() */
                                 ;     713 
                                 ;     714 /*****************************************************************************
                                 ;     715 Name:			CAN0_ERS0_ISR
                                 ;     716 Parameters:		-
                                 ;     717 Returns:		-
                                 ;     718 Description:	CAN0 Error interrupt.
                                 ;     719 *****************************************************************************/
                                 ;     720 #pragma interrupt	CAN0_ERS0_ISR(vect=VECT_CAN0_ERS0, enable)
                                 ;     721 void CAN0_ERS0_ISR(void)
                                 ;     722 {
                                 ;     723 	 LED4 = LED_ON;
                                 ;     724 	 nop();
                                 ;     725 }/* end CAN0_ERS0_ISR() */
                                 ;     726 #endif //CAPI_CFG_CAN0_ISR
                                 ;     727 #endif //USE_CAN_POLL
                                 ;     728 
                                 ;     729 /* eof */
                                             .glb        _HardwareSetup
                                             .glb        _R_CAN_Create
                                             .glb        _R_CAN_PortSet
                                             .glb        _R_CAN_Control
                                             .glb        _R_CAN_TxSet
                                             .glb        _R_CAN_Tx
                                             .glb        _R_CAN_TxCheck
                                             .glb        _R_CAN_RxSet
                                             .glb        _R_CAN_RxPoll
                                             .glb        _R_CAN_RxRead
                                             .glb        _R_CAN_RxSetMask
                                             .glb        _R_CAN_CheckErr
                                             .glb        _InitialiseDisplay
                                             .glb        _DisplayString
                                             .glb        _LcdShow2DigHex
                                             .glb        _LcdShow4DigHex
                                             .glb        _ReadSwitches
                                             .SECTION    L,ROMDATA,ALIGN=4
00000000                         L66:
00000000 52583632                            .byte       "RX62N "
         4E20                    
00000006 00                                  .byte        00H
00000007                         L67:
00000007 53696D70                            .byte       "Simple"
         6C65                    
0000000D 00                                  .byte        00H
0000000E                         L68:
0000000E 54785278                            .byte       "TxRx"
00000012 00                                  .byte        00H
00000013                         L69:
00000013 43414E20                            .byte       "CAN Demo"
         44656D6F                
0000001B 00                                  .byte        00H
0000001C                         L71:
0000001C 41707020                            .byte       "App in"
         696E                    
00000022 0900                                .byte        09H, 00H
00000024                         L72:
00000024 42757320                            .byte       "Bus Off "
         4F666620                
0000002C 00                                  .byte        00H
0000002D                         L70:
0000002D 20202020                            .byte       "        "
         20202020                
00000035 00                                  .byte        00H
00000036                         L74:
00000036 54784368                            .byte       "TxChk OK"
         6B204F4B                
0000003E 00                                  .byte        00H
0000003F                         L75:
0000003F 5278506F                            .byte       "RxPollOK"
         6C6C4F4B                
00000047 00                                  .byte        00H
00000048                         L76:
00000048 52785265                            .byte       "RxRead: "
         61643A20                
00000050 00                                  .byte        00H
00000051                         L77:
00000051 4D53474C                            .byte       "MSGLOST"
         4F5354                  
00000058 00                                  .byte        00H
00000059                         L80:
00000059 41707020                            .byte       "App err"
         657272                  
00000060 00                                  .byte        00H
00000061                         L83:
00000061 42757330                            .byte       "Bus0: OK"
         3A204F4B                
00000069 00                                  .byte        00H
0000006A                         L82:
0000006A 42757331                            .byte       "Bus1: OK"
         3A204F4B                
00000072 00                                  .byte        00H
00000073                         L84:
00000073 62757330                            .byte       "bus0:"
         3A                      
00000078 0900                                .byte        09H, 00H
0000007A                         L85:
0000007A 62757331                            .byte       "bus1:"
         3A                      
0000007F 0900                                .byte        09H, 00H
                                             .SECTION    B,DATA,ALIGN=4
                                             .glb        _tx_dataframe
00000000                         _tx_dataframe:                     ; static: tx_dataframe
00000000(00000010H)                          .blkl       4
                                             .glb        _rx_dataframe
00000010                         _rx_dataframe:                     ; static: rx_dataframe
00000010(00000010H)                          .blkl       4
                                             .glb        _remote_frame
00000020                         _remote_frame:                     ; static: remote_frame
00000020(00000010H)                          .blkl       4
                                             .glb        _app_err_nr
00000030                         _app_err_nr:                       ; static: app_err_nr
00000030(00000004H)                          .blkl       1
00000034                         __$error_bus_status:               ; static: __$error_bus_status
00000034(00000008H)                          .blkl       2
0000003C                         __$error_bus_status_prev:          ; static: __$error_bus_status_prev
0000003C(00000008H)                          .blkl       2
00000044                         __$can_state:                      ; static: __$can_state
00000044(00000008H)                          .blkl       2
0000004C                         __$nr_times_reached_busoff:        ; static: __$nr_times_reached_busoff
0000004C(00000008H)                          .blkl       2
                                             .END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     11527   LINES

Section List

Attr         Size               Name
CODE     0000001190(000004A6H)  P
ROMDATA  0000000129(00000081H)  L
DATA     0000000084(00000054H)  B

Cpu Type

-CPU=RX600

Command Parameter

-output=C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\Debug\api_demo.obj
-nologo
-cpu=rx600
-debug
-listfile=C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\Debug\api_demo.lst
