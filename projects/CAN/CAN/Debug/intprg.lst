* RX FAMILY ASSEMBLER V.1.02.00.000 *  SOURCE LIST  Sun Nov 10 22:46:20 2013

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V.1.02.00.000)  10-Nov-2013 22:46:1
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-CPU=RX600
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=C:\Users\Sandesh\AppData\Local\Temp\grp2199\intprg.src
                                 ;-nologo
                                 ;-cpu=rx600
                                 ;-lang=c99
                                 ;-include=C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\..\src
                                 ;-define=NOT_USE_CAN_POLL=1,NOT_DEBUG=1
                                 ;-debug
                                 ;-show=source
                                 ;C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\intprg.c
                                 
                                 ;C LABEL    INSTRUCTION OPERAND    COMMENT
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                             .SECTION    PIntPRG,CODE
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\intprg.c",17
                                 ;       1 /***********************************************************************/
                                 ;       2 /*                                                                     */
                                 ;       3 /*  FILE        :intprg.c                                              */
                                 ;       4 /*  DATE        :Fri, Jun 12, 2009                                     */
                                 ;       5 /*  DESCRIPTION :Interrupt Program                                     */
                                 ;       6 /*  CPU TYPE    :Other                                                 */
                                 ;       7 /*                                                                     */
                                 ;       8 /*  This file is generated by Renesas Project Generator (Ver.4.13).    */
                                 ;       9 /*                                                                     */
                                 ;      10 /***********************************************************************/
                                 ;      11                   
                                 ;      12 #include <machine.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 #ifndef _MACHINE
                                 ;       8 #define _MACHINE
                                 ;       9 #include <macro.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 #ifndef _MACRO
                                 ;       8 #define _MACRO
                                 ;       9 
                                 ;      10 #ifdef __RX
                                 ;      11 
                                 ;      12 #ifndef _NO_MT
                                 ;      13 #define _NO_MT
                                 ;      14 #endif /* !_NO_MT */
                                 ;      15 
                                 ;      16 #ifdef __STDC_VERSION__
                                 ;      17 #if 199901L <= __STDC_VERSION__
                                 ;      18 #define _C99
                                 ;      19 #endif /* 199901L <= __STDC_VERSION__ */
                                 ;      20 #endif /* __STDC_VERSION__ */
                                 ;      21 
                                 ;      22 #ifndef _HAS_TR1
                                 ;      23 #define _HAS_TR1 0
                                 ;      24 #endif /* !_HAS_TR1 */
                                 ;      25 
                                 ;      26 #ifndef __STDC_WANT_LIB_EXT1__
                                 ;      27 #define __STDC_WANT_LIB_EXT1__ 0
                                 ;      28 #endif /* !__STDC_WANT_LIB_EXT1 */
                                 ;      29 
                                 ;      30 #ifndef _ADDED_C_LIB
                                 ;      31 #define _ADDED_C_LIB 0
                                 ;      32 #endif /* !_ADDED_C_LIB */
                                 ;      33 
                                 ;      34 #ifndef __STDC_WANT_SAFER_LIB__
                                 ;      35 #define __STDC_WANT_SAFER_LIB__ 0
                                 ;      36 #endif /* !__STDC_WANT_SAFER_LIB__ */
                                 ;      37 
                                 ;      38 #ifndef _ALT_NS
                                 ;      39 #define _ALT_NS 0
                                 ;      40 #endif /* !_ALT_NS */
                                 ;      41 
                                 ;      42 #ifdef __cplusplus
                                 ;      43 
                                 ;      44 #ifndef _C99
                                 ;      45 #define _C99
                                 ;      46 #endif /* !_C99*/ 
                                 ;      47 
                                 ;      48 #endif /* __cplusplus */
                                 ;      49 
                                 ;      50 #ifdef __embedded_cplusplus
                                 ;      51 
                                 ;      52 #ifndef _NO_NS
                                 ;      53 #define _NO_NS
                                 ;      54 #endif /* !_NO_NS */
                                 ;      55 
                                 ;      56 #ifndef _ECPP
                                 ;      57 #define _ECPP
                                 ;      58 #endif /* !_ECPP */
                                 ;      59 
                                 ;      60 #endif /* __embedded_cplusplus */
                                 ;      61 
                                 ;      62 #ifdef _REENTRANT
                                 ;      63 
                                 ;      64 #ifndef _R_REENT
                                 ;      65 #define _R_REENT
                                 ;      66 #endif /* !_R_REENT */
                                 ;      67 
                                 ;      68 #endif /* _REENTRANT */
                                 ;      69 
                                 ;      70 #endif /* __RX */
                                 ;      71 
                                 ;      72 #endif /* _MACRO */
                                 ;      10 
                                 ;      11 #include <builtin.h>
                                 ;       1 /********************************************************************************/
                                 ;       2 /* RX FAMILY C/C++ Compiler                                                     */
                                 ;       3 /* Copyright (C) 2007 (2009 - 2010) Renesas Electronics Corporation and         */
                                 ;       4 /* Renesas Solutions Corp. All rights reserved.                                 */
                                 ;       5 /********************************************************************************/
                                 ;       6 
                                 ;       7 #ifndef _BUILTIN
                                 ;       8 #define _BUILTIN
                                 ;       9 #include <macro.h>
                                 ;      10 
                                 ;      11 #ifdef __cplusplus
                                 ;      12 extern "C" {
                                 ;      13 #endif
                                 ;      14 
                                 ;      15 /* follow machine.h */
                                 ;      16 extern signed long    _builtin_max(signed long, signed long);
                                 ;      17 extern signed long    _builtin_min(signed long, signed long);
                                 ;      18 extern unsigned long  _builtin_revl(unsigned long);
                                 ;      19 extern unsigned long  _builtin_revw(unsigned long);
                                 ;      20 extern void           _builtin_xchg(signed long *, signed long *);
                                 ;      21 extern long long      _builtin_rmpab(long long, unsigned long, signed char *, signed char *);
                                 ;      22 extern long long      _builtin_rmpaw(long long, unsigned long, short *, short *);
                                 ;      23 extern long long      _builtin_rmpal(long long, unsigned long, long *, long *);
                                 ;      24 extern unsigned long  _builtin_rolc(unsigned long);
                                 ;      25 extern unsigned long  _builtin_rorc(unsigned long);
                                 ;      26 extern unsigned long  _builtin_rotl(unsigned long, unsigned long);
                                 ;      27 extern unsigned long  _builtin_rotr(unsigned long, unsigned long);
                                 ;      28 extern void           _builtin_brk(void);
                                 ;      29 extern void           _builtin_int_exception(signed long);
                                 ;      30 extern void           _builtin_wait(void);
                                 ;      31 extern void           _builtin_nop(void);
                                 ;      32 extern void           _builtin_set_ipl(signed long);
                                 ;      33 extern unsigned char  _builtin_get_ipl(void);
                                 ;      34 extern void           _builtin_set_psw(unsigned long);
                                 ;      35 extern unsigned long  _builtin_get_psw(void);
                                 ;      36 extern void           _builtin_set_fpsw(unsigned long);
                                 ;      37 extern unsigned long  _builtin_get_fpsw(void);
                                 ;      38 extern void           _builtin_set_usp(void *);
                                 ;      39 extern void *         _builtin_get_usp(void);
                                 ;      40 extern void           _builtin_set_isp(void *);
                                 ;      41 extern void *         _builtin_get_isp(void);
                                 ;      42 extern void           _builtin_set_intb(void *);
                                 ;      43 extern void *         _builtin_get_intb(void);
                                 ;      44 extern void           _builtin_set_bpsw(unsigned long);
                                 ;      45 extern unsigned long  _builtin_get_bpsw(void);
                                 ;      46 extern void           _builtin_set_bpc(void *);
                                 ;      47 extern void *         _builtin_get_bpc(void);
                                 ;      48 extern void           _builtin_set_fintv(void *);
                                 ;      49 extern void *         _builtin_get_fintv(void);
                                 ;      50 extern signed long long   _builtin_emul(signed long, signed long);
                                 ;      51 extern unsigned long long _builtin_emulu(unsigned long, unsigned long);
                                 ;      52 extern short          _builtin_macw1(short *, short *, unsigned long);
                                 ;      53 extern short          _builtin_macw2(short *, short *, unsigned long);
                                 ;      54 extern long           _builtin_macl(short *, short *, unsigned long);
                                 ;      55 extern void           _builtin_chg_pmusr(void);
                                 ;      56 extern void             _builtin_set_acc(signed long long data);
                                 ;      57 extern signed long long _builtin_get_acc(void);
                                 ;      58 extern void           _builtin_setpsw_i(void);
                                 ;      59 extern void           _builtin_clrpsw_i(void);
                                 ;      60 
                                 ;      61 #ifdef __cplusplus
                                 ;      62 }
                                 ;      63 #endif /* #ifdef __cplusplus */
                                 ;      64 
                                 ;      65 #endif /* #ifndef _BUILTIN */
                                 ;      12 
                                 ;      13 #define max(data1, data2)                _builtin_max(data1, data2)
                                 ;      14 #define min(data1, data2)                _builtin_min(data1, data2)
                                 ;      15 #define revl(data)                       _builtin_revl(data)
                                 ;      16 #define revw(data)                       _builtin_revw(data)
                                 ;      17 #define xchg(data1, data2)               _builtin_xchg(data1, data2)
                                 ;      18 #define rmpab(init, count, addr1, addr2) _builtin_rmpab(init, count, addr1, addr2)
                                 ;      19 #define rmpaw(init, count, addr1, addr2) _builtin_rmpaw(init, count, addr1, addr2)
                                 ;      20 #define rmpal(init, count, addr1, addr2) _builtin_rmpal(init, count, addr1, addr2)
                                 ;      21 #define rolc(data)                       _builtin_rolc(data)
                                 ;      22 #define rorc(data)                       _builtin_rorc(data)
                                 ;      23 #define rotl(data, num)                  _builtin_rotl(data, num)
                                 ;      24 #define rotr(data, num)                  _builtin_rotr(data, num)
                                 ;      25 #define brk()                            _builtin_brk()
                                 ;      26 #define int_exception(num)               _builtin_int_exception(num)
                                 ;      27 #define wait()                           _builtin_wait()
                                 ;      28 #define nop()                            _builtin_nop()
                                 ;      29 #define set_ipl(level)                   _builtin_set_ipl(level)
                                 ;      30 #define get_ipl()                        _builtin_get_ipl()
                                 ;      31 #define set_psw(data)                    _builtin_set_psw(data)
                                 ;      32 #define get_psw()                        _builtin_get_psw()
                                 ;      33 #define set_fpsw(data)                   _builtin_set_fpsw(data)
                                 ;      34 #define get_fpsw()                       _builtin_get_fpsw()
                                 ;      35 #define set_usp(data)                    _builtin_set_usp(data)
                                 ;      36 #define get_usp()                        _builtin_get_usp()
                                 ;      37 #define set_isp(data)                    _builtin_set_isp(data)
                                 ;      38 #define get_isp()                        _builtin_get_isp()
                                 ;      39 #define set_intb(data)                   _builtin_set_intb(data)
                                 ;      40 #define get_intb()                       _builtin_get_intb()
                                 ;      41 #define set_bpsw(data)                   _builtin_set_bpsw(data)
                                 ;      42 #define get_bpsw()                       _builtin_get_bpsw()
                                 ;      43 #define set_bpc(data)                    _builtin_set_bpc(data)
                                 ;      44 #define get_bpc()                        _builtin_get_bpc()
                                 ;      45 #define set_fintv(data)                  _builtin_set_fintv(data)
                                 ;      46 #define get_fintv()                      _builtin_get_fintv()
                                 ;      47 #define emul(data1, data2)               _builtin_emul(data1, data2)
                                 ;      48 #define emulu(data1, data2)              _builtin_emulu(data1, data2)
                                 ;      49 #define macw1(data1, data2, count)       _builtin_macw1(data1, data2, count)
                                 ;      50 #define macw2(data1, data2, count)       _builtin_macw2(data1, data2, count)
                                 ;      51 #define macl(data1, data2, count)        _builtin_macl(data1, data2, count)
                                 ;      52 #define chg_pmusr()                      _builtin_chg_pmusr()
                                 ;      53 #define set_acc(data)                    _builtin_set_acc(data)
                                 ;      54 #define get_acc()                        _builtin_get_acc()
                                 ;      55 #define setpsw_i()                       _builtin_setpsw_i()
                                 ;      56 #define clrpsw_i()                       _builtin_clrpsw_i()
                                 ;      57 
                                 ;      58 #endif
                                 ;      13 #include "vect.h"
                                 ;       1 /***********************************************************************/
                                 ;       2 /*                                                                     */
                                 ;       3 /*  FILE        :vect.h                                                */
                                 ;       4 /*  DATE        :Fri, Jun 12, 2009                                     */
                                 ;       5 /*  DESCRIPTION :Definition of Vector                                  */
                                 ;       6 /*  CPU TYPE    :Other                                                 */
                                 ;       7 /*                                                                     */
                                 ;       8 /*  This file is generated by Renesas Project Generator (Ver.4.13).    */
                                 ;       9 /*                                                                     */
                                 ;      10 /***********************************************************************/
                                 ;      11                   
                                 ;      12 
                                 ;      13 
                                 ;      14 
                                 ;      15 // Exception(Supervisor Instruction)
                                 ;      16 #pragma interrupt (Excep_SuperVisorInst)
                                 ;      17 void Excep_SuperVisorInst(void);
                                 ;      18 
                                 ;      19 // Exception(Access)
                                 ;      20 #pragma interrupt (Excep_Access(notable))
                                 ;      21 void Excep_Access(void);
                                 ;      22 
                                 ;      23 // Exception(Undefined Instruction)
                                 ;      24 #pragma interrupt (Excep_UndefinedInst)
                                 ;      25 void Excep_UndefinedInst(void);
                                 ;      26 
                                 ;      27 // Exception(Floating Point)
                                 ;      28 #pragma interrupt (Excep_FloatingPoint)
                                 ;      29 void Excep_FloatingPoint(void);
                                 ;      30 
                                 ;      31 // NMI
                                 ;      32 #pragma interrupt (NonMaskableInterrupt)
                                 ;      33 void NonMaskableInterrupt(void);
                                 ;      34 
                                 ;      35 // Dummy
                                 ;      36 #pragma interrupt (Dummy)
                                 ;      37 void Dummy(void);
                                 ;      38 
                                 ;      39 // BRK
                                 ;      40 #pragma interrupt (Expep_BRK(vect=0))
                                 ;      41 void Expep_BRK(void);
                                 ;      42 
                                 ;      43 //;<<VECTOR DATA START (POWER ON RESET)>>
                                 ;      44 //;Power On Reset PC
                                 ;      45 extern void PowerON_Reset_PC(void);                                                                                                                
                                 ;      46 //;<<VECTOR DATA END (POWER ON RESET)>>
                                 ;      47 
                                 ;      14 #pragma section IntPRG
                                 ;      15 
                                 ;      16 // Exception(Supervisor Instruction)
                                 ;      17 void Excep_SuperVisorInst(void){/* brk(); */}
                                             .glb        _Excep_SuperVisorInst
00000000                         _Excep_SuperVisorInst:             ; function: Excep_SuperVisorInst
                                             .STACK      _Excep_SuperVisorInst=8
00000000                         L10:
00000000 7F95                                RTE
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\intprg.c",20
                                 ;      18 
                                 ;      19 // Exception(Access)
                                 ;      20 void Excep_Access(void){/* brk(); */}
                                             .glb        _Excep_Access
00000002                         _Excep_Access:                     ; function: Excep_Access
                                             .STACK      _Excep_Access=8
00000002                         L11:
00000002 7F95                                RTE
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\intprg.c",23
                                 ;      21 
                                 ;      22 // Exception(Undefined Instruction)
                                 ;      23 void Excep_UndefinedInst(void){/* brk(); */}
                                             .glb        _Excep_UndefinedInst
00000004                         _Excep_UndefinedInst:              ; function: Excep_UndefinedInst
                                             .STACK      _Excep_UndefinedInst=8
00000004                         L12:
00000004 7F95                                RTE
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\intprg.c",26
                                 ;      24 
                                 ;      25 // Exception(Floating Point)
                                 ;      26 void Excep_FloatingPoint(void){/* brk(); */}
                                             .glb        _Excep_FloatingPoint
00000006                         _Excep_FloatingPoint:              ; function: Excep_FloatingPoint
                                             .STACK      _Excep_FloatingPoint=8
00000006                         L13:
00000006 7F95                                RTE
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\intprg.c",29
                                 ;      27 
                                 ;      28 // NMI
                                 ;      29 void NonMaskableInterrupt(void){/* brk(); */}
                                             .glb        _NonMaskableInterrupt
00000008                         _NonMaskableInterrupt:             ; function: NonMaskableInterrupt
                                             .STACK      _NonMaskableInterrupt=8
00000008                         L14:
00000008 7F95                                RTE
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\intprg.c",32
                                 ;      30 
                                 ;      31 // Dummy
                                 ;      32 void Dummy(void){/* brk(); */}
                                             .glb        _Dummy
0000000A                         _Dummy:                            ; function: Dummy
                                             .STACK      _Dummy=8
0000000A                         L15:
0000000A 7F95                                RTE
                                             .LINE       "C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\src\intprg.c",35
                                 ;      33 
                                 ;      34 // BRK
                                 ;      35 void Expep_BRK(void){ wait(); }
                                             .glb        _Expep_BRK
0000000C                         _Expep_BRK:                        ; function: Expep_BRK
                                             .STACK      _Expep_BRK=8
                                             .RVECTOR    0,_Expep_BRK
0000000C                         L16:
0000000C 7F96                                WAIT
0000000E 7F95                                RTE
                                 ;      36 
                                             .END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00345   LINES

Section List

Attr         Size               Name
CODE     0000000016(00000010H)  PIntPRG

Cpu Type

-CPU=RX600

Command Parameter

-output=C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\Debug\intprg.obj
-nologo
-cpu=rx600
-debug
-listfile=C:\Users\Sandesh\Documents\GitHub\rx62n\projects\CAN\CAN\Debug\intprg.lst
